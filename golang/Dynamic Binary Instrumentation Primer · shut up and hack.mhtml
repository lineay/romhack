From: <Saved by Blink>
Snapshot-Content-Location: https://blog.deniable.org/posts/binary-instrumentation/
Subject: =?utf-8?Q?Dynamic=20Binary=20Instrumentation=20Primer=20=C2=B7=20shut=20u?=
 =?utf-8?Q?p=20and=20hack?=
Date: Tue, 21 Nov 2023 21:37:33 +0800
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--WJYGjXZBIsLH8W9XYSwBFOvHaqe9Rm2yqzypfCs1Nm----"


------MultipartBoundary--WJYGjXZBIsLH8W9XYSwBFOvHaqe9Rm2yqzypfCs1Nm----
Content-Type: text/html
Content-ID: <frame-E189BB5AD39CC663FC47DA6A434695C1@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://blog.deniable.org/posts/binary-instrumentation/

<!DOCTYPE html><html lang=3D"en"><head><meta http-equiv=3D"Content-Type" co=
ntent=3D"text/html; charset=3DUTF-8">
   =20
    <meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-scale=
=3D1.0">
    <meta http-equiv=3D"Content-Language" content=3D"en">

   =20
    <meta name=3D"description" content=3D"Dynamic Binary Instrumentation (D=
BI) is a method of analyzing the behavior of a binary application at runtim=
e through the injection of instrumentation code - Uninformed 2007
Introduction The purpose of this post is to document my dive into the =E2=
=80=9Cworld=E2=80=9D of Dynamic Binary Instrumentation. I=E2=80=99ll cover =
some of the most well known and used DBI frameworks. That is Pin, DynamoRIO=
, and Frida. From these three I=E2=80=99ll mainly focus on Pin. There are o=
ther DBI frameworks that I won=E2=80=99t touch at all, like Valgrind, Trito=
n (uses Pin), QDBI, BAP, Dyninst, plus many others.">
    <meta name=3D"keywords" content=3D"homepage, blog, reversing, binary ex=
ploitation, kernel, hypervisor, containers">

    <meta name=3D"twitter:card" content=3D"summary">
<meta name=3D"twitter:title" content=3D"Dynamic Binary Instrumentation Prim=
er">
<meta name=3D"twitter:description" content=3D"Dynamic Binary Instrumentatio=
n (DBI) is a method of analyzing the behavior of a binary application at ru=
ntime through the injection of instrumentation code - Uninformed 2007
Introduction The purpose of this post is to document my dive into the =E2=
=80=9Cworld=E2=80=9D of Dynamic Binary Instrumentation. I=E2=80=99ll cover =
some of the most well known and used DBI frameworks. That is Pin, DynamoRIO=
, and Frida. From these three I=E2=80=99ll mainly focus on Pin. There are o=
ther DBI frameworks that I won=E2=80=99t touch at all, like Valgrind, Trito=
n (uses Pin), QDBI, BAP, Dyninst, plus many others.">

    <meta property=3D"og:title" content=3D"Dynamic Binary Instrumentation P=
rimer">
<meta property=3D"og:description" content=3D"Dynamic Binary Instrumentation=
 (DBI) is a method of analyzing the behavior of a binary application at run=
time through the injection of instrumentation code - Uninformed 2007
Introduction The purpose of this post is to document my dive into the =E2=
=80=9Cworld=E2=80=9D of Dynamic Binary Instrumentation. I=E2=80=99ll cover =
some of the most well known and used DBI frameworks. That is Pin, DynamoRIO=
, and Frida. From these three I=E2=80=99ll mainly focus on Pin. There are o=
ther DBI frameworks that I won=E2=80=99t touch at all, like Valgrind, Trito=
n (uses Pin), QDBI, BAP, Dyninst, plus many others.">
<meta property=3D"og:type" content=3D"article">
<meta property=3D"og:url" content=3D"http://deniable.org/posts/binary-instr=
umentation/">
<meta property=3D"article:published_time" content=3D"2018-07-25T14:11:32+01=
:00">
<meta property=3D"article:modified_time" content=3D"2018-07-25T14:11:32+01:=
00"><meta property=3D"og:site_name" content=3D"shut up and hack">


    <title>
  Dynamic Binary Instrumentation Primer =C2=B7 shut up and hack
</title>

   =20
      <link rel=3D"canonical" href=3D"http://deniable.org/posts/binary-inst=
rumentation/">
   =20

    <link rel=3D"preconnect" href=3D"https://fonts.gstatic.com/">
    <link href=3D"https://fonts.googleapis.com/css?family=3DLato:400,700%7C=
Merriweather:300,700%7CSource+Code+Pro:400,700&amp;display=3Dswap" rel=3D"s=
tylesheet">
    <link rel=3D"stylesheet" href=3D"https://cdn.jsdelivr.net/npm/fork-awes=
ome@1.1.7/css/fork-awesome.min.css" crossorigin=3D"anonymous">
    <link rel=3D"stylesheet" href=3D"https://cdn.jsdelivr.net/npm/normalize=
.css@8/normalize.min.css">
   =20
     =20
     =20
      <link rel=3D"stylesheet" href=3D"https://blog.deniable.org/css/coder.=
min.15d3dcd7d56ff7df8a54a0659da83058d38fb1814fa8dad387efc92034b70def.css" c=
rossorigin=3D"anonymous" media=3D"screen">
   =20

   =20

   =20
     =20
       =20
       =20
        <link rel=3D"stylesheet" href=3D"https://blog.deniable.org/css/code=
r-dark.min.126ad3988d46bdae6217a11105b53c9662bca05f39d42d3c0fb366919d334620=
.css" crossorigin=3D"anonymous" media=3D"screen">
     =20
   =20

   =20

   =20

    <link rel=3D"icon" type=3D"image/png" href=3D"https://blog.deniable.org=
/images/favicon-32x32.png" sizes=3D"32x32">
    <link rel=3D"icon" type=3D"image/png" href=3D"https://blog.deniable.org=
/images/favicon-16x16.png" sizes=3D"16x16">

    <link rel=3D"apple-touch-icon" href=3D"https://blog.deniable.org/images=
/apple-touch-icon.png">
    <link rel=3D"apple-touch-icon" sizes=3D"180x180" href=3D"https://blog.d=
eniable.org/images/apple-touch-icon.png">

   =20

    <meta name=3D"generator" content=3D"Hugo 0.74.3">
  </head>

 =20
 =20
   =20
 =20
  <body class=3D"colorscheme-dark">
   =20
<div class=3D"float-container">
    <a id=3D"dark-mode-toggle" class=3D"colorscheme-toggle">
        <i class=3D"fa fa-adjust fa-fw" aria-hidden=3D"true"></i>
    </a>
</div>


    <main class=3D"wrapper">
      <nav class=3D"navigation">
  <section class=3D"container">
    <a class=3D"navigation-title" href=3D"https://blog.deniable.org/">
      shut up and hack
    </a>
   =20
      <input type=3D"checkbox" id=3D"menu-toggle">
      <label class=3D"menu-button float-right" for=3D"menu-toggle">
        <i class=3D"fa fa-bars fa-fw" aria-hidden=3D"true"></i>
      </label>
      <ul class=3D"navigation-list">
       =20
         =20
            <li class=3D"navigation-item">
              <a class=3D"navigation-link" href=3D"https://blog.deniable.or=
g/posts/">Blog</a>
            </li>
         =20
            <li class=3D"navigation-item">
              <a class=3D"navigation-link" href=3D"https://blog.deniable.or=
g/projects">Projects</a>
            </li>
         =20
            <li class=3D"navigation-item">
              <a class=3D"navigation-link" href=3D"https://blog.deniable.or=
g/about">About</a>
            </li>
         =20
       =20
       =20
      </ul>
   =20
  </section>
</nav>


      <div class=3D"content">
       =20
  <section class=3D"container post">
    <article>
      <header>
        <div class=3D"post-title">
          <h1 class=3D"title">Dynamic Binary Instrumentation Primer</h1>
        </div>
        <div class=3D"post-meta">
          <div class=3D"date">
            <span class=3D"posted-on">
              <i class=3D"fa fa-calendar" aria-hidden=3D"true"></i>
              <time datetime=3D"2018-07-25T14:11:32+01:00">
                July 25, 2018
              </time>
            </span>
            <span class=3D"reading-time">
              <i class=3D"fa fa-clock-o" aria-hidden=3D"true"></i>
              64-minute read
            </span>
          </div>
         =20
         =20
         =20
        </div>
      </header>

      <div>
       =20
        <p><em><code>Dynamic Binary Instrumentation</code> (<code>DBI</code=
>) is a method of analyzing the behavior of a binary application at runtime=
 through the injection of instrumentation code</em> - Uninformed 2007</p>
<h2 id=3D"introduction">Introduction</h2>
<p>The purpose of this post is to document my dive into the =E2=80=9Cworld=
=E2=80=9D of <code>Dynamic Binary Instrumentation</code>. I=E2=80=99ll cove=
r some of the most well known and used <code>DBI</code> frameworks. That is=
 <a href=3D"https://software.intel.com/en-us/articles/pin-a-dynamic-binary-=
instrumentation-tool">Pin</a>, <a href=3D"http://www.dynamorio.org/">Dynamo=
RIO</a>, and <a href=3D"https://www.frida.re/">Frida</a>. From these three =
I=E2=80=99ll mainly focus on <code>Pin</code>. There are other <code>DBI</c=
ode> frameworks that I won=E2=80=99t touch at all, like <a href=3D"http://v=
algrind.org/">Valgrind</a>, <a href=3D"https://triton.quarkslab.com/">Trito=
n</a> (uses <code>Pin</code>), <a href=3D"https://qbdi.quarkslab.com/">QDBI=
</a>, <a href=3D"http://binaryanalysisplatform.github.io/">BAP</a>, <a href=
=3D"https://dyninst.org/">Dyninst</a>, plus many others. You might want to =
have a look at them. Some are more mature, some are less mature. Some have =
more features, some have fewer features. You=E2=80=99ll have to do some res=
earch yourself and see which ones fit your needs. Even though <a href=3D"ht=
tp://valgrind.org/">Valgrind</a> is one of the most widely known, and used =
<code>DBI</code> frameworks, it=E2=80=99s only available for <code>Linux</c=
ode>. So, I won=E2=80=99t touch it at all.</p>
<p>In my vulnerability hunting adventures I=E2=80=99ve been focused on <cod=
e>Windows</code>, and in fact, if you want to take the code I=E2=80=99ll pr=
esent here and build it on <code>Linux</code> it should be pretty straightf=
orward. While the opposite wouldn=E2=80=99t be true. The reason being is th=
at building <a href=3D"https://software.intel.com/en-us/articles/pin-a-dyna=
mic-binary-instrumentation-tool">Pin</a> or <a href=3D"http://www.dynamorio=
.org/">DynamoRIO</a> on <code>Windows</code> can be a bit frustrating. Espe=
cially if you aren=E2=80=99t motivated to do so.</p>
<p>I=E2=80=99m not an expert in this area (<code>DBI</code>), however since=
 the beginning of the year that I=E2=80=99ve been doing some experiments ar=
ound <code>Fuzzing</code>, and I=E2=80=99ve read a lot about the subject. H=
ence, I=E2=80=99ll try to document some of what I learned for future refere=
nce. Possibly you=E2=80=99ll also find it useful. Note that my goal was to =
write a reference and not a tutorial.</p>
<p>The funny part is that I actually thought about doing =E2=80=9Csomething=
=E2=80=9D with <a href=3D"https://software.intel.com/en-us/articles/pin-a-d=
ynamic-binary-instrumentation-tool">Pin</a>, or <a href=3D"http://www.dynam=
orio.org/">DynamoRIO</a>, while trying to do some browser <a href=3D"https:=
//en.wikipedia.org/wiki/Heap_spraying">Heap Spraying</a>. Basically, I want=
ed to monitor the memory allocations my code was producing. While I could d=
o it inside a <code>debugger</code> I thought, =E2=80=9C<em>why not use a D=
BI framework? Maybe I can learn something</em>=E2=80=9D. After all, debugge=
rs are slow. Until today, I=E2=80=99m still unsure if I prefer to use <code=
>WinDbg</code> or <code>Pin</code> for this anyway.</p>
<h3 id=3D"instrumentation">Instrumentation</h3>
<p>According to <a href=3D"https://en.wikipedia.org/wiki/Instrumentation_(c=
omputer_programming)">Wikipedia</a>, <code>instrumentation</code> <em>refer=
s to an ability to monitor or measure the level of a product=E2=80=99s perf=
ormance, to diagnose errors and to write trace information. Programmers imp=
lement instrumentation in the form of code instructions that monitor specif=
ic components in a system (=E2=80=A6). When an application contains instrum=
entation code, it can be managed using a management tool. Instrumentation i=
s necessary to review the performance of the application. Instrumentation a=
pproaches can be of two types: Source instrumentation and binary instrument=
ation.</em></p>
<p>As stated above, there are two types of instrumentation. <code>Source in=
strumentation</code>, which is not possible if you don=E2=80=99t have the s=
ource code of the software application. And <code>binary instrumentation</c=
ode>, which can be used with any software application assuming we can execu=
te it. It turns out that most of the programs you run on a <code>Windows</c=
ode> operating system are closed source. Which means, in this post, I=E2=80=
=99ll be =E2=80=9Ctalking=E2=80=9D only about <code>binary instrumentation<=
/code>. Often called <code>Dynamic Binary Instrumentation</code>, or <code>=
Dynamic Binary Modification</code>. Because words take too long, usually pe=
ople use the acronym <code>DBI</code>, as I already did above.</p>
<p>In a one-line statement, <code>Dynamic Binary Instrumentation</code> is =
a technique that involves injecting <code>instrumentation</code> code into =
a running process. The <code>instrumentation code</code> will be entirely t=
ransparent to the application that it=E2=80=99s been injected to.</p>
<p>With a <code>DBI</code> framework, we can analyze the target binary exec=
ution step by step. However, note that the analysis only applies to <strong=
>executed</strong> code.</p>
<h3 id=3D"dynamic-program-analysis">Dynamic Program Analysis</h3>
<p>There are two types of program analysis, <code>static</code>, and <code>=
dynamic</code>. We perform <code>static analysis</code> without running a c=
omputer program. While we perform <code>dynamic analysis</code> when we run=
 a computer program.</p>
<p>Citing <a href=3D"https://en.wikipedia.org/wiki/Dynamic_program_analysis=
">Wikipedia</a> again, <em>Dynamic program analysis is the analysis of comp=
uter software that is performed by executing programs on a real or virtual =
processor. For dynamic program analysis to be effective, the target program=
 must be executed with sufficient test inputs to produce interesting behavi=
or. Use of software testing measures such as code coverage helps ensure tha=
t an adequate slice of the program=E2=80=99s set of possible behaviors has =
been observed.</em></p>
<p>Dynamic binary modification tools, like the frameworks mentioned earlier=
, introduce a layer between a running program and the underlying operating =
system. Providing a unique opportunity to inspect and modify user-level pro=
gram instructions while a program executes.</p>
<p>These systems are very complex internally. However, all the complexity i=
s masked in an <code>API</code> that allows any user to quickly build a mul=
titude of tools to aid software analysis. And that=E2=80=99s what I=E2=80=
=99ll try to show in this <code>post</code>, by sharing some code I wrote w=
hile playing with some <code>DBI</code> frameworks.</p>
<p>There are many reasons for us to observe and modify the runtime behavior=
 of a computer program. Software and/or hardware developers, system enginee=
rs, bug hunters, malware analysts, end users, and so on. All of them will h=
ave their own reasons. <code>DBI</code> frameworks provide access to every =
executed user-level instruction. Besides a potentially small runtime and me=
mory overhead, the program will run identically to a native execution.</p>
<p>You can say that the main advantage of static analysis is that it ensure=
s 100% code coverage. With dynamic analysis, to ensure a high code coverage=
 we=E2=80=99ll need to run the program many times, and with different input=
s so the analysis takes different code paths. However, in some cases, the s=
oftware applications are so big that=E2=80=99s too costly to perform static=
 analysis. I would say, one complements the other. Even though static analy=
sis is very boring, and dynamic analysis is (very) fun.</p>
<p>As I mentioned before, <code>DBI</code> frameworks operate directly in b=
inaries/executables. We don=E2=80=99t need the source code of the program. =
We don=E2=80=99t need to (re)compile or (re)link the program. Obviously, th=
is is an <strong>major advantage</strong>, as it allows us to analyze propr=
ietary software.</p>
<p>A dynamic binary system operates at the same time as the =E2=80=9Cguest=
=E2=80=9D program executes while performing all the requested/required modi=
fications on the fly. This dynamic approach can also handle programs that g=
enerate code dynamically (even though it imposes a big engineering challeng=
e), that is, self-modifying code. If you =E2=80=9Cgoogle=E2=80=9D a bit you=
=E2=80=99ll actually find multiple cases where <code>DBI</code> frameworks =
are/were used to analyze malware with self-modifying code. As an example, c=
heck <a href=3D"https://www.blackhat.com/docs/eu-17/materials/eu-17-Polino-=
Hiding-Pins-Artifacts-To-Defeat-Evasive-Malware.pdf">this presentation</a> =
from last year=E2=80=99s blackhat Europe. Or, <a href=3D"http://joxeankoret=
.com/blog/2012/11/04/a-simple-pin-tool-unpacker-for-the-linux-version-of-sk=
ype/">this post</a> about how to unpack <code>Skype</code> with <code>Pin</=
code>.</p>
<p><code>DBI</code> frameworks are daily used to solve computer architectur=
e problems, being heavily used in software engineering, program analysis, a=
nd <strong>computer security</strong>. Software engineers want to deeply un=
derstand the software they develop, analyze its performance, and runtime be=
havior in a systematic manner. One common use of <code>DBI</code> framework=
s is emulating new <code>CPU</code> instructions. Since the dynamic binary =
system has access to every instruction before executing it, hardware engine=
ers can actually use these systems to test new instructions that are curren=
tly unsupported by the hardware. Instead of executing a specific instructio=
n, they can emulate the new instruction behavior. The same approach can be =
used to replace faulty instructions with the correct emulation of the desir=
ed behavior. Anyway, from a computer security perspective, a <code>DBI</cod=
e> system can be used for <code>flow analysis</code>, <code>taint analysis<=
/code>, <code>fuzzing</code>, <code>code coverage</code>, <code>test cases =
generation</code>, <code>reverse engineering</code>, <code>debugging</code>=
, <code>vulnerability detection</code>, and even crazy things like <code>pa=
tching of vulnerabilities</code>, and <code>automated exploit development</=
code>.</p>
<p>There are two main ways of using a dynamic binary system. The first, and=
 eventually most common, in computer security at least, is executing a prog=
ram from start to finish under the control of the dynamic binary system. We=
 use it when we want to achieve full system simulation/emulation because fu=
ll control and code coverage are desired. The second, we may just want to a=
ttach to an already running program (exactly in the same way a <code>debugg=
er</code> can be attached, or detached, from a running program). This optio=
n might be useful if we are interested in figuring out what a program is do=
ing in a specific moment.</p>
<p>Besides, most of the <code>DBI</code> frameworks have three modes of exe=
cution. <code>Interpretation mode</code>, <code>probe mode</code>, and <cod=
e>JIT mode</code>. The JIT (just-in-time) mode is the most common implement=
ation, and most commonly used mode even when the <code>DBI</code> system su=
pports more than one mode of execution. In JIT mode the original binary/exe=
cutable is actually never modified or executed. The binary is seen as data,=
 and a modified copy of the binary is generated in a new memory area (but o=
nly for the executed parts of the binary, not the whole binary). Is this mo=
dified copy that=E2=80=99s then executed. In interpretation mode, the binar=
y is also seen as data, and each instruction is used as a lookup table of a=
lternative instructions that have the corresponding functionality (as imple=
mented by the user). In probe mode, the binary is actually modified by over=
writing instructions with new instructions. even though this results in a l=
ow run-time overhead it=E2=80=99s very limited in certain architectures (li=
ke x86).</p>
<p>Whatever the execution mode, once we have control over the execution of =
a program, through a <code>DBI</code> framework, we then have the ability t=
o add <code>instrumentation</code> into the executing program. We can inser=
t our code, <code>instrumentation</code>, before and after <code>blocks</co=
de> of code, or even replace them completely.</p>
<p>We can visualize how it works in the diagram below.</p>
<p><img src=3D"https://blog.deniable.org/dbi/DBI_Diagram.png" alt=3D""></p>
<p>Also, there are different types of granularity.</p>
<ul>
<li>Instruction level</li>
<li>Basic block level</li>
<li>Function level</li>
</ul>
<p>The granularity choice, as you can guess, will allow you to have more, o=
r less, control over the execution of a program. Obviously, this will have =
an impact on performance. Also, note that instrumenting a program in its to=
tality is unpractical in most cases.</p>
<h3 id=3D"performance">Performance</h3>
<p>You might be thinking what=E2=80=99s the performance impact of modifying=
 a running program on the fly as described above. Well, I have a very limit=
ed experience to answer this question. However, after reading multiple pape=
rs, articles, and presentations, the overhead commonly observed depends on =
a random number of factors really. Anyway, as kind of expected, the modific=
ations the user implements are responsible for the majority of the overhead=
. The number 30% is apparently accepted as a common average number observed=
. Can=E2=80=99t really remember where I read this to mention the source, bu=
t I definitely read it somewhere. You=E2=80=99ll find it for sure in the <c=
ode>References</code> section anyway. Obviously, one of the first decisions=
 that you, as a <code>DBI</code> user, will have to make is to decide the a=
mount of <a href=3D"https://en.wikipedia.org/wiki/Code_coverage">code cover=
age</a> required by your needs and the amount of performance overhead you=
=E2=80=99ll be able to accept as reasonable.</p>
<h2 id=3D"pin">Pin</h2>
<p><a href=3D"https://software.intel.com/en-us/articles/pin-a-dynamic-binar=
y-instrumentation-tool">Pin</a> is a <code>DBI</code> framework developed b=
y <a href=3D"https://www.intel.com/">Intel Corp</a>. It allows us to build =
program analysis tools known as <code>Pintools</code>, for <code>Windows</c=
ode>, <code>Linux</code>, and <code>OSX</code>. We can use these tools to m=
onitor, modify, and record the behavior of a program while it is running.</=
p>
<p><code>Pin</code> is proprietary software. However, we can download and u=
se it free of charge for <strong>non-commercial use</strong>. Besides the d=
ocumentation and the binaries, <code>Pin</code> also includes source code f=
or a large collection of sample <code>Pintools</code>. These are invaluable=
 examples that we must consider, and definitely read, before developing any=
 <code>Pintool</code>.</p>
<p>In my opinion, <code>Pin</code> is the easiest <code>DBI</code> framewor=
k to use. At least I felt it was easier to dive into it=E2=80=99s <code>API=
</code> than into the <code>DynamoRIO</code> one. Even though I didn=E2=80=
=99t spend too much time trying to learn other <code>APIs</code> besides th=
ese two, I had a look at a few others. Like <a href=3D"http://valgrind.org/=
">Valgrind</a>, <a href=3D"https://triton.quarkslab.com/">Triton</a>, <a hr=
ef=3D"https://dyninst.org/">Dyninst</a>, and <a href=3D"https://www.frida.r=
e/">Frida</a>. The choice will always depend on what you intend to do, hone=
stly.</p>
<p>If you want to create a commercial tool and distribute binary versions o=
f it, <code>Pin</code> won=E2=80=99t be a good choice. If that=E2=80=99s no=
t the case, <code>Pin</code> might be a very good choice. Mainly because ba=
sed on the tests I did, <code>Pin</code> is stable and reliable. I had some=
 issues running some programs under some <code>DBI</code> frameworks. Mainl=
y big programs, like <code>Office</code> suites, games, and AV engines. Som=
e <code>DBI</code> frameworks were failing miserably, some even with small =
applications.</p>
<h4 id=3D"pin-setup-windows">Pin setup (Windows)</h4>
<p><code>Pin</code> setup in <code>Linux</code> is quite straightforward. H=
owever, on <code>Windows</code> systems, it can be a bit tricky. See below =
how to quickly set it up to get started in case you want to try the samples=
 I=E2=80=99ll present in this post.</p>
<p>Get the latest <code>Pin</code> version from <a href=3D"https://software=
.intel.com/en-us/articles/pin-a-binary-instrumentation-tool-downloads">here=
</a>, and unpack it on your <code>C:\</code> drive, or wherever you want. F=
or simplicity, I usually use <code>C:\pin</code>. I advise you to do the sa=
me if you plan to follow some of the experiments presented in this post.</p=
>
<p>The <code>Pin</code> zip file includes a big collection of sample <code>=
Pintools</code> under <strong>source/tools</strong>. The <code>API</code> i=
s very easy to read and understand as we=E2=80=99ll see. By the end of this=
 post you should be able to read the source code of most of the samples wit=
hout any struggle (well, kind of).</p>
<p>I like <code>Visual Studio</code>, and I=E2=80=99ll be using it to build=
 =E2=80=9Cevery=E2=80=9D tool mentioned in this post. There=E2=80=99s one <=
code>Pintool</code> sample that=E2=80=99s almost ready to be built with <co=
de>Visual Studio</code>. You=E2=80=99ll have to adjust only a couple of set=
tings. However, I didn=E2=80=99t want to manually copy and rename files eve=
ry time I wanted to create a new <code>Pintool</code> project. So I created=
 a sample project already tweaked, available <a href=3D"https://github.com/=
houseofxyz/DBI/tree/master/MyPinTool">here</a> that you can place under <co=
de>C:\pin\source\tools</code>, together with the following <a href=3D"https=
://github.com/houseofxyz/DBI/tree/master/create_pintool_project.py">python =
script</a>. The script was inspired by Peter=E2=80=99s <a href=3D"https://g=
ithub.com/corelan/pin/blob/master/win32/createpintool.py">script</a>. Howev=
er, since the way newer versions of <code>Visual Studio</code> save the set=
tings has changed I had to re-write/create a completely new script.</p>
<p>So, every time you want to build a new <code>Pintool</code> with <code>V=
isual Studio</code>, just do:</p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-fallback"=
 data-lang=3D"fallback">cd\
cd pin
python create_pintool_project.py -p &lt;name_of_your_project&gt;
</code></pre></div><p>You can then just click the project=E2=80=99s solutio=
n file and build your <code>Pintool</code> with <code>Visual Studio</code> =
without any pain. I used <code>Visual Studio Professional 2015</code>, but =
it will also work with <code>Visual Studio 2017</code>. I did a couple of b=
uilds with <code>Visual Studio 2017 Enterprise</code> without any issue.</p=
>
<h5 id=3D"pin-visual-studio-integration">Pin Visual Studio integration</h5>
<p>We can add our <code>Pintools</code> as external tools to <code>Visual S=
tudio</code>. This will allow us to run, and test, our <code>Pintool</code>=
 without using the command line all the time. The configuration is very sim=
ple. From the <code>Tools</code> menu, select <code>External tools</code> a=
nd a dialog box will appear. Click the <code>Add</code> button and fill out=
 the text input boxes according to the image below.</p>
<p><img src=3D"https://blog.deniable.org/dbi/Visual.Studio.Tools.setup.png"=
 alt=3D""></p>
<p>In the <code>Title</code>, input text box enter whatever you want. In th=
e <code>Command</code> input text box enter the full path to your <code>pin=
.exe</code>, so <code>c:\pin\pin.exe</code> in case you installed it under =
<code>c:\pin</code>. In the <code>Arguments</code>, you must include all th=
e arguments you want to pass to your Pintool. You=E2=80=99ll need at least =
the ones specified in the image above. The <code>-t</code> is to specify wh=
ere your Pintool is, and after the <code>--</code> is the target program yo=
u want to instrument.</p>
<p>After the setup, you can simply run your Pintool from the <code>Tools</c=
ode> menu as shown in the image below.</p>
<p><img src=3D"https://blog.deniable.org/dbi/Visual.Studio.Pintool.png" alt=
=3D""></p>
<p>Click ok, and enjoy.</p>
<p><img src=3D"https://blog.deniable.org/dbi/Visual.Studio.Tools.run.png" a=
lt=3D""></p>
<p>The <code>Output</code> window of <code>Visual Studio</code> will show w=
hatever the output your <code>Pintool</code> is writing to <code>stdout</co=
de>.</p>
<h2 id=3D"dynamorio">DynamoRIO</h2>
<p><a href=3D"http://dynamorio.org/">DynamoRIO</a> is another <code>DBI</co=
de> framework originally developed in a collaboration between <a href=3D"ht=
tps://www.hp.com/">HP</a>=E2=80=99s Dynamo optimization system and the Runt=
ime Introspection and Optimization (RIO) research group at <a href=3D"http:=
//web.mit.edu/">MIT</a>. It allows us to build program analysis tools known=
 as <code>clients</code>, for <code>Windows</code>, and <code>Linux</code>.=
 We can use these tools to monitor, modify, and record the behavior of a pr=
ogram while it is running.</p>
<p><code>DynamoRIO</code> was first released as a proprietary binary toolki=
t in 2002 and was later open-sourced with a <a href=3D"https://en.wikipedia=
.org/wiki/BSD_licenses">BSD</a> license in 2009. Like <code>Pin</code>, it =
also comes with source code for multiple <code>client</code> samples. These=
 are invaluable examples to get us started and playing with its <code>API</=
code>.</p>
<p><code>DynamoRIO</code> is a runtime code manipulation system which allow=
s code transformation on any part of the program as the program runs. It wo=
rks as an intermediate platform between applications and operating system.<=
/p>
<p>As I said before, I didn=E2=80=99t find <code>DynamoRIO</code>'s <code>A=
PI</code> the most friendly and easy to use. However, if you plan to make a=
 commercial version, and/or distribute binary versions, <code>DynamoRIO</co=
de> might be the best option. One of its advantages is the fact that it is =
<code>BSD</code> licensed, which means <code>free software</code>. If that=
=E2=80=99s important for you, go with <code>DynamoRIO</code>.</p>
<p>Also note that=E2=80=99s commonly accepted that <code>DynamoRIO</code> i=
s faster than <code>Pin</code>, check the <code>References</code> section. =
However, is equally accepted that <code>Pin</code> is more reliable than <c=
ode>DynamoRIO</code>, which I also personally experienced when running big =
software programs.</p>
<h4 id=3D"dynamorio-setup-windows">DynamoRIO setup (Windows)</h4>
<p>To install <code>DynamoRIO</code> on <code>Windows</code> simply downloa=
d the latest <code>Windows</code> version from <a href=3D"https://github.co=
m/DynamoRIO/dynamorio/wiki/Downloads">here</a> (DynamoRIO-Windows-7.0.0-RC1=
.zip at the time of this writing), and similarly to what we did with <code>=
Pin</code> just unzip it under <code>C:\dynamorio</code>.</p>
<p>To build your own <code>DynamoRIO</code> projects on Windows it can be a=
 bit tricky though. You can try to follow the instructions <a href=3D"https=
://github.com/DynamoRIO/dynamorio/wiki/How-To-Build">here</a> or the instru=
ctions <a href=3D"http://dynamorio.org/docs/using.html#sec_build">here</a> =
or, to avoid frustration, just=E2=80=A6 use my <code>DynamoRIO</code> <code=
>Visual Studio</code> template project.</p>
<p>As I said before, I like <code>Visual Studio</code>. I created a sample =
project already tweaked with all the <code>includes</code> and <code>libs</=
code> required (assuming you unzipped <code>DynamoRIO</code> in the directo=
ry I mentioned before), available <a href=3D"https://github.com/houseofxyz/=
DBI/tree/master/MyDynamoRIO">here</a>. Then, more or less the same way we d=
id with <code>Pin</code>, also download the following <a href=3D"https://gi=
thub.com/houseofxyz/DBI/tree/master/create_dynamorio_project.py">python scr=
ipt</a>. Since the file structure of the project is a bit different I could=
n=E2=80=99t use the <code>script</code> I wrote before to clone a project, =
and I had to create a new one specific to <code>DynamoRIO</code>.</p>
<p>So, every time you want to build a new <code>DynamoRIO</code> client wit=
h <code>Visual Studio</code>, just do:</p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-fallback"=
 data-lang=3D"fallback">python create_dynamorio_project.py -p &lt;name_of_y=
our_project&gt;
</code></pre></div><p>The command above assumes that both the <code>Python<=
/code> script and the template project mentioned above are in the same fold=
er.</p>
<p>You can then just click the project=E2=80=99s solution file and build yo=
ur <code>DynamoRIO client</code> with <code>Visual Studio</code> without an=
y pain. I used <code>Visual Studio Professional 2015</code>, but it will al=
so work with <code>Visual Studio 2017</code>. I did a couple of builds with=
 <code>Visual Studio 2017 Enterprise</code> without any issue.</p>
<h5 id=3D"dynamorio-visual-studio-integration">DynamoRIO Visual Studio inte=
gration</h5>
<p>We can also integrate <code>DynamoRIO</code> with <code>Visual Studio</c=
ode>, exactly the same way we did with <code>Pin</code>. Since the setup pr=
ocess is exactly the same, I=E2=80=99ll only leave here the screenshot belo=
w and you can figure how to do the rest.</p>
<p><img src=3D"https://blog.deniable.org/dbi/Visual.Studio.Tools.dynamorio.=
setup.png" alt=3D""></p>
<h2 id=3D"frida">Frida</h2>
<p><a href=3D"https://www.frida.re/">Frida</a> is a <code>DBI</code> framew=
ork developed mainly by <a href=3D"https://twitter.com/oleavr">Ole</a>. It =
became very popular among the =E2=80=9Cmobile=E2=80=9D community and gained=
 a considerable group of contributors (now sponsored by <a href=3D"https://=
www.nowsecure.com/">NowSecure</a>). <code>Frida</code> supports <code>OSX</=
code>, <code>Windows</code>, <code>Linux</code>, and <code>QNX</code>, and =
has an <code>API</code> available for multiple languages, like <code>Python=
</code>, <code>C#</code>, <code>Swift</code>, <code>Qt\QML</code> and <code=
>C</code>. Just like the <code>DBI</code> frameworks mentioned above, we ca=
n use <code>Frida</code> together with <code>scripts</code> to monitor, mod=
ify, and record the behavior of a program while it is running.</p>
<p><code>Frida</code> is free (free as in free beer) and is very easy to in=
stall (see below). There are also many usage <a href=3D"https://www.frida.r=
e/docs/home/">examples online</a> that we can use to get started. <code>Fri=
da</code> injects Google=E2=80=99s <a href=3D"https://en.wikipedia.org/wiki=
/Chrome_V8">V8 engine</a> into a process. Then, <code>Frida</code> core com=
municates with <code>Frida</code>'s agent (process side) and uses the <code=
>V8</code> engine to run the <code>JavaScript</code> code (creating dynamic=
 hooks).</p>
<p><code>Frida</code>'s <code>API</code> has two main parts. The <code>Java=
Script</code> <code>API</code> and the <code>bindings API</code>. I didn=E2=
=80=99t dive too deep into them and just used the most popular I believe. T=
hat is the <code>JavaScript</code> <code>API</code>. I found it easy to use=
, very flexible, and I could use it to <strong>quickly</strong> write some =
introspection tools.</p>
<p>Even though <code>Pin</code> and <code>DynamoRIO</code> are the =E2=80=
=9Cmain=E2=80=9D <code>DBI</code> frameworks, and most mature, <code>Frida<=
/code> has some advantages. As mentioned above, it has bindings for other/m=
ore languages, and rapid tool development is a reality. It also has some di=
sadvantages, less maturity, less documentation, less granularity than other=
 frameworks, and consequently lack of some functionalities.</p>
<h4 id=3D"frida-setup-windows">Frida setup (Windows)</h4>
<p><code>Frida</code>'s setup is very easy. Just download <code>https://boo=
tstrap.pypa.io/get-pip.py</code> and then run:</p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-fallback"=
 data-lang=3D"fallback">python get-pip.py
</code></pre></div><p>And, to actually install <code>Frida</code> type the =
following.</p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-fallback"=
 data-lang=3D"fallback">cd\
cd Python27\Scripts
pip.exe install frida
</code></pre></div><p>And that=E2=80=99s it, you are ready to go. Yes, you =
have to install <code>Python</code> before the steps above. However, I don=
=E2=80=99t know anyone that doesn=E2=80=99t have <code>Python</code> instal=
led so I just assume it=E2=80=99s already there.</p>
<h2 id=3D"generic-dbi-usage">Generic DBI usage</h2>
<p>Before diving into some code, I=E2=80=99ll try to document in this secti=
on generic ways of using some of the <code>DBI</code> frameworks I mentione=
d before. More precisely <a href=3D"https://software.intel.com/en-us/articl=
es/pin-a-dynamic-binary-instrumentation-tool">Pin</a>, and <a href=3D"http:=
//www.dynamorio.org/">DynamoRIO</a>.</p>
<p>As mentioned before, the most common execution mode in a <code>DBI</code=
> system is the JIT (just-in-time-compiler). The JIT compiler will create a=
 modified copy of chunks of instructions just before executing them, and th=
ese will be cached in memory. This mode of execution is the default in most=
 of the <code>DBI</code> frameworks I had a look and is also generally acce=
pted as the most robust execution model.</p>
<p>Also, as mentioned before, there are two main methods to control the exe=
cution of a program. The first is to run the entire program under the contr=
ol of the <code>DBI</code> framework. The second is to attach to a program =
already running. Just like a debugger.</p>
<p>Below is the standard way to run a program under the control of a <code>=
DBI</code> system. Our target/guest application is not directly launched fr=
om the command line. Instead, it is passed as an argument to the <code>DBI<=
/code> system. The <code>DBI</code> system initializes itself, and then lau=
nches the program under its control and modifies the program according to t=
he plug-in. The plug-in contains the actual user-defined code, that is our =
<code>instrumentation</code> code. The plug-in on <code>Pin</code> it=E2=80=
=99s called <code>Pintool</code>, on <code>DynamoRIO</code> it=E2=80=99s ca=
lled <code>client</code>, on <code>Frida</code> I believe it=E2=80=99s simp=
ly called <code>script</code>?</p>
<p><code>PIN</code> JIT mode.</p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-fallback"=
 data-lang=3D"fallback">pin.exe &lt;pin args&gt; -t &lt;pintool&gt;.dll &lt=
;pintool args&gt; -- target_program.exe &lt;target_program args&gt;
</code></pre></div><p><code>PIN</code> Probe mode.</p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-fallback"=
 data-lang=3D"fallback">pin.exe -probe &lt;pin args&gt; -t &lt;pintool&gt;.=
dll &lt;pintool args&gt; -- target_program.exe &lt;target_program args&gt;
</code></pre></div><p><code>DynamoRIO</code> JIT mode.</p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-fallback"=
 data-lang=3D"fallback">drrun.exe -client &lt;dynamorio client&gt;.dll 0 ""=
 target_program.exe &lt;target_program args&gt;
</code></pre></div><p><code>DynamoRIO</code> Probe mode.</p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-fallback"=
 data-lang=3D"fallback">drrun.exe -mode probe -client &lt;dynamorio client&=
gt;.dll 0 "" target_program.exe &lt;target_program args&gt;
</code></pre></div><p>As we can see above, the way we launch <a href=3D"htt=
ps://software.intel.com/en-us/articles/pin-a-dynamic-binary-instrumentation=
-tool">Pin</a> and <a href=3D"http://www.dynamorio.org/">DynamoRIO</a> it i=
s not that different. In <code>Linux</code> systems, it=E2=80=99s pretty mu=
ch the same (yes, remove the <code>.exe</code>, and substitute the <code>.d=
ll</code> by <code>.so</code> and that=E2=80=99s it).</p>
<p>Obviously, there are many other options that can be passed on the comman=
d line besides the ones shown above. For a full list check the help/man pag=
es. Above are just the <strong>required</strong> options for reference.</p>
<p><a href=3D"https://www.frida.re/">Frida</a> is a bit different, and we=
=E2=80=99ll see ahead how to use it.</p>
<p>If you want to attach to a running process, you can do it with <code>Pin=
</code>. However, as of today, attaching to a process with <code>DynamoRIO<=
/code> <a href=3D"https://groups.google.com/forum/#!searchin/dynamorio-user=
s/attach/dynamorio-users/4N1wX2Vzt-I/xtVcyCt5O7UJ">is not supported</a>. Ho=
wever, there are two methods of running a process under <code>DynamoRIO</co=
de> in <code>Windows</code>. You can read more about it <a href=3D"http://d=
ynamorio.org/docs/page_deploy.html#win_deploy">here</a>.</p>
<p>With <code>Pin</code> you can simply attach to a process by using the <c=
ode>-pid</code> argument as shown below.</p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-fallback"=
 data-lang=3D"fallback">pin.exe -pid &lt;target pid&gt; &lt;other pin args&=
gt; -t &lt;pintool&gt;.dll &lt;pintool args&gt;
</code></pre></div><h3 id=3D"user-defined-modifications">User defined modif=
ications</h3>
<p>Despite the <code>DBI</code> we are using, each <code>DBI</code> framewo=
rk provides an <code>API</code> that we can use to specify how we modify th=
e target/guest program. The abstraction introduced by the <code>API</code> =
is used together with code usually written in <code>C</code>, or <code>C++<=
/code> (or even <code>JavaScript</code>, or <code>Swift</code> in the case =
of <code>Frida</code>) to create a plug-in (in the form of a shared library=
 as we saw above) which will then be =E2=80=9Cinjected=E2=80=9D in the runn=
ing target/guest program by the <code>DBI</code> system. It will run on the=
 <strong>same address space</strong> of the target/guest program.</p>
<p>This means that in order for us to use a <code>DBI</code> system, we nee=
d not only to know how to launch a target/guest program, as illustrated abo=
ve but also be familiar and understand the <code>API</code> exported by the=
 framework we want to use.</p>
<p>Unfortunately, the <code>APIs</code> of these multiple frameworks are ve=
ry different. However, as will see the general concepts apply to most of th=
em. As I mentioned before, I=E2=80=99ll be focusing mainly in <code>Pin</co=
de>. I=E2=80=99ll also try to recreate more or less the same functionality =
with <code>DynamoRIO</code> and <code>Frida</code>, so we will also get a b=
it familiar with their <code>API</code> somehow. Note that the <code>API</c=
ode> coverage won=E2=80=99t be by any means extensive. I advise you to chec=
k each <code>DBI</code> framework <code>API</code> documentation if you wan=
t to know more. By following this post you=E2=80=99ll simply get a sense of=
 what=E2=80=99s available in the <code>API</code>, eventually limited to th=
e use case scenario I chose.</p>
<p>The idea behind any <code>API</code> is to hide the complexity of certai=
n operations from the user, without removing any power to perform any task =
(including complex tasks). We can usually say that the easier is to use the=
 <code>API</code> the better it is.</p>
<p>All the <code>APIs</code> allow us to, in a certain way, iterate over th=
e instructions the <code>DBI</code> system is about to run. This allows us =
to <strong>add</strong>, <strong>remove</strong>, <strong>modify</strong>, =
or <strong>observe</strong> the instructions <strong>prior</strong> to exec=
ute them. For example, my initial idea was to simply log (observe) all the =
calls to memory related functions (<code>malloc</code>, and <code>free</cod=
e>).</p>
<p>We can, not only introduce instructions to get profiling/tracing informa=
tion about a program but also introduce complex changes to the point of com=
pletely replace certain instructions with a completely new implementation. =
Think for example, as replacing all the <code>malloc</code> calls with your=
 own <code>malloc</code> implementation (that, for example, introduces shad=
ow bytes and so on).</p>
<p>In <code>DynamoRIO</code> it=E2=80=99s slightly different. However, in <=
code>Pin</code> most of the <code>API</code> routines are call based. This =
makes the <code>API</code> very user-friendly. At least to the way I think =
when I visualize the usage of a <code>DBI</code> system. This is also possi=
ble with <code>DynamoRIO</code>, obviously, as we will see. Basically, we r=
egister a <code>callback</code> to be <code>notified</code> when certain ev=
ents occur (a call to <code>malloc</code>). For performance reasons, <code>=
Pin</code> inlines these <code>callbacks</code>.</p>
<p>As we saw, most of the <code>DBI</code> frameworks support multiple oper=
ating systems, and platforms. Most of the time, the <code>APIs</code> are t=
he same and all the differences between operating systems are kept away fro=
m the user and handled =E2=80=9Cunder the table=E2=80=9D. However, there ar=
e still certain <code>APIs</code> that are specific to certain operating sy=
stems. You need to be aware of that.</p>
<p>It=E2=80=99s also important to distinguish between <code>instrumentation=
</code> and <code>analysis</code> code. <code>Instrumentation</code> code i=
s applied to specific code locations, while <code>analysis</code> code is a=
pplied to events that occur at some point in the execution of the program. =
As stated on <a href=3D"https://en.wikipedia.org/wiki/Pin_(computer_program=
)">Wikipedia</a> <em>Instrumentation routines are called when code that has=
 not yet been recompiled is about to be run, and enable the insertion of an=
alysis routines. Analysis routines are called when the code associated with=
 them is run.</em> In other words, <code>instrumentation</code> routines de=
fine <strong>where</strong> to insert instrumentation. <code>Analysis</code=
> routines define <strong>what</strong> to do when the instrumentation is a=
ctivated.</p>
<p>The <code>APIs</code> of <code>Pin</code>, <code>DynamoRIO</code>, and <=
code>Frida</code> allow us to iterate over the target/guest program with a =
distinct level of granularities. That is, iterate over every single instruc=
tion, just before an instruction execute, entire basic blocks, traces (mult=
iple basic blocks), or the entire target/guest program (image).</p>
<h2 id=3D"example-tool">Example tool</h2>
<p>As I mentioned, while I was playing with <code>Heap Spraying</code> I fe=
lt the need of logging all the memory allocations my code was performing. S=
ince I felt a bit annoyed after doing this repeatedly with <code>WinDbg</co=
de>, even with some automation,  I thought about doing it with a <code>DBI<=
/code> framework. More precisely, with <code>Pin</code>.</p>
<p>I remember that during one of <a href=3D"https://twitter.com/corelanc0d3=
r">Peter Van Eeckhoutte</a>=E2=80=99s exploitation classes he mentioned he =
had written something similar. I looked at his <a href=3D"https://github.co=
m/corelan">GitHub</a> and found his <a href=3D"https://github.com/corelan/p=
in">Pintool</a>. I had a look at his code, but since he used <code>Visual S=
tudio 2012</code>, plus an old version of <code>Pin</code>, plus a differen=
t approach of what I had in mind, plus a different goal (I had in mind doin=
g something else besides logging memory allocations), and things changed a =
bit since then=E2=80=A6 I decided to write my own <code>Pintool</code> inst=
ead of using, or modifying, his code. After all, it=E2=80=99s all about str=
uggling and learning. Not running tools. Later I realized that most of his =
code comes from the <code>Pin</code> documentation, so does mine.</p>
<p>The goal was to write a <code>Pintool</code>, or a <code>DynamoRIO clien=
t</code>, and use it to detect critical memory issues. Such as memory leaks=
 and double frees. Yes, in <code>C/C++</code> programs. You may say that th=
ere are plenty of tools that already allow you to do that, and that=E2=80=
=99s eventually true (in fact <code>DynamoRIO</code> comes with a couple of=
 tools that can help here). The point here was to learn how to write my own=
 tool, have fun, get familiar with <code>DBI</code> frameworks, and documen=
t my experiments for later reference. Eventually, it will also be used as a=
 soft introduction to <code>Dynamic Binary Analysis</code> by people who do=
n=E2=80=99t know where to start.</p>
<p>So, the =E2=80=9Ccritical memory issues=E2=80=9D I had in mind weren=E2=
=80=99t really that difficult to <code>trace</code>. After looking at some =
almost ready to go code samples, I found in the <code>Pin</code>'s document=
ation, I ended up expanding a bit the initial logging goal I had in mind. A=
nd added a couple of =E2=80=9Cfeatures=E2=80=9D to aid my vulnerability dis=
cover capabilities.</p>
<p>As you know, some common memory (de)allocation problems in <code>C/C++</=
code> programs are:</p>
<ul>
<li><a href=3D"https://en.wikipedia.org/wiki/Memory_leak">Memory leaks</a><=
/li>
<li><a href=3D"https://en.wikipedia.org/wiki/C_dynamic_memory_allocation">D=
ouble frees</a></li>
<li><a href=3D"https://en.wikipedia.org/wiki/C_dynamic_memory_allocation">I=
nvalid frees</a></li>
<li><a href=3D"https://en.wikipedia.org/wiki/Dangling_pointer">Use after fr=
ees</a> (Note, the code presented in this post doesn=E2=80=99t detect poten=
tial <code>user after free</code> issues. An improved version of this code =
does, available <a href=3D"https://github.com/houseofxyz/WinMallocTracer">h=
ere</a>).</li>
</ul>
<p>I assume everyone knows what the problems listed above are. If you don=
=E2=80=99t, or you need a =E2=80=98refresh=E2=80=99, just click the links a=
bove.</p>
<p>At least the first 3 problems are very =E2=80=9Ceasy=E2=80=9D to detect =
with a <code>Pintool</code>, or a <code>DynamoRIO client</code>. I=E2=80=99=
ll do a couple of assumptions. The target program is a single binary/execut=
able file, and the only functions that I=E2=80=99ll track to allocate and f=
ree memory are <code>malloc</code> and <code>free</code> (<code>calloc</cod=
e>, and <code>realloc</code> are just =E2=80=9Cspecial=E2=80=9D versions of=
 <code>malloc</code> anyway). Internally <code>new</code> and <code>delete<=
/code> use <code>malloc</code> and <code>free</code>, so we are covered. I =
can simply =E2=80=9Cmonitor=E2=80=9D these calls. I won=E2=80=99t consider =
other functions like <code>realloc</code>, <code>calloc</code>, <code>HeapA=
lloc</code>, <code>HeapFree</code>, etc. (for now). Yes, for now, I=E2=80=
=99ll focus only on the generic <a href=3D"https://msdn.microsoft.com/en-us=
/library/6ewkz86d.aspx">malloc</a> and <a href=3D"https://msdn.microsoft.co=
m/en-us/library/we1whae7.aspx">free</a> functions from the C Run-Time Libra=
ry. In Windows, these functions when called will then call <a href=3D"https=
://docs.microsoft.com/en-us/windows/desktop/api/HeapApi/nf-heapapi-heapallo=
c">HeapAlloc</a> and <a href=3D"https://docs.microsoft.com/en-us/windows/de=
sktop/api/HeapApi/nf-heapapi-heapfree">HeapFree</a>.</p>
<p>Here=E2=80=99s a diagram showing the relationship of <code>Windows API</=
code> calls used to allocate process memory (from the book <a href=3D"https=
://www.amazon.co.uk/Art-Memory-Forensics-Detecting-Malware/dp/1118825098">T=
he Art of Memory Forensics</a>, and used with authorization. Thanks to <a h=
ref=3D"https://twitter.com/attrc">Andrew Case</a>).</p>
<p><img src=3D"https://blog.deniable.org/dbi/memory.allocation.windows.png"=
 alt=3D""></p>
<p>As we can see above, ideally we should actually be =E2=80=9Cmonitoring=
=E2=80=9D <code>RtlAllocateHeap</code> and <code>RtlFreeHeap</code>. Howeve=
r, we can ignore this for now. This way, if you just want to try this code =
in <code>Linux</code>, or <code>OSX</code>, its mostly copy and paste. Late=
r, in the main version of this tool, I=E2=80=99ll indeed be only working wi=
th the Windows <a href=3D"https://docs.microsoft.com/en-us/windows/desktop/=
Memory/heap-functions">Heap functions</a> or my <code>Pintool</code> won=E2=
=80=99t work with <code>Internet Explorer</code>, for example.</p>
<p>Whenever a program calls <code>malloc</code>, I=E2=80=99ll log the retur=
n address (that is, the address of the allocated memory region). Whenever a=
 program calls <code>free</code>, I=E2=80=99ll match its address being free=
d with the addresses I saved before. If it has been allocated and not freed=
, I=E2=80=99ll mark it as free. If it has been allocated and already freed,=
 then we have a double free. If I don=E2=80=99t have that address saved has=
 been allocated before, then we have a free of unallocated memory. Simple, =
huh? Finally, when the program exits, I can look at my records to detect me=
mory addresses that have been allocated but not freed. This way I can also =
detect memory leaks.</p>
<p>As we=E2=80=99ll see, using a dynamic binary framework to achieve what=
=E2=80=99s described above can be done with very little effort. However, th=
ere are some issues that we=E2=80=99ll ignore to keep this post simple. As =
you can eventually guess, the <code>Heap Manager</code> also plays a role h=
ere, and our tool might have to be <code>Heap Manager</code> specific if we=
 don=E2=80=99t want to be flooded with false positives. Also, as mentioned =
before, this tool will tell us there=E2=80=99s a bug, but not exactly where=
. You can tell your tool to <code>break/pause</code> when an issue is found=
 and attach a <code>debugger</code>. However, depending on the class of <co=
de>bug</code> it may still be very hard to find where=E2=80=99s the <code>b=
ug</code> and reproduce it.</p>
<p>While I was writing this blog post, a very interesting tool from <a href=
=3D"http://www.joxeankoret.com/">Joxean Koret</a> called <a href=3D"https:/=
/github.com/joxeankoret/membugtool">membugtool</a> was released during the =
<a href=3D"http://securitycongress.euskalhack.org/">EuskalHack 2018 confere=
nce</a>. His tool does a bit more than mine (well, actually considerable mo=
re), and the code is certainly better than mine. Keep following this post i=
f you want to learn more about <code>Pin</code> and other <code>DBI</code> =
frameworks, but don=E2=80=99t forget to check his tool later. I was actuall=
y very happy when I saw it released because it means my idea wasn=E2=80=99t=
 a complete nonsense. On top of that Joxean Koret is a respected researcher=
 that I=E2=80=99ve been following for quite a long time, mainly due to his =
awesome work on breaking Antivirus engines.</p>
<h2 id=3D"targetguest-program-exercisepinexe">Target/Guest program (Exercis=
ePin.exe)</h2>
<p>To test our multiple dynamic binary analysis tools, I wrote the followin=
g non-sense program (I called it <code>ExercisePin.exe</code>). It=E2=80=99=
s quite clear that there are some memory leaks, an invalid free, and a pote=
ntial double-free (depending on our input).</p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-cpp" data=
-lang=3D"cpp"><span style=3D"color:#0f0;font-weight:bold">#include</span> <=
span style=3D"color:#0f0;font-weight:bold">&lt;stdio.h&gt;</span><span styl=
e=3D"color:#0f0;font-weight:bold">
</span><span style=3D"color:#0f0;font-weight:bold">#include</span> <span st=
yle=3D"color:#0f0;font-weight:bold">&lt;stdlib.h&gt;</span><span style=3D"c=
olor:#0f0;font-weight:bold">
</span><span style=3D"color:#0f0;font-weight:bold"></span>
<span style=3D"color:#fff;font-weight:bold">void</span> do_nothing() {
  <span style=3D"color:#fff;font-weight:bold">int</span> *xyz =3D (<span st=
yle=3D"color:#fff;font-weight:bold">int</span>*)malloc(<span style=3D"color=
:#ff0;font-weight:bold">2</span>);
}

<span style=3D"color:#fff;font-weight:bold">int</span> main(<span style=3D"=
color:#fff;font-weight:bold">int</span> argc, <span style=3D"color:#fff;fon=
t-weight:bold">char</span>* argv[]) {
  free(<span style=3D"color:#fff;font-weight:bold">NULL</span>);

  do_nothing();

  <span style=3D"color:#fff;font-weight:bold">char</span> *A =3D (<span sty=
le=3D"color:#fff;font-weight:bold">char</span>*)malloc(<span style=3D"color=
:#ff0;font-weight:bold">128</span> * <span style=3D"color:#fff;font-weight:=
bold">sizeof</span>(<span style=3D"color:#fff;font-weight:bold">char</span>=
));
  <span style=3D"color:#fff;font-weight:bold">char</span> *B =3D (<span sty=
le=3D"color:#fff;font-weight:bold">char</span>*)malloc(<span style=3D"color=
:#ff0;font-weight:bold">128</span> * <span style=3D"color:#fff;font-weight:=
bold">sizeof</span>(<span style=3D"color:#fff;font-weight:bold">char</span>=
));
  <span style=3D"color:#fff;font-weight:bold">char</span> *C =3D (<span sty=
le=3D"color:#fff;font-weight:bold">char</span>*)malloc(<span style=3D"color=
:#ff0;font-weight:bold">128</span> * <span style=3D"color:#fff;font-weight:=
bold">sizeof</span>(<span style=3D"color:#fff;font-weight:bold">char</span>=
));

  free(A);
  free(C);

  <span style=3D"color:#fff;font-weight:bold">if</span> (argc !=3D <span st=
yle=3D"color:#ff0;font-weight:bold">2</span>)
    do_nothing();
  <span style=3D"color:#fff;font-weight:bold">else</span>
    free(C);

  puts(<span style=3D"color:#0ff;font-weight:bold">"done"</span>);
  <span style=3D"color:#fff;font-weight:bold">return</span> <span style=3D"=
color:#ff0;font-weight:bold">0</span>;
}
</code></pre></div><p>As you can see it=E2=80=99s a very stupid program, I =
recommend you to test your tools with real software and see how they behave=
. Also, check the previously mentioned project <a href=3D"https://github.co=
m/joxeankoret/membugtool">membugtool</a> since it includes a very nice <a h=
ref=3D"https://github.com/joxeankoret/membugtool/tree/master/tests">set of =
tests</a> which actually made me lazy and I didn=E2=80=99t even try to impr=
ove the code above and create new sample buggy programs. Depending on which=
 compiler you use to build this sample, you might have different results. I=
 built mine with <code>Visual Studio</code>. It has advantages, and disadva=
ntages. If you prefer you can use <a href=3D"https://sourceforge.net/projec=
ts/orwelldevcpp/">Dev-C++</a> (which uses <a href=3D"https://gcc.gnu.org/">=
GCC</a>), or <a href=3D"http://www.cygwin.com/">cygwin</a> (and install <co=
de>gcc</code> or <code>i686-w64-mingw32-gcc.exe</code>), or even <a href=3D=
"https://www.embarcadero.com/free-tools/ccompiler">Embarcadero</a>. Anyway,=
 expect different results depending on the compiler you choose to build the=
 target program.</p>
<h2 id=3D"basic-pintool-malloctracer">Basic Pintool (MallocTracer)</h2>
<p>In this first <code>Pintool</code> example, I=E2=80=99m logging all the =
<code>malloc</code> and <code>free</code> calls. The instrumentation is add=
ed before and after the <code>malloc</code> call and logs the parameter pas=
sed to the call and its return value. For the <code>free</code> call we=E2=
=80=99ll only look at its parameter, and not at its return value. So the in=
strumentation is only added before the call. This <code>Pintool</code> will=
 not be very useful in big applications since it doesn=E2=80=99t really tel=
l you where the issue is. Anyway, it is a good start and will serve the pur=
pose of =E2=80=9Cshowing=E2=80=9D how the <code>Pin</code> <code>API</code>=
 can be used.</p>
<p>We need to start by choosing which instrumentation <a href=3D"https://so=
ftware.intel.com/sites/landingpage/pintool/docs/71313/Pin/html/index.html#G=
RAN">granularity</a> we=E2=80=99ll use. Have a look at the documentation fo=
r more details. I=E2=80=99ll be using <code>Image</code> <code>instrumentat=
ion</code>.</p>
<p><em>Image instrumentation lets the Pintool inspect and instrument an ent=
ire image, IMG, when it is first loaded. A Pintool can walk the sections, S=
EC, of the image, the routines, RTN, of a section, and the instructions, IN=
S of a routine. Instrumentation can be inserted so that it is executed befo=
re or after a routine is executed, or before or after an instruction is exe=
cuted. Image instrumentation utilizes the IMG_AddInstrumentFunction API cal=
l. Image instrumentation depends on symbol information to determine routine=
 boundaries hence PIN_InitSymbols must be called before PIN_Init.</em></p>
<p>We start with some includes. To use the <code>Pin API</code> we need to =
include <code>pin.h</code>.</p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-cpp" data=
-lang=3D"cpp"><span style=3D"color:#0f0;font-weight:bold">#include</span> <=
span style=3D"color:#0f0;font-weight:bold">"pin.h"</span><span style=3D"col=
or:#0f0;font-weight:bold">
</span><span style=3D"color:#0f0;font-weight:bold">#include</span> <span st=
yle=3D"color:#0f0;font-weight:bold">&lt;iostream&gt;</span><span style=3D"c=
olor:#0f0;font-weight:bold">
</span><span style=3D"color:#0f0;font-weight:bold">#include</span> <span st=
yle=3D"color:#0f0;font-weight:bold">&lt;fstream&gt;</span><span style=3D"co=
lor:#0f0;font-weight:bold">
</span><span style=3D"color:#0f0;font-weight:bold">#include</span> <span st=
yle=3D"color:#0f0;font-weight:bold">&lt;map&gt;</span><span style=3D"color:=
#0f0;font-weight:bold">
</span></code></pre></div><p>The <code>iostream</code> header is required f=
or basic input/output operations, and the <code>fstream</code> header is re=
quired because I=E2=80=99ll write the output of my <code>Pintool</code> to =
a file. In small programs, we could live with the console output, however f=
or big programs we need to save the output to a file. If you are instrument=
ing <code>Internet Explorer</code> for example and playing with some <code>=
JavaScript</code> code, the amount of <code>malloc</code> and <code>free</c=
ode> calls is impressive (well, <code>RtlAllocateHeap</code>, and <code>Rtl=
FreeHeap</code>). In some big programs you might not even want to write to =
disk every time there=E2=80=99s a call due to performance reasons, but let=
=E2=80=99s ignore that to keep things simple.</p>
<p>Additionally, I=E2=80=99ll use a <code>map</code> container to keep a lo=
g of all the memory allocated and freed. Check the <code>References</code> =
section to see how the <code>C++</code> <code>map</code> container =E2=80=
=9Cworks=E2=80=9D if you aren=E2=80=99t used to writing code in <code>C++</=
code>. Since I=E2=80=99m not a developer, I=E2=80=99m not, so my code can b=
e a bit scary but hopefully works. Consider yourself warned.</p>
<p>I=E2=80=99ll also have some global variables. It=E2=80=99s very common t=
o use global variables in a <code>Pintool</code>, have a look at the sample=
s provided to get a feeling of how they are most commonly used. In my case,=
 I=E2=80=99ll use the following global variables.</p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-cpp" data=
-lang=3D"cpp">map&lt;ADDRINT, <span style=3D"color:#fff;font-weight:bold">b=
ool</span>&gt; MallocMap;
ofstream LogFile;
KNOB&lt;string&gt; LogFileName(KNOB_MODE_WRITEONCE, <span style=3D"color:#0=
ff;font-weight:bold">"pintool"</span>, <span style=3D"color:#0ff;font-weigh=
t:bold">"o"</span>, <span style=3D"color:#0ff;font-weight:bold">"memprofile=
.out"</span>, <span style=3D"color:#0ff;font-weight:bold">"Memory trace fil=
e name"</span>);
</code></pre></div><p>I already mentioned the <code>map</code> container ab=
ove, again have a look <a href=3D"http://www.cplusplus.com/reference/map/ma=
p/begin/">here</a> if you don=E2=80=99t know how it works. The idea is to <=
code>store</code> in this <code>MallocMap</code> the state of each allocati=
on. The <code>ADDRINT</code> type is defined in <code>pin.h</code>, and as =
you can guess represents a memory address. It will be mapped to a <code>BOO=
L</code> value. If the <code>BOOL</code> value is set to <code>true</code> =
it means it has been deallocated.</p>
<p>The <code>LogFile</code> is the output file where I=E2=80=99ll save the =
output of the <code>Pintool</code>. Lastly, the <code>KNOB</code> variable.=
 It is basically a switch supported by our <code>Pintool</code> (a way to g=
et command arguments to our <code>Pintool</code>. This <code>KNOB</code> al=
lows us to specify the name of the log file through the <strong>=E2=80=9Co=
=E2=80=9D</strong> switch. Its default value is =E2=80=9Cmemprofile.out=E2=
=80=9D.</p>
<p>If we look at the <code>main</code> function of the code samples, you=E2=
=80=99ll see that they are all very similar. And the one below is no except=
ion.</p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-cpp" data=
-lang=3D"cpp"><span style=3D"color:#fff;font-weight:bold">int</span> main(<=
span style=3D"color:#fff;font-weight:bold">int</span> argc, <span style=3D"=
color:#fff;font-weight:bold">char</span> *argv[])
{
  PIN_InitSymbols();
  PIN_Init(argc, argv);
  LogFile.open(LogFileName.Value().c_str());
  IMG_AddInstrumentFunction(CustomInstrumentation, <span style=3D"color:#ff=
f;font-weight:bold">NULL</span>);
  PIN_AddFiniFunction(FinalFunc, <span style=3D"color:#fff;font-weight:bold=
">NULL</span>);
  PIN_StartProgram();

  <span style=3D"color:#fff;font-weight:bold">return</span> <span style=3D"=
color:#ff0;font-weight:bold">0</span>;
}
</code></pre></div><p>I have to call <code>PIN_InitSymbols</code> before <c=
ode>PIN_Init</code> because I=E2=80=99m using <code>Image instrumentation</=
code>, which depends on symbol information. Then I open the log file for wr=
iting, and I call <a href=3D"https://software.intel.com/sites/landingpage/p=
intool/docs/97503/Pin/html/group__IMG__BASIC__API.html#ga494869187b5d94d7dd=
346bc9ff49642f">IMG_AddInstrumentFunction</a>. The instrumentation function=
 that I=E2=80=99ll be using is called <code>CustomInstrumentation</code> an=
d is defined by me (not a <code>Pin</code> <code>API</code> function). You =
can call it whatever you want.</p>
<p>Then I have to call <a href=3D"https://software.intel.com/sites/landingp=
age/pintool/docs/97554/Pin/html/group__PIN__CONTROL.html#gac167b8d28d255e53=
a0ac1f6e9edcd3ec">PIN_AddFiniFunction</a>, which is a call to a function to=
 be executed immediately before the application exits. In this case, my fun=
ction is <code>FinalFunc</code>.</p>
<p>Finally, I call <a href=3D"https://software.intel.com/sites/landingpage/=
pintool/docs/97554/Pin/html/group__PIN__CONTROL.html#gaded401aeb030a76ee339=
6137b06ad808">PIN_StartProgram</a> to start executing my program. This func=
tion never returns.</p>
<p>So let=E2=80=99s have a look at my <code>CustomInstrumentation()</code> =
function.</p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-cpp" data=
-lang=3D"cpp">VOID CustomInstrumentation(IMG img, VOID *v)=20
{
  <span style=3D"color:#fff;font-weight:bold">for</span> (SYM sym =3D IMG_R=
egsymHead(img); SYM_Valid(sym); sym =3D SYM_Next(sym))
  {
    string undFuncName =3D PIN_UndecorateSymbolName(SYM_Name(sym), UNDECORA=
TION_NAME_ONLY);

    <span style=3D"color:#fff;font-weight:bold">if</span> (undFuncName =3D=
=3D <span style=3D"color:#0ff;font-weight:bold">"malloc"</span>)
    {
      RTN allocRtn =3D RTN_FindByAddress(IMG_LowAddress(img) + SYM_Value(sy=
m));

      <span style=3D"color:#fff;font-weight:bold">if</span> (RTN_Valid(allo=
cRtn))
      {
        RTN_Open(allocRtn);

        <span style=3D"color:#007f7f">// Record Malloc size
</span><span style=3D"color:#007f7f"></span>        RTN_InsertCall(allocRtn=
, IPOINT_BEFORE, (AFUNPTR)LogBeforeMalloc,
          IARG_FUNCARG_ENTRYPOINT_VALUE, <span style=3D"color:#ff0;font-wei=
ght:bold">0</span>, IARG_END);

        <span style=3D"color:#007f7f">// Record Malloc return address
</span><span style=3D"color:#007f7f"></span>        RTN_InsertCall(allocRtn=
, IPOINT_AFTER, (AFUNPTR)LogAfterMalloc,
          IARG_FUNCRET_EXITPOINT_VALUE, IARG_END);

        RTN_Close(allocRtn);
      }
    }
    <span style=3D"color:#fff;font-weight:bold">else</span> <span style=3D"=
color:#fff;font-weight:bold">if</span> (undFuncName =3D=3D <span style=3D"c=
olor:#0ff;font-weight:bold">"free"</span>)
    {
      RTN freeRtn =3D RTN_FindByAddress(IMG_LowAddress(img) + SYM_Value(sym=
));

      <span style=3D"color:#fff;font-weight:bold">if</span> (RTN_Valid(free=
Rtn))
      {
        RTN_Open(freeRtn);

        RTN_InsertCall(freeRtn, IPOINT_BEFORE, (AFUNPTR)LogFree,
          IARG_FUNCARG_ENTRYPOINT_VALUE, <span style=3D"color:#ff0;font-wei=
ght:bold">0</span>,
          IARG_END);

        RTN_Close(freeRtn);
      }
    }
  }
}
</code></pre></div><p>We need to =E2=80=9Ctell=E2=80=9D <code>Pin</code> wh=
at are the <code>instrumentation</code> routines, and when to execute them.=
 The instrumentation routine above is called every time an <code>image</cod=
e> is loaded, and then we also =E2=80=9Ctell=E2=80=9D <code>Pin</code> wher=
e to insert the <code>analysis</code> routines.</p>
<p>Basically, above, when we find a call to <code>malloc</code> or <code>fr=
ee</code> we insert the analysis routines by using the <a href=3D"https://s=
oftware.intel.com/sites/landingpage/pintool/docs/81205/Pin/html/group__RTN_=
_BASIC__API.html#ga76bde295a78d1232fd6ff98a5ff011cf">RTN_InsertCall</a> fun=
ction.</p>
<p>The <code>RTN_InsertCall</code> accepts multiple arguments, a variable n=
umber of arguments actually. Three are quite important, and you can easily =
guess which ones by looking at these calls. The first is the routine we wan=
t to instrument. The second is an <a href=3D"https://software.intel.com/sit=
es/landingpage/pintool/docs/97554/Pin/html/group__INST__ARGS.html#ga707ea08=
e31f44f4a81e2a7766123bad7">IPOINT</a> that determines where the analysis ca=
ll is inserted relative to the instrumented object. And the third is the an=
alysis routine to be inserted.</p>
<p>Also, note that all <code>RTN_InsertCall</code> functions must be preced=
ed by a call to <code>RTN_Open</code> and followed by a call to <code>RTN_C=
lose</code>.</p>
<p>We can specify a list of arguments to be passed to the analysis routine,=
 and this list must be terminated with <a href=3D"https://software.intel.co=
m/sites/landingpage/pintool/docs/97503/Pin/html/group__INST__ARGS.html">IAR=
G_END</a>. As we can also guess by looking at the code, to pass the return =
value of <code>malloc</code> to the analysis routine we use <a href=3D"http=
s://software.intel.com/sites/landingpage/pintool/docs/97503/Pin/html/group_=
_INST__ARGS.html#gga089c27ca15e9ff139dd3a3f8a6f8451da19dc8d3703330b7b1e1064=
336dd235cf">IARG_FUNCRET_EXITPOINT_VALUE</a>. To pass the argument of the <=
code>malloc</code> or <code>free</code> calls to the analysis routine, we u=
se <a href=3D"https://software.intel.com/sites/landingpage/pintool/docs/975=
03/Pin/html/group__INST__ARGS.html#gga089c27ca15e9ff139dd3a3f8a6f8451dab418=
d242314ea7c67b1febf7667e93a1">IARG_FUNCARG_ENTRYPOINT_VALUE</a> followed by=
 the index of the argument. In our case, both are <code>0</code> (first and=
 only argument).</p>
<p>All the <code>Pin</code> functions that operate at the routine level sta=
rt with <code>RTN_</code>. Have a look at the <code>RTN Routine Object</cod=
e> documentation <a href=3D"https://software.intel.com/sites/landingpage/pi=
ntool/docs/81205/Pin/html/group__RTN__BASIC__API.html">here</a>.</p>
<p>Also, all the <code>Pin</code> functions that operate at the <code>image=
</code> level start with <code>IMG_</code>. Have a look at the <code>IMG Im=
age Object</code> documentation <a href=3D"https://software.intel.com/sites=
/landingpage/pintool/docs/97503/Pin/html/group__IMG__BASIC__API.html">here<=
/a>.</p>
<p>The same applies to all the <code>Pin</code> functions that operate at t=
he <code>symbol</code> level, they all (or almost all) start with <code>SYM=
_</code>. Have a look at the <code>SYM Symbol Object</code> documentation <=
a href=3D"https://software.intel.com/sites/landingpage/pintool/docs/71313/P=
in/html/group__SYM__BASIC__API.html">here</a>.</p>
<p>You might be thinking how <code>Pin</code> finds <code>malloc</code> and=
 <code>free</code>. <code>Pin</code> will use whatever symbol information i=
s available. Debug symbols from the target/guest program if available, <cod=
e>PDB</code> files if available, export tables, and <a href=3D"https://docs=
.microsoft.com/en-us/windows/desktop/debug/debug-help-library">dbghelp</a>.=
 There are two possible methods to <code>instrument</code> our functions. W=
e can use <a href=3D"https://software.intel.com/sites/landingpage/pintool/d=
ocs/81205/Pin/html/group__RTN__BASIC__API.html#ga77a2ad03e0431b881d6c3019b4=
5261eb">RTN_FindByName</a>, or alternatively handling <a href=3D"https://en=
.wikipedia.org/wiki/Name_mangling">name-mangling</a> and multiple symbols (=
the method I used) as shown below.</p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-cpp" data=
-lang=3D"cpp">  <span style=3D"color:#fff;font-weight:bold">for</span> (SYM=
 sym =3D IMG_RegsymHead(img); SYM_Valid(sym); sym =3D SYM_Next(sym))
  {
    string undFuncName =3D PIN_UndecorateSymbolName(SYM_Name(sym), UNDECORA=
TION_NAME_ONLY);

    <span style=3D"color:#fff;font-weight:bold">if</span> (undFuncName =3D=
=3D <span style=3D"color:#0ff;font-weight:bold">"malloc"</span>) <span styl=
e=3D"color:#007f7f">// find the malloc function
</span></code></pre></div><p>After we find the calls (<code>malloc</code> a=
nd <code>free</code> in our example) we want to instrument, we =E2=80=9Ctel=
l=E2=80=9D <code>Pin</code> which function must be called every time a <cod=
e>malloc</code> call is executed.</p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-cpp" data=
-lang=3D"cpp">        <span style=3D"color:#007f7f">// Record Malloc size
</span><span style=3D"color:#007f7f"></span>        RTN_InsertCall(allocRtn=
, IPOINT_BEFORE, (AFUNPTR)LogBeforeMalloc,
          IARG_FUNCARG_ENTRYPOINT_VALUE, <span style=3D"color:#ff0;font-wei=
ght:bold">0</span>, IARG_END);

        <span style=3D"color:#007f7f">// Record Malloc return address
</span><span style=3D"color:#007f7f"></span>        RTN_InsertCall(allocRtn=
, IPOINT_AFTER, (AFUNPTR)LogAfterMalloc,
          IARG_FUNCRET_EXITPOINT_VALUE, IARG_END);
</code></pre></div><p>If we look at the code above, we have two calls to <a=
 href=3D"https://software.intel.com/sites/landingpage/pintool/docs/81205/Pi=
n/html/group__RTN__BASIC__API.html#ga76bde295a78d1232fd6ff98a5ff011cf">RTN_=
InsertCall</a>. In the first, we =E2=80=9Ctell=E2=80=9D <code>Pin</code> wh=
ich function must be called before the <code>malloc</code> call. In the sec=
ond we =E2=80=9Ctell=E2=80=9D <code>Pin</code> which function must be calle=
d after the <code>malloc</code> call. We want to log the allocation sizes a=
nd the return value of the <code>malloc</code> call. So, we need both.</p>
<p>For the <code>free</code> call, we are only interested in its parameter =
(the address of the memory to free).</p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-cpp" data=
-lang=3D"cpp">RTN_InsertCall(freeRtn, IPOINT_BEFORE, (AFUNPTR)LogFree,
  IARG_FUNCARG_ENTRYPOINT_VALUE, <span style=3D"color:#ff0;font-weight:bold=
">0</span>,
  IARG_END);
</code></pre></div><p>These three functions are very straightforward. First=
, before the <code>malloc</code> call we just want to save the size of the =
memory being allocated.</p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-cpp" data=
-lang=3D"cpp">VOID LogBeforeMalloc(ADDRINT size)
{
  LogFile &lt;&lt; <span style=3D"color:#0ff;font-weight:bold">"[*] malloc(=
"</span> &lt;&lt; dec &lt;&lt; size &lt;&lt; <span style=3D"color:#0ff;font=
-weight:bold">")"</span>;
}
</code></pre></div><p>After the <code>malloc</code> call, we just want to s=
ave the return address. However, as we can see below, we use the <code>map<=
/code> container and by using an <code>iterator</code> we check if the chun=
k of memory is being allocated for the first time. If yes, we also log it.<=
/p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-cpp" data=
-lang=3D"cpp">VOID LogAfterMalloc(ADDRINT addr)
{
  <span style=3D"color:#fff;font-weight:bold">if</span> (addr =3D=3D <span =
style=3D"color:#fff;font-weight:bold">NULL</span>)
  {
    cerr &lt;&lt; <span style=3D"color:#0ff;font-weight:bold">"[-] Error: m=
alloc() return value was NULL. Heap full!?!"</span>;
    <span style=3D"color:#fff;font-weight:bold">return</span>;
  }

  map&lt;ADDRINT, <span style=3D"color:#fff;font-weight:bold">bool</span>&g=
t;::iterator it =3D MallocMap.find(addr);

  <span style=3D"color:#fff;font-weight:bold">if</span> (it !=3D MallocMap.=
end())
  {
    <span style=3D"color:#fff;font-weight:bold">if</span> (it-&gt;second)
      it-&gt;second =3D <span style=3D"color:#fff;font-weight:bold">false</=
span>;
    <span style=3D"color:#fff;font-weight:bold">else</span>
      cerr &lt;&lt; <span style=3D"color:#0ff;font-weight:bold">"[-] Error:=
 allocating memory not freed!?!"</span> &lt;&lt; endl;
  }
  <span style=3D"color:#fff;font-weight:bold">else</span>
  {
    MallocMap.insert(pair&lt;ADDRINT, <span style=3D"color:#fff;font-weight=
:bold">bool</span>&gt;(addr, <span style=3D"color:#fff;font-weight:bold">fa=
lse</span>));
    LogFile &lt;&lt; <span style=3D"color:#0ff;font-weight:bold">"</span><s=
pan style=3D"color:#0ff;font-weight:bold">\t\t</span><span style=3D"color:#=
0ff;font-weight:bold">=3D 0x"</span> &lt;&lt; hex &lt;&lt; addr &lt;&lt; en=
dl;
  }
}
</code></pre></div><p>Finally, when we <code>free</code> a chunk of memory =
we verify if that address was already freed to detect double frees. Plus, i=
f we don=E2=80=99t know the address being freed then we are trying to free =
memory that wasn=E2=80=99t allocated before. Which can lead to undefined be=
havior?</p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-cpp" data=
-lang=3D"cpp">VOID LogFree(ADDRINT addr)=20
{
  map&lt;ADDRINT, <span style=3D"color:#fff;font-weight:bold">bool</span>&g=
t;::iterator it =3D MallocMap.find(addr);

  <span style=3D"color:#fff;font-weight:bold">if</span> (it !=3D MallocMap.=
end())=20
  {
    <span style=3D"color:#fff;font-weight:bold">if</span> (it-&gt;second)=
=20
      LogFile &lt;&lt; <span style=3D"color:#0ff;font-weight:bold">"[*] Mem=
ory at address 0x"</span> &lt;&lt; hex &lt;&lt; addr &lt;&lt; <span style=
=3D"color:#0ff;font-weight:bold">" has been freed more than once."</span>  =
&lt;&lt; endl; <span style=3D"color:#007f7f">// Double free
</span><span style=3D"color:#007f7f"></span>    <span style=3D"color:#fff;f=
ont-weight:bold">else</span>=20
    {
      it-&gt;second =3D <span style=3D"color:#fff;font-weight:bold">true</s=
pan>;    <span style=3D"color:#007f7f">// Mark it as freed
</span><span style=3D"color:#007f7f"></span>      LogFile &lt;&lt; <span st=
yle=3D"color:#0ff;font-weight:bold">"[*] free(0x"</span> &lt;&lt; hex &lt;&=
lt; addr &lt;&lt; <span style=3D"color:#0ff;font-weight:bold">")"</span> &l=
t;&lt; endl;
    }
  }
  <span style=3D"color:#fff;font-weight:bold">else</span>=20
    LogFile &lt;&lt; <span style=3D"color:#0ff;font-weight:bold">"[*] Freei=
ng unallocated memory at address 0x"</span> &lt;&lt; hex &lt;&lt; addr &lt;=
&lt; <span style=3D"color:#0ff;font-weight:bold">"."</span> &lt;&lt; endl; =
   <span style=3D"color:#007f7f">// Freeing unallocated memory
</span><span style=3D"color:#007f7f"></span>}
</code></pre></div><p>Lastly, we have the call to <code>FinalFunc</code>, w=
hich is executed just before the program ends. We basically verify if there=
=E2=80=99s memory that has been allocated but not freed, and we close our l=
og file. The return of this function marks the end of the instrumentation.<=
/p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-cpp" data=
-lang=3D"cpp">VOID FinalFunc(INT32 code, VOID *v)=20
{
  <span style=3D"color:#fff;font-weight:bold">for</span> (pair&lt;ADDRINT, =
<span style=3D"color:#fff;font-weight:bold">bool</span>&gt; p : MallocMap)=
=20
  {
    <span style=3D"color:#fff;font-weight:bold">if</span> (!p.second)=20
      LogFile &lt;&lt; <span style=3D"color:#0ff;font-weight:bold">"[*] Mem=
ory at address 0x"</span> &lt;&lt; hex &lt;&lt; p.first &lt;&lt; <span styl=
e=3D"color:#0ff;font-weight:bold">" allocated but not freed"</span> &lt;&lt=
; endl;
  }

  LogFile.close();
}
</code></pre></div><p>Simple.</p>
<p>The whole <code>Pintool</code> code is below. You can also get the whole=
 <code>Visual Studio</code> project from GitLab <a href=3D"https://github.c=
om/houseofxyz/DBI/tree/master/MallocTracer">here</a>.</p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-cpp" data=
-lang=3D"cpp"><span style=3D"color:#007f7f">// Built on top of https://soft=
ware.intel.com/sites/default/files/managed/62/f4/cgo2013.pdf (slide 33)
</span><span style=3D"color:#007f7f"></span>
<span style=3D"color:#0f0;font-weight:bold">#include</span> <span style=3D"=
color:#0f0;font-weight:bold">"pin.h"</span><span style=3D"color:#0f0;font-w=
eight:bold">
</span><span style=3D"color:#0f0;font-weight:bold">#include</span> <span st=
yle=3D"color:#0f0;font-weight:bold">&lt;iostream&gt;</span><span style=3D"c=
olor:#0f0;font-weight:bold">
</span><span style=3D"color:#0f0;font-weight:bold">#include</span> <span st=
yle=3D"color:#0f0;font-weight:bold">&lt;fstream&gt;</span><span style=3D"co=
lor:#0f0;font-weight:bold">
</span><span style=3D"color:#0f0;font-weight:bold">#include</span> <span st=
yle=3D"color:#0f0;font-weight:bold">&lt;map&gt;</span><span style=3D"color:=
#0f0;font-weight:bold">
</span><span style=3D"color:#0f0;font-weight:bold"></span>
map&lt;ADDRINT, <span style=3D"color:#fff;font-weight:bold">bool</span>&gt;=
 MallocMap;
ofstream LogFile;
KNOB&lt;string&gt; LogFileName(KNOB_MODE_WRITEONCE, <span style=3D"color:#0=
ff;font-weight:bold">"pintool"</span>, <span style=3D"color:#0ff;font-weigh=
t:bold">"o"</span>, <span style=3D"color:#0ff;font-weight:bold">"memprofile=
.out"</span>, <span style=3D"color:#0ff;font-weight:bold">"Memory trace fil=
e name"</span>);

VOID LogAfterMalloc(ADDRINT addr)
{
  <span style=3D"color:#fff;font-weight:bold">if</span> (addr =3D=3D <span =
style=3D"color:#fff;font-weight:bold">NULL</span>)
  {
    cerr &lt;&lt; <span style=3D"color:#0ff;font-weight:bold">"[-] Error: m=
alloc() return value was NULL. Heap full!?!"</span>;
    <span style=3D"color:#fff;font-weight:bold">return</span>;
  }

  map&lt;ADDRINT, <span style=3D"color:#fff;font-weight:bold">bool</span>&g=
t;::iterator it =3D MallocMap.find(addr);

  <span style=3D"color:#fff;font-weight:bold">if</span> (it !=3D MallocMap.=
end())
  {
    <span style=3D"color:#fff;font-weight:bold">if</span> (it-&gt;second)
      it-&gt;second =3D <span style=3D"color:#fff;font-weight:bold">false</=
span>;
    <span style=3D"color:#fff;font-weight:bold">else</span>
      cerr &lt;&lt; <span style=3D"color:#0ff;font-weight:bold">"[-] Error:=
 allocating memory not freed!?!"</span> &lt;&lt; endl;
  }
  <span style=3D"color:#fff;font-weight:bold">else</span>
  {
    MallocMap.insert(pair&lt;ADDRINT, <span style=3D"color:#fff;font-weight=
:bold">bool</span>&gt;(addr, <span style=3D"color:#fff;font-weight:bold">fa=
lse</span>));
    LogFile &lt;&lt; <span style=3D"color:#0ff;font-weight:bold">"</span><s=
pan style=3D"color:#0ff;font-weight:bold">\t\t</span><span style=3D"color:#=
0ff;font-weight:bold">=3D 0x"</span> &lt;&lt; hex &lt;&lt; addr &lt;&lt; en=
dl;
  }
}

VOID LogBeforeMalloc(ADDRINT size)
{
  LogFile &lt;&lt; <span style=3D"color:#0ff;font-weight:bold">"[*] malloc(=
"</span> &lt;&lt; dec &lt;&lt; size &lt;&lt; <span style=3D"color:#0ff;font=
-weight:bold">")"</span>;
}

VOID LogFree(ADDRINT addr)=20
{
  map&lt;ADDRINT, <span style=3D"color:#fff;font-weight:bold">bool</span>&g=
t;::iterator it =3D MallocMap.find(addr);

  <span style=3D"color:#fff;font-weight:bold">if</span> (it !=3D MallocMap.=
end())=20
  {
    <span style=3D"color:#fff;font-weight:bold">if</span> (it-&gt;second)=
=20
      LogFile &lt;&lt; <span style=3D"color:#0ff;font-weight:bold">"[*] Mem=
ory at address 0x"</span> &lt;&lt; hex &lt;&lt; addr &lt;&lt; <span style=
=3D"color:#0ff;font-weight:bold">" has been freed more than once."</span>  =
&lt;&lt; endl; <span style=3D"color:#007f7f">// Double free
</span><span style=3D"color:#007f7f"></span>    <span style=3D"color:#fff;f=
ont-weight:bold">else</span>=20
    {
      it-&gt;second =3D <span style=3D"color:#fff;font-weight:bold">true</s=
pan>;    <span style=3D"color:#007f7f">// Mark it as freed
</span><span style=3D"color:#007f7f"></span>      LogFile &lt;&lt; <span st=
yle=3D"color:#0ff;font-weight:bold">"[*] free(0x"</span> &lt;&lt; hex &lt;&=
lt; addr &lt;&lt; <span style=3D"color:#0ff;font-weight:bold">")"</span> &l=
t;&lt; endl;
    }
  }
  <span style=3D"color:#fff;font-weight:bold">else</span>=20
    LogFile &lt;&lt; <span style=3D"color:#0ff;font-weight:bold">"[*] Freei=
ng unallocated memory at address 0x"</span> &lt;&lt; hex &lt;&lt; addr &lt;=
&lt; <span style=3D"color:#0ff;font-weight:bold">"."</span> &lt;&lt; endl;
}

VOID CustomInstrumentation(IMG img, VOID *v)=20
{
  <span style=3D"color:#fff;font-weight:bold">for</span> (SYM sym =3D IMG_R=
egsymHead(img); SYM_Valid(sym); sym =3D SYM_Next(sym))
  {
    string undFuncName =3D PIN_UndecorateSymbolName(SYM_Name(sym), UNDECORA=
TION_NAME_ONLY);

    <span style=3D"color:#fff;font-weight:bold">if</span> (undFuncName =3D=
=3D <span style=3D"color:#0ff;font-weight:bold">"malloc"</span>)
    {
      RTN allocRtn =3D RTN_FindByAddress(IMG_LowAddress(img) + SYM_Value(sy=
m));

      <span style=3D"color:#fff;font-weight:bold">if</span> (RTN_Valid(allo=
cRtn))
      {
        RTN_Open(allocRtn);

        <span style=3D"color:#007f7f">// Record Malloc size
</span><span style=3D"color:#007f7f"></span>        RTN_InsertCall(allocRtn=
, IPOINT_BEFORE, (AFUNPTR)LogBeforeMalloc,
          IARG_FUNCARG_ENTRYPOINT_VALUE, <span style=3D"color:#ff0;font-wei=
ght:bold">0</span>, IARG_END);

        <span style=3D"color:#007f7f">// Record Malloc return address
</span><span style=3D"color:#007f7f"></span>        RTN_InsertCall(allocRtn=
, IPOINT_AFTER, (AFUNPTR)LogAfterMalloc,
          IARG_FUNCRET_EXITPOINT_VALUE, IARG_END);

        RTN_Close(allocRtn);
      }
    }
    <span style=3D"color:#fff;font-weight:bold">else</span> <span style=3D"=
color:#fff;font-weight:bold">if</span> (undFuncName =3D=3D <span style=3D"c=
olor:#0ff;font-weight:bold">"free"</span>)
    {
      RTN freeRtn =3D RTN_FindByAddress(IMG_LowAddress(img) + SYM_Value(sym=
));

      <span style=3D"color:#fff;font-weight:bold">if</span> (RTN_Valid(free=
Rtn))
      {
        RTN_Open(freeRtn);

        RTN_InsertCall(freeRtn, IPOINT_BEFORE, (AFUNPTR)LogFree,
          IARG_FUNCARG_ENTRYPOINT_VALUE, <span style=3D"color:#ff0;font-wei=
ght:bold">0</span>,
          IARG_END);

        RTN_Close(freeRtn);
      }
    }
  }
}

VOID FinalFunc(INT32 code, VOID *v)=20
{
  <span style=3D"color:#fff;font-weight:bold">for</span> (pair&lt;ADDRINT, =
<span style=3D"color:#fff;font-weight:bold">bool</span>&gt; p : MallocMap)=
=20
  {
    <span style=3D"color:#fff;font-weight:bold">if</span> (!p.second)=20
      LogFile &lt;&lt; <span style=3D"color:#0ff;font-weight:bold">"[*] Mem=
ory at address 0x"</span> &lt;&lt; hex &lt;&lt; p.first &lt;&lt; <span styl=
e=3D"color:#0ff;font-weight:bold">" allocated but not freed"</span> &lt;&lt=
; endl;
  }

  LogFile.close();
}

<span style=3D"color:#fff;font-weight:bold">int</span> main(<span style=3D"=
color:#fff;font-weight:bold">int</span> argc, <span style=3D"color:#fff;fon=
t-weight:bold">char</span> *argv[])
{
  PIN_InitSymbols();
  PIN_Init(argc, argv);
  LogFile.open(LogFileName.Value().c_str());
  IMG_AddInstrumentFunction(CustomInstrumentation, <span style=3D"color:#ff=
f;font-weight:bold">NULL</span>);
  PIN_AddFiniFunction(FinalFunc, <span style=3D"color:#fff;font-weight:bold=
">NULL</span>);
  PIN_StartProgram();

  <span style=3D"color:#fff;font-weight:bold">return</span> <span style=3D"=
color:#ff0;font-weight:bold">0</span>;
}
</code></pre></div><p>If you run it against our <code>ExercisePin.exe</code=
> (see the section <code>Target/Guest Program</code>) binary.</p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-fallback"=
 data-lang=3D"fallback">C:\pin&gt;pin -t c:\pin\source\tools\MallocTracer\R=
elease\MallocTracer.dll -- ExercisePin.exe
done

C:\pin&gt;type memprofile.out
[*] Freeing unallocated memory at address 0x0.
[*] malloc(2)   =3D 0x564f68
[*] malloc(128)   =3D 0x569b88
[*] malloc(128)   =3D 0x569c10
[*] malloc(128)   =3D 0x569c98
[*] free(0x569b88)
[*] free(0x569c98)
[*] malloc(2)   =3D 0x564e78
[*] Memory at address 0x564e78 allocated but not freed
[*] Memory at address 0x564f68 allocated but not freed
[*] Memory at address 0x569c10 allocated but not freed
</code></pre></div><p>Or, if we pass any data as an argument to our <code>E=
xercisePin.exe</code>=E2=80=A6</p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-fallback"=
 data-lang=3D"fallback">C:\pin&gt;pin.exe -t "C:\pin\source\tools\MallocTra=
cer\Release\MallocTracer.dll" -- C:\TARGET\ExercisePin.exe moo

C:\pin&gt;type memprofile.out
[*] Freeing unallocated memory at address 0x0.
[*] malloc(2)   =3D 0x214f78
[*] malloc(128)   =3D 0x218f98
[*] malloc(128)   =3D 0x219020
[*] malloc(128)   =3D 0x2190a8
[*] free(0x218f98)
[*] free(0x2190a8)
[*] Memory at address 0x2190a8 has been freed more than once (Double Free).
</code></pre></div><p>As we can see above, our <code>Pintool</code> was abl=
e to identify all the issues we were aware of in our test case. That is, <c=
ode>invalid free</code>, <code>memory leaks</code>, and a <code>double free=
</code>. The reason why we don=E2=80=99t see the memory leaks in the last o=
utput, it=E2=80=99s because our binary crashes when the double free happens=
. The binary was built with <code>Visual Studio</code>, which adds some <co=
de>Heap</code> integrity checks and makes it crash. If you build <code>Exer=
cisePin.exe</code> with <code>gcc</code>, or another compiler, the <code>do=
uble free</code> won=E2=80=99t be noticed and the program will keep running=
. However, if you build it with <code>gcc</code>, for example, you=E2=80=99=
ll see many other <code>malloc</code> and <code>free</code> calls from the =
<code>C Run-Time</code> Library initialization code. Hence, I didn=E2=80=99=
t use <code>gcc</code> to make it easier to follow.</p>
<h3 id=3D"basic-dynamorio-client-mallocwrap">Basic DynamoRIO client (Malloc=
Wrap)</h3>
<p>We=E2=80=99ll create a <code>DynamoRIO client</code> that mimics the <co=
de>Pintool</code> above. That is, we=E2=80=99ll log all the <code>malloc</c=
ode> and <code>free</code> calls. The same way, the <code>instrumentation</=
code> is added before and after the <code>malloc</code> call since we want =
to log the parameter passed to the call and its return value. For the <code=
>free</code> call, we=E2=80=99ll only look at its parameter, and not at its=
 return value. So the instrumentation is only added before the call.</p>
<p>We=E2=80=99ll use the <a href=3D"http://dynamorio.org/docs/page_drwrap.h=
tml">drwrap</a> <code>DynamoRIO</code> extension, which provides function w=
rapping and replacing support, <code>drwrap</code> uses the <a href=3D"http=
://dynamorio.org/docs/page_drmgr.html">drmgr</a> extension to ensure its ev=
ents occur at the proper order.</p>
<p>We start with some =E2=80=9Cstandard=E2=80=9D includes, and to use the <=
code>DynamoRIO</code> <code>APIs</code> we need to include <code>dr_api.h</=
code>.</p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-cpp" data=
-lang=3D"cpp"><span style=3D"color:#0f0;font-weight:bold">#include</span> <=
span style=3D"color:#0f0;font-weight:bold">"stdafx.h"</span><span style=3D"=
color:#0f0;font-weight:bold">
</span><span style=3D"color:#0f0;font-weight:bold">#include</span> <span st=
yle=3D"color:#0f0;font-weight:bold">&lt;fstream&gt;</span><span style=3D"co=
lor:#0f0;font-weight:bold">
</span><span style=3D"color:#0f0;font-weight:bold">#include</span> <span st=
yle=3D"color:#0f0;font-weight:bold">"dr_api.h"</span><span style=3D"color:#=
0f0;font-weight:bold">
</span><span style=3D"color:#0f0;font-weight:bold">#include</span> <span st=
yle=3D"color:#0f0;font-weight:bold">"drmgr.h"</span><span style=3D"color:#0=
f0;font-weight:bold">
</span><span style=3D"color:#0f0;font-weight:bold">#include</span> <span st=
yle=3D"color:#0f0;font-weight:bold">"drwrap.h"</span><span style=3D"color:#=
0f0;font-weight:bold">
</span><span style=3D"color:#0f0;font-weight:bold"></span><span style=3D"co=
lor:#fff;font-weight:bold">using</span> <span style=3D"color:#fff;font-weig=
ht:bold">namespace</span> std;
</code></pre></div><p>Additionally, we include the headers for the extensio=
ns mentioned above. That is, <code>drmgr.h</code> and <code>drwrap.h</code>=
. We=E2=80=99ll write the output of this <code>DynamoRIO client</code> to a=
 text file, hence the <code>fstream</code> include. I won=E2=80=99t use a c=
ontainer in this example to keep track of the memory allocations. You can j=
ust copy and paste that functionality from the <code>Pintool</code> above w=
ith slight modifications, so I=E2=80=99ll leave that for you as an exercise=
. In this example, we=E2=80=99ll simply log <code>malloc</code> and <code>f=
ree</code> calls to demonstrate how to use the <code>DynamoRIO</code> <code=
>API</code> to accomplish the same as before, where we used <code>Pin</code=
>.</p>
<p>Then, we have the functions=E2=80=99 declaration, and some global variab=
les.</p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-cpp" data=
-lang=3D"cpp"><span style=3D"color:#fff;font-weight:bold">static</span> <sp=
an style=3D"color:#fff;font-weight:bold">void</span> event_exit(<span style=
=3D"color:#fff;font-weight:bold">void</span>);
<span style=3D"color:#fff;font-weight:bold">static</span> <span style=3D"co=
lor:#fff;font-weight:bold">void</span> wrap_malloc_pre(<span style=3D"color=
:#fff;font-weight:bold">void</span> *wrapcxt, OUT <span style=3D"color:#fff=
;font-weight:bold">void</span> **user_data);
<span style=3D"color:#fff;font-weight:bold">static</span> <span style=3D"co=
lor:#fff;font-weight:bold">void</span> wrap_malloc_post(<span style=3D"colo=
r:#fff;font-weight:bold">void</span> *wrapcxt, <span style=3D"color:#fff;fo=
nt-weight:bold">void</span> *user_data);
<span style=3D"color:#fff;font-weight:bold">static</span> <span style=3D"co=
lor:#fff;font-weight:bold">void</span> wrap_free_pre(<span style=3D"color:#=
fff;font-weight:bold">void</span> *wrapcxt, OUT <span style=3D"color:#fff;f=
ont-weight:bold">void</span> **user_data);

ofstream LogFile;
<span style=3D"color:#0f0;font-weight:bold">#define MALLOC_ROUTINE_NAME "ma=
lloc"
</span><span style=3D"color:#0f0;font-weight:bold">#define FREE_ROUTINE_NAM=
E "free"
</span></code></pre></div><p>These are all cosmetic, we could have used the=
se <code>#define</code>s in our <code>Pintool</code> too. We didn=E2=80=99t=
, the reason being is=E2=80=A6 we don=E2=80=99t have to. Feel free to adopt=
 the style you want. I built this example on top of this <a href=3D"http://=
dynamorio.org/docs/samples/wrap.c">one</a>, so I ended up using more or les=
s the same =E2=80=9Cstyle=E2=80=9D. If you plan to port your <code>client</=
code> or <code>Pintool</code> to other platforms, this can be considered a =
good practice because it will make the changes easier.</p>
<p>Next, we have a function called <code>module_load_event</code>, which hi=
s a <code>callback</code> function registered by the <a href=3D"http://dyna=
morio.org/docs/group__drmgr.html#ga3839db2be4269115fdca1bffa5342558">drmgr_=
register_module_load_event</a>. <code>DynamoRIO</code> will call this funct=
ion whenever the application loads a module. As you can see, not that diffe=
rent from <code>Pin</code>.</p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-cpp" data=
-lang=3D"cpp"><span style=3D"color:#fff;font-weight:bold">static</span> <sp=
an style=3D"color:#fff;font-weight:bold">void</span> module_load_event(<spa=
n style=3D"color:#fff;font-weight:bold">void</span> *drcontext, <span style=
=3D"color:#fff;font-weight:bold">const</span> module_data_t *mod, <span sty=
le=3D"color:#fff;font-weight:bold">bool</span> loaded)
{
  app_pc towrap =3D (app_pc)dr_get_proc_address(mod-&gt;handle, MALLOC_ROUT=
INE_NAME);
  <span style=3D"color:#fff;font-weight:bold">if</span> (towrap !=3D <span =
style=3D"color:#fff;font-weight:bold">NULL</span>)
  {
    <span style=3D"color:#fff;font-weight:bold">bool</span> ok =3D drwrap_w=
rap(towrap, wrap_malloc_pre, wrap_malloc_post);

    <span style=3D"color:#fff;font-weight:bold">if</span> (!ok)
    {
      dr_fprintf(STDERR, <span style=3D"color:#0ff;font-weight:bold">"[-] C=
ould not wrap 'malloc': already wrapped?</span><span style=3D"color:#0ff;fo=
nt-weight:bold">\n</span><span style=3D"color:#0ff;font-weight:bold">"</spa=
n>);
      DR_ASSERT(ok);
    }
  }

  towrap =3D (app_pc)dr_get_proc_address(mod-&gt;handle, FREE_ROUTINE_NAME)=
;
  <span style=3D"color:#fff;font-weight:bold">if</span> (towrap !=3D <span =
style=3D"color:#fff;font-weight:bold">NULL</span>)
  {
    <span style=3D"color:#fff;font-weight:bold">bool</span> ok =3D drwrap_w=
rap(towrap, wrap_free_pre, <span style=3D"color:#fff;font-weight:bold">NULL=
</span>);

    <span style=3D"color:#fff;font-weight:bold">if</span> (!ok)
    {
      dr_fprintf(STDERR, <span style=3D"color:#0ff;font-weight:bold">"[-] C=
ould not wrap 'free': already wrapped?</span><span style=3D"color:#0ff;font=
-weight:bold">\n</span><span style=3D"color:#0ff;font-weight:bold">"</span>=
);
      DR_ASSERT(ok);
    }
  }
}
</code></pre></div><p>As we can see above, we then use <a href=3D"http://dy=
namorio.org/docs/dr__tools_8h.html#a8da7923ecc4e020e31442bcc8d9f8d3e">dr_ge=
t_proc_address</a> to get the entry point of <code>malloc</code>. If it doe=
sn=E2=80=99t return <code>NULL</code> (on failure), then we use <a href=3D"=
http://dynamorio.org/docs/group__drwrap.html#ga4c004987daae07af15f2146c2d7d=
4b09">drwrap_wrap</a> to wrap the application function by calling <code>wra=
p_malloc_pre()</code> prior to every invocation of the original function (<=
code>malloc</code>) and calling <code>wrap_malloc_post()</code> after every=
 invocation of the original function (<code>malloc</code>). Again, conceptu=
ally, very close to what we did with <code>Pin</code>.</p>
<p>We do the same with <code>free</code>. However, as stated before we are =
only interested in the <code>free</code> parameter and not its return value=
. So we only wrap the <code>free</code> call prior to every invocation (<co=
de>wrap_free_pre</code>). Since we don=E2=80=99t care about its return valu=
e we just pass <code>NULL</code> as the third parameter to <code>drwrap_wra=
p</code>. With <code>drwrap_wrap</code> one of the callbacks can be <code>N=
ULL</code>, but not both.</p>
<p>We then have the <a href=3D"http://dynamorio.org/docs/dr__api_8h.html#a2=
b938c98dd186cc94eef6880f9e3c3e9">dr_client_main</a>, which is, let=E2=80=99=
s say, our <code>main</code> function. <code>DynamoRIO</code> looks up <cod=
e>dr_client_main</code> in each client library and calls that function when=
 the process starts.</p>
<p>We have a pretty common =E2=80=9Cmain=E2=80=9D, with calls to <a href=3D=
"http://dynamorio.org/docs/dr__tools_8h.html#a401eb84af927fa3bd1358f6b639ec=
592">dr_set_client_name</a> (which sets information presented to users in d=
iagnostic messages), <a href=3D"http://dynamorio.org/docs/dr__tools_8h.html=
#a332a14861f12823994465e8c9b6a3015">dr_log</a> (which simply writes to <cod=
e>DynamoRIO</code>'s log file), and a couple of functions that you can gues=
s what they do by its name.</p>
<p>Additionally, <a href=3D"http://dynamorio.org/docs/group__drmgr.html#ga0=
7ab03a2182247922f756778d18bb3fd">drmgr_init</a>, and <a href=3D"http://dyna=
morio.org/docs/group__drwrap.html#ga23837833101ebc340ac7de6e8340bb4a">drwra=
p_init</a>, initialize the respective extensions. The <a href=3D"http://dyn=
amorio.org/docs/dr__events_8h.html#a985537df683007e1392e8a3b095ef363">dr_re=
gister_exit_event</a> is pretty much the same as the <code>Pin</code> <code=
>PIN_AddFiniFunction</code>, which is a call to a function to be executed i=
mmediately before the application exits.</p>
<p>Lastly, we have the call to <code>drmgr_register_module_load_event</code=
> that we already mentioned above.</p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-cpp" data=
-lang=3D"cpp">DR_EXPORT <span style=3D"color:#fff;font-weight:bold">void</s=
pan> dr_client_main(client_id_t id, <span style=3D"color:#fff;font-weight:b=
old">int</span> argc, <span style=3D"color:#fff;font-weight:bold">const</sp=
an> <span style=3D"color:#fff;font-weight:bold">char</span> *argv[])
{
  LogFile.open(<span style=3D"color:#0ff;font-weight:bold">"memprofile.out"=
</span>);

  dr_set_client_name(<span style=3D"color:#0ff;font-weight:bold">"DynamoRIO=
 Sample Client 'wrap'"</span>, <span style=3D"color:#0ff;font-weight:bold">=
"http://dynamorio.org/issues"</span>);
  dr_log(<span style=3D"color:#fff;font-weight:bold">NULL</span>, LOG_ALL, =
<span style=3D"color:#ff0;font-weight:bold">1</span>, <span style=3D"color:=
#0ff;font-weight:bold">"Client 'wrap' initializing</span><span style=3D"col=
or:#0ff;font-weight:bold">\n</span><span style=3D"color:#0ff;font-weight:bo=
ld">"</span>);

  <span style=3D"color:#fff;font-weight:bold">if</span> (dr_is_notify_on())=
=20
  {
    dr_enable_console_printing();
    dr_fprintf(STDERR, <span style=3D"color:#0ff;font-weight:bold">"[*] Cli=
ent wrap is running</span><span style=3D"color:#0ff;font-weight:bold">\n</s=
pan><span style=3D"color:#0ff;font-weight:bold">"</span>);
  }

  drmgr_init();
  drwrap_init();
  dr_register_exit_event(event_exit);
  drmgr_register_module_load_event(module_load_event);
}
</code></pre></div><p>The function to be executed immediately before the ap=
plication exits. Nothing special here.</p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-cpp" data=
-lang=3D"cpp"><span style=3D"color:#fff;font-weight:bold">static</span> <sp=
an style=3D"color:#fff;font-weight:bold">void</span> event_exit(<span style=
=3D"color:#fff;font-weight:bold">void</span>)
{
  drwrap_exit();
  drmgr_exit();
}
</code></pre></div><p>And lastly, the <code>callback</code> functions alrea=
dy mentioned before. What=E2=80=99s relevant here? The call <a href=3D"http=
://dynamorio.org/docs/group__drwrap.html#ga3d0864daf1ec37a91640a739f8928b83=
">drwrap_get_arg</a>, that as we can guess <em>=E2=80=9CReturns the value o=
f the arg-th argument (0-based) to the wrapped function represented by wrap=
cxt. Assumes the regular C calling convention (i.e., no fastcall). May only=
 be called from a drwrap_wrap pre-function callback. To access argument val=
ues in a post-function callback, store them in the user_data parameter pass=
ed between the pre and post functions."</em>. And the call <a href=3D"http:=
//dynamorio.org/docs/group__drwrap.html#gae993f55e025cf80ae67ed398b35a1b61"=
>drwrap_get_retval</a>, which obviously returns the return value of the wra=
pped function.</p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-cpp" data=
-lang=3D"cpp"><span style=3D"color:#fff;font-weight:bold">static</span> <sp=
an style=3D"color:#fff;font-weight:bold">void</span> wrap_malloc_pre(<span =
style=3D"color:#fff;font-weight:bold">void</span> *wrapcxt, OUT <span style=
=3D"color:#fff;font-weight:bold">void</span> **user_data)
{
  <span style=3D"color:#007f7f">/* malloc(size) or HeapAlloc(heap, flags, s=
ize) */</span>
  <span style=3D"color:#007f7f">//size_t sz =3D (size_t)drwrap_get_arg(wrap=
cxt, 2); // HeapAlloc
</span><span style=3D"color:#007f7f"></span>  size_t sz =3D (size_t)drwrap_=
get_arg(wrapcxt, <span style=3D"color:#ff0;font-weight:bold">0</span>); <sp=
an style=3D"color:#007f7f">// malloc
</span><span style=3D"color:#007f7f"></span>
  LogFile &lt;&lt; <span style=3D"color:#0ff;font-weight:bold">"[*] malloc(=
"</span> &lt;&lt; dec &lt;&lt; sz &lt;&lt; <span style=3D"color:#0ff;font-w=
eight:bold">")"</span>; <span style=3D"color:#007f7f">// log the malloc siz=
e
</span><span style=3D"color:#007f7f"></span>}

<span style=3D"color:#fff;font-weight:bold">static</span> <span style=3D"co=
lor:#fff;font-weight:bold">void</span> wrap_malloc_post(<span style=3D"colo=
r:#fff;font-weight:bold">void</span> *wrapcxt, <span style=3D"color:#fff;fo=
nt-weight:bold">void</span> *user_data)
{
  <span style=3D"color:#fff;font-weight:bold">int</span> actual_read =3D (<=
span style=3D"color:#fff;font-weight:bold">int</span>)(ptr_int_t)drwrap_get=
_retval(wrapcxt);
  LogFile &lt;&lt; <span style=3D"color:#0ff;font-weight:bold">"</span><spa=
n style=3D"color:#0ff;font-weight:bold">\t\t</span><span style=3D"color:#0f=
f;font-weight:bold">=3D 0x"</span> &lt;&lt; hex &lt;&lt; actual_read &lt;&l=
t; endl;
}

<span style=3D"color:#fff;font-weight:bold">static</span> <span style=3D"co=
lor:#fff;font-weight:bold">void</span> wrap_free_pre(<span style=3D"color:#=
fff;font-weight:bold">void</span> *wrapcxt, OUT <span style=3D"color:#fff;f=
ont-weight:bold">void</span> **user_data)
{
  <span style=3D"color:#fff;font-weight:bold">int</span> addr =3D (<span st=
yle=3D"color:#fff;font-weight:bold">int</span>)drwrap_get_arg(wrapcxt, <spa=
n style=3D"color:#ff0;font-weight:bold">0</span>);
  LogFile &lt;&lt; <span style=3D"color:#0ff;font-weight:bold">"[*] free(0x=
"</span> &lt;&lt; hex &lt;&lt; addr &lt;&lt; <span style=3D"color:#0ff;font=
-weight:bold">")"</span> &lt;&lt; endl;
}
</code></pre></div><p>Very simple, and not that different from what we have=
 seen before with <code>Pin</code>.</p>
<p>The whole <code>DynamoRIO client</code> code is below. You can also get =
the whole <code>Visual Studio</code> project from GitLab <a href=3D"https:/=
/github.com/houseofxyz/DBI/tree/master/MallocWrap">here</a>.</p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-cpp" data=
-lang=3D"cpp"><span style=3D"color:#0f0;font-weight:bold">#include</span> <=
span style=3D"color:#0f0;font-weight:bold">"stdafx.h"</span><span style=3D"=
color:#0f0;font-weight:bold">
</span><span style=3D"color:#0f0;font-weight:bold">#include</span> <span st=
yle=3D"color:#0f0;font-weight:bold">&lt;fstream&gt;</span><span style=3D"co=
lor:#0f0;font-weight:bold">
</span><span style=3D"color:#0f0;font-weight:bold">#include</span> <span st=
yle=3D"color:#0f0;font-weight:bold">"dr_api.h"</span><span style=3D"color:#=
0f0;font-weight:bold">
</span><span style=3D"color:#0f0;font-weight:bold">#include</span> <span st=
yle=3D"color:#0f0;font-weight:bold">"drmgr.h"</span><span style=3D"color:#0=
f0;font-weight:bold">
</span><span style=3D"color:#0f0;font-weight:bold">#include</span> <span st=
yle=3D"color:#0f0;font-weight:bold">"drwrap.h"</span><span style=3D"color:#=
0f0;font-weight:bold">
</span><span style=3D"color:#0f0;font-weight:bold"></span><span style=3D"co=
lor:#fff;font-weight:bold">using</span> <span style=3D"color:#fff;font-weig=
ht:bold">namespace</span> std;

<span style=3D"color:#fff;font-weight:bold">static</span> <span style=3D"co=
lor:#fff;font-weight:bold">void</span> event_exit(<span style=3D"color:#fff=
;font-weight:bold">void</span>);
<span style=3D"color:#fff;font-weight:bold">static</span> <span style=3D"co=
lor:#fff;font-weight:bold">void</span> wrap_malloc_pre(<span style=3D"color=
:#fff;font-weight:bold">void</span> *wrapcxt, OUT <span style=3D"color:#fff=
;font-weight:bold">void</span> **user_data);
<span style=3D"color:#fff;font-weight:bold">static</span> <span style=3D"co=
lor:#fff;font-weight:bold">void</span> wrap_malloc_post(<span style=3D"colo=
r:#fff;font-weight:bold">void</span> *wrapcxt, <span style=3D"color:#fff;fo=
nt-weight:bold">void</span> *user_data);
<span style=3D"color:#fff;font-weight:bold">static</span> <span style=3D"co=
lor:#fff;font-weight:bold">void</span> wrap_free_pre(<span style=3D"color:#=
fff;font-weight:bold">void</span> *wrapcxt, OUT <span style=3D"color:#fff;f=
ont-weight:bold">void</span> **user_data);

ofstream LogFile;
<span style=3D"color:#0f0;font-weight:bold">#define MALLOC_ROUTINE_NAME "ma=
lloc"
</span><span style=3D"color:#0f0;font-weight:bold">#define FREE_ROUTINE_NAM=
E "free"
</span><span style=3D"color:#0f0;font-weight:bold"></span>
<span style=3D"color:#fff;font-weight:bold">static</span> <span style=3D"co=
lor:#fff;font-weight:bold">void</span> module_load_event(<span style=3D"col=
or:#fff;font-weight:bold">void</span> *drcontext, <span style=3D"color:#fff=
;font-weight:bold">const</span> module_data_t *mod, <span style=3D"color:#f=
ff;font-weight:bold">bool</span> loaded)
{
  app_pc towrap =3D (app_pc)dr_get_proc_address(mod-&gt;handle, MALLOC_ROUT=
INE_NAME);
  <span style=3D"color:#fff;font-weight:bold">if</span> (towrap !=3D <span =
style=3D"color:#fff;font-weight:bold">NULL</span>)
  {
    <span style=3D"color:#fff;font-weight:bold">bool</span> ok =3D drwrap_w=
rap(towrap, wrap_malloc_pre, wrap_malloc_post);

    <span style=3D"color:#fff;font-weight:bold">if</span> (!ok)
    {
      dr_fprintf(STDERR, <span style=3D"color:#0ff;font-weight:bold">"[-] C=
ould not wrap 'malloc': already wrapped?</span><span style=3D"color:#0ff;fo=
nt-weight:bold">\n</span><span style=3D"color:#0ff;font-weight:bold">"</spa=
n>);
      DR_ASSERT(ok);
    }
  }

  towrap =3D (app_pc)dr_get_proc_address(mod-&gt;handle, FREE_ROUTINE_NAME)=
;
  <span style=3D"color:#fff;font-weight:bold">if</span> (towrap !=3D <span =
style=3D"color:#fff;font-weight:bold">NULL</span>)
  {
    <span style=3D"color:#fff;font-weight:bold">bool</span> ok =3D drwrap_w=
rap(towrap, wrap_free_pre, <span style=3D"color:#fff;font-weight:bold">NULL=
</span>);

    <span style=3D"color:#fff;font-weight:bold">if</span> (!ok)
    {
      dr_fprintf(STDERR, <span style=3D"color:#0ff;font-weight:bold">"[-] C=
ould not wrap 'free': already wrapped?</span><span style=3D"color:#0ff;font=
-weight:bold">\n</span><span style=3D"color:#0ff;font-weight:bold">"</span>=
);
      DR_ASSERT(ok);
    }
  }
}

DR_EXPORT <span style=3D"color:#fff;font-weight:bold">void</span> dr_client=
_main(client_id_t id, <span style=3D"color:#fff;font-weight:bold">int</span=
> argc, <span style=3D"color:#fff;font-weight:bold">const</span> <span styl=
e=3D"color:#fff;font-weight:bold">char</span> *argv[])
{
  LogFile.open(<span style=3D"color:#0ff;font-weight:bold">"memprofile.out"=
</span>);

  dr_set_client_name(<span style=3D"color:#0ff;font-weight:bold">"DynamoRIO=
 Sample Client 'wrap'"</span>, <span style=3D"color:#0ff;font-weight:bold">=
"http://dynamorio.org/issues"</span>);
  dr_log(<span style=3D"color:#fff;font-weight:bold">NULL</span>, LOG_ALL, =
<span style=3D"color:#ff0;font-weight:bold">1</span>, <span style=3D"color:=
#0ff;font-weight:bold">"Client 'wrap' initializing</span><span style=3D"col=
or:#0ff;font-weight:bold">\n</span><span style=3D"color:#0ff;font-weight:bo=
ld">"</span>);

  <span style=3D"color:#fff;font-weight:bold">if</span> (dr_is_notify_on())=
=20
  {
    dr_enable_console_printing();
    dr_fprintf(STDERR, <span style=3D"color:#0ff;font-weight:bold">"[*] Cli=
ent wrap is running</span><span style=3D"color:#0ff;font-weight:bold">\n</s=
pan><span style=3D"color:#0ff;font-weight:bold">"</span>);
  }

  drmgr_init();
  drwrap_init();
  dr_register_exit_event(event_exit);
  drmgr_register_module_load_event(module_load_event);
}

<span style=3D"color:#fff;font-weight:bold">static</span> <span style=3D"co=
lor:#fff;font-weight:bold">void</span> event_exit(<span style=3D"color:#fff=
;font-weight:bold">void</span>)
{
  drwrap_exit();
  drmgr_exit();
}

<span style=3D"color:#fff;font-weight:bold">static</span> <span style=3D"co=
lor:#fff;font-weight:bold">void</span> wrap_malloc_pre(<span style=3D"color=
:#fff;font-weight:bold">void</span> *wrapcxt, OUT <span style=3D"color:#fff=
;font-weight:bold">void</span> **user_data)
{
  <span style=3D"color:#007f7f">/* malloc(size) or HeapAlloc(heap, flags, s=
ize) */</span>
  <span style=3D"color:#007f7f">//size_t sz =3D (size_t)drwrap_get_arg(wrap=
cxt, 2); // HeapAlloc
</span><span style=3D"color:#007f7f"></span>  size_t sz =3D (size_t)drwrap_=
get_arg(wrapcxt, <span style=3D"color:#ff0;font-weight:bold">0</span>); <sp=
an style=3D"color:#007f7f">// malloc
</span><span style=3D"color:#007f7f"></span>
  LogFile &lt;&lt; <span style=3D"color:#0ff;font-weight:bold">"[*] malloc(=
"</span> &lt;&lt; dec &lt;&lt; sz &lt;&lt; <span style=3D"color:#0ff;font-w=
eight:bold">")"</span>; <span style=3D"color:#007f7f">// log the malloc siz=
e
</span><span style=3D"color:#007f7f"></span>}

<span style=3D"color:#fff;font-weight:bold">static</span> <span style=3D"co=
lor:#fff;font-weight:bold">void</span> wrap_malloc_post(<span style=3D"colo=
r:#fff;font-weight:bold">void</span> *wrapcxt, <span style=3D"color:#fff;fo=
nt-weight:bold">void</span> *user_data)
{
  <span style=3D"color:#fff;font-weight:bold">int</span> actual_read =3D (<=
span style=3D"color:#fff;font-weight:bold">int</span>)(ptr_int_t)drwrap_get=
_retval(wrapcxt);
  LogFile &lt;&lt; <span style=3D"color:#0ff;font-weight:bold">"</span><spa=
n style=3D"color:#0ff;font-weight:bold">\t\t</span><span style=3D"color:#0f=
f;font-weight:bold">=3D 0x"</span> &lt;&lt; hex &lt;&lt; actual_read &lt;&l=
t; endl;
}

<span style=3D"color:#fff;font-weight:bold">static</span> <span style=3D"co=
lor:#fff;font-weight:bold">void</span> wrap_free_pre(<span style=3D"color:#=
fff;font-weight:bold">void</span> *wrapcxt, OUT <span style=3D"color:#fff;f=
ont-weight:bold">void</span> **user_data)
{
  <span style=3D"color:#fff;font-weight:bold">int</span> addr =3D (<span st=
yle=3D"color:#fff;font-weight:bold">int</span>)drwrap_get_arg(wrapcxt, <spa=
n style=3D"color:#ff0;font-weight:bold">0</span>);
  LogFile &lt;&lt; <span style=3D"color:#0ff;font-weight:bold">"[*] free(0x=
"</span> &lt;&lt; hex &lt;&lt; addr &lt;&lt; <span style=3D"color:#0ff;font=
-weight:bold">")"</span> &lt;&lt; endl;
}
</code></pre></div><p>If you run it against our <code>ExercisePin.exe</code=
> (see the section <code>Target/Guest Program</code>) binary.</p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-fallback"=
 data-lang=3D"fallback">C:\dynamorio\bin32&gt;drrun.exe -client "C:\Users\b=
ob\Desktop\WRKDIR\MallocWrap\Release\MallocWrap.dll" 0 "" c:\Users\bob\Desk=
top\ExercisePin.exe
[*] Client wrap is running
done
C:\dynamorio\bin32&gt;type memprofile.out
[*] free(0x0)
[*] malloc(2)   =3D 0x5a35d0
[*] malloc(128)   =3D 0x5a9c50
[*] malloc(128)   =3D 0x5a9cd8
[*] malloc(128)   =3D 0x5a9d60
[*] free(0x5a9c50)
[*] free(0x5a9d60)
[*] malloc(2)   =3D 0x5a34e0
</code></pre></div><p>We can extend this program to get the exact same func=
tionality as our <code>Pintool</code> and check for memory corruption bugs =
instead of logging the calls only. I=E2=80=99ll leave that as an exercise f=
or you.</p>
<h2 id=3D"basic-frida-script-malloclogger">Basic Frida script (MallocLogger=
)</h2>
<p><code>Frida</code> is a fast-growing <code>DBI</code> framework, mainly =
used in mobile devices. I haven=E2=80=99t played much with mobile applicati=
ons in a long time (it=E2=80=99s about to change though), still, I wanted t=
o give <code>Frida</code> a try because I heard good things about it, and i=
t also supports <code>Windows</code>. The interesting part here is that <co=
de>Frida</code> injects a <code>JavaScript</code> interpreter in the target=
/guest program. So, instead of writing <code>C</code> code, we=E2=80=99ll b=
e writing <code>JavaScript</code> to instrument our program (actually, if w=
e want we can also use <code>C</code> or <code>Swift</code>). You can see t=
his as an advantage, or disadvantage. If you are a vulnerability hunter, an=
d you like to poke around browsers then this should be an advantage, I gues=
s. It=E2=80=99s actually very interesting that we are writing <code>instrum=
entation</code> code to manipulate low-level instructions by using a high-l=
evel language.</p>
<p>You can find the <code>JavaScript API</code> <a href=3D"https://www.frid=
a.re/docs/javascript-api/">here</a>. Anyway, the use case will be exactly t=
he same as the ones we saw before.</p>
<p>While the <code>instrumentation</code> code has to be written in <code>J=
avaScript</code> (well, again, that=E2=80=99s not true but let=E2=80=99s us=
e <code>JavaScript</code> because it=E2=80=99s cool), the resulting tools c=
an be written in either <code>Python</code> or <code>JavaScript</code>.</p>
<p>We=E2=80=99ll use Frida=E2=80=99s <code>Interceptor</code> to <code>trac=
e</code> all <code>malloc</code> and <code>free</code> calls for a start. T=
he target will be our <code>ExercisePin.exe</code> binary again. We=E2=80=
=99ll also try to create an output close to the one of our basic <code>Mall=
ocTracer</code> <code>Pintool</code>, and <code>MallocWrap</code> <code>Dyn=
amoRIO client</code>. Which means we=E2=80=99ll log the amount of memory re=
quested, the return address of <code>malloc</code> and the argument of <cod=
e>free</code>.</p>
<p>Here=E2=80=99s the sample <code>MallocLogger.py</code> <code>Python</cod=
e> script.</p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-cpp" data=
-lang=3D"cpp"><span style=3D"color:#0f0;font-weight:bold">#!/usr/bin/env py=
thon
</span><span style=3D"color:#0f0;font-weight:bold"></span>import frida
import sys

pid =3D frida.spawn([<span style=3D"color:#f00">'</span>ExercisePin.exe<spa=
n style=3D"color:#f00">'</span>])
session =3D frida.attach(pid)

contents =3D open(<span style=3D"color:#f00">'</span>mallocLogger.js<span s=
tyle=3D"color:#f00">'</span>).read()
script =3D session.create_script(contents)
script.load()
frida.resume(pid)
sys.stdin.read()
</code></pre></div><p>And below is the instrumentation <code>JavaScript</co=
de> file, <code>MallocLogger.js</code>.</p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-cpp" data=
-lang=3D"cpp"><span style=3D"color:#007f7f">// Interceptor for 'malloc'
</span><span style=3D"color:#007f7f"></span>Interceptor.attach(Module.findE=
xportByName(null, <span style=3D"color:#f00">'</span>malloc<span style=3D"c=
olor:#f00">'</span>),
    {
      <span style=3D"color:#007f7f">// Log before malloc
</span><span style=3D"color:#007f7f"></span>      onEnter: function (args) =
{
        console.log(<span style=3D"color:#0ff;font-weight:bold">"malloc("</=
span> + args[<span style=3D"color:#ff0;font-weight:bold">0</span>].toInt32(=
) + <span style=3D"color:#0ff;font-weight:bold">")"</span>);
      },
      <span style=3D"color:#007f7f">// Log after malloc
</span><span style=3D"color:#007f7f"></span>      onLeave: function (retval=
) {
        console.log(<span style=3D"color:#0ff;font-weight:bold">"</span><sp=
an style=3D"color:#0ff;font-weight:bold">\t\t</span><span style=3D"color:#0=
ff;font-weight:bold">=3D 0x"</span> + retval.toString(<span style=3D"color:=
#ff0;font-weight:bold">16</span>));
      }
    });

<span style=3D"color:#007f7f">// Interceptor for 'free'
</span><span style=3D"color:#007f7f"></span>Interceptor.attach(Module.findE=
xportByName(null, <span style=3D"color:#f00">'</span>free<span style=3D"col=
or:#f00">'</span>),
    {
      onEnter: function (args) {
        console.log(<span style=3D"color:#0ff;font-weight:bold">"free(0x"</=
span> + args[<span style=3D"color:#ff0;font-weight:bold">0</span>].toString=
(<span style=3D"color:#ff0;font-weight:bold">16</span>) + <span style=3D"co=
lor:#0ff;font-weight:bold">")"</span>);
      }
    });
</code></pre></div><p>If we run this <code>Python</code> script we get some=
thing like.</p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-fallback"=
 data-lang=3D"fallback">C:\Users\bob\Desktop\frida&gt;python MallocLogger.p=
y
free(0x0)
malloc(2)
                =3D 0x984268
malloc(128)
                =3D 0x9856d8
malloc(128)
                =3D 0x985760
malloc(128)
                =3D 0x9857e8
done
free(0x9856d8)
free(0x9857e8)
malloc(2)
                =3D 0x984278
</code></pre></div><p>Interestingly enough, <code>Frida</code> also comes w=
ith an utility <code>frida-trace.exe</code> that pretty much allows us to d=
o the exact same thing we did above without writing almost any code (beside=
s adding a bit more of information and tweaking the output).</p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-fallback"=
 data-lang=3D"fallback">C:\Users\bob\Desktop\frida&gt;frida-trace -i malloc=
 -i free .\ExercisePin.exe
Instrumenting functions...
malloc: Auto-generated handler at "C:\Users\bob\Desktop\frida\tmp\__handler=
s__\msvcrt.dll\malloc.js"
malloc: Auto-generated handler at "C:\Users\bob\Desktop\frida\tmp\__handler=
s__\ucrtbase.DLL\malloc.js"
free: Auto-generated handler at "C:\Users\bob\Desktop\frida\tmp\__handlers_=
_\msvcrt.dll\free.js"
free: Auto-generated handler at "C:\Users\bob\Desktop\frida\tmp\__handlers_=
_\ucrtbase.DLL\free.js"
Started tracing 4 functions. Press Ctrl+C to stop.
done
           /* TID 0x1f84 */
   125 ms  free()
   125 ms  malloc()
   125 ms  malloc()
   125 ms  malloc()
   125 ms  malloc()
   125 ms  free()
   125 ms  free()
   125 ms  malloc()
Process terminated
</code></pre></div><p>If you look at the output above you can see that some=
 <code>JavaScript</code> handlers were auto-generated. We can just tweak th=
is <code>JavaScript</code> code to make the output look as before. If we op=
en for example the file <code>__handlers__\msvcrt.dll\malloc.js</code> we=
=E2=80=99ll see something like:</p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-cpp" data=
-lang=3D"cpp"><span style=3D"color:#007f7f">/*
</span><span style=3D"color:#007f7f"> * Auto-generated by Frida. Please mod=
ify to match the signature of malloc.
</span><span style=3D"color:#007f7f"> * This stub is currently auto-generat=
ed from manpages when available.
</span><span style=3D"color:#007f7f"> *
</span><span style=3D"color:#007f7f"> * For full API reference, see: http:/=
/www.frida.re/docs/javascript-api/
</span><span style=3D"color:#007f7f"> */</span>

{
  <span style=3D"color:#007f7f">/**
</span><span style=3D"color:#007f7f">   * Called synchronously when about t=
o call malloc.
</span><span style=3D"color:#007f7f">   *
</span><span style=3D"color:#007f7f">   * @this {object} - Object allowing =
you to store state for use in onLeave.
</span><span style=3D"color:#007f7f">   * @param {function} log - Call this=
 function with a string to be presented to the user.
</span><span style=3D"color:#007f7f">   * @param {array} args - Function ar=
guments represented as an array of NativePointer objects.
</span><span style=3D"color:#007f7f">   * For example use Memory.readUtf8St=
ring(args[0]) if the first argument is a pointer to a C string encoded as U=
TF-8.
</span><span style=3D"color:#007f7f">   * It is also possible to modify arg=
uments by assigning a NativePointer object to an element of this array.
</span><span style=3D"color:#007f7f">   * @param {object} state - Object al=
lowing you to keep state across function calls.
</span><span style=3D"color:#007f7f">   * Only one JavaScript function will=
 execute at a time, so do not worry about race-conditions.
</span><span style=3D"color:#007f7f">   * However, do not use this to store=
 function arguments across onEnter/onLeave, but instead
</span><span style=3D"color:#007f7f">   * use "this" which is an object for=
 keeping state local to an invocation.
</span><span style=3D"color:#007f7f">   */</span>
  onEnter: function (log, args, state) {
    log(<span style=3D"color:#0ff;font-weight:bold">"malloc()"</span>);
  },

  <span style=3D"color:#007f7f">/**
</span><span style=3D"color:#007f7f">   * Called synchronously when about t=
o return from malloc.
</span><span style=3D"color:#007f7f">   *
</span><span style=3D"color:#007f7f">   * See onEnter for details.
</span><span style=3D"color:#007f7f">   *
</span><span style=3D"color:#007f7f">   * @this {object} - Object allowing =
you to access state stored in onEnter.
</span><span style=3D"color:#007f7f">   * @param {function} log - Call this=
 function with a string to be presented to the user.
</span><span style=3D"color:#007f7f">   * @param {NativePointer} retval - R=
eturn value represented as a NativePointer object.
</span><span style=3D"color:#007f7f">   * @param {object} state - Object al=
lowing you to keep state across function calls.
</span><span style=3D"color:#007f7f">   */</span>
  onLeave: function (log, retval, state) {
  }
}
</code></pre></div><p>We just need to tweak the <code>onEnter</code> and <c=
ode>onLeave</code> functions. For example.</p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-cpp" data=
-lang=3D"cpp"><span style=3D"color:#007f7f">/*
</span><span style=3D"color:#007f7f"> * Auto-generated by Frida. Please mod=
ify to match the signature of malloc.
</span><span style=3D"color:#007f7f"> * This stub is currently auto-generat=
ed from manpages when available.
</span><span style=3D"color:#007f7f"> *
</span><span style=3D"color:#007f7f"> * For full API reference, see: http:/=
/www.frida.re/docs/javascript-api/
</span><span style=3D"color:#007f7f"> */</span>

{
  <span style=3D"color:#007f7f">/**
</span><span style=3D"color:#007f7f">   * Called synchronously when about t=
o call malloc.
</span><span style=3D"color:#007f7f">   *
</span><span style=3D"color:#007f7f">   * @this {object} - Object allowing =
you to store state for use in onLeave.
</span><span style=3D"color:#007f7f">   * @param {function} log - Call this=
 function with a string to be presented to the user.
</span><span style=3D"color:#007f7f">   * @param {array} args - Function ar=
guments represented as an array of NativePointer objects.
</span><span style=3D"color:#007f7f">   * For example use Memory.readUtf8St=
ring(args[0]) if the first argument is a pointer to a C string encoded as U=
TF-8.
</span><span style=3D"color:#007f7f">   * It is also possible to modify arg=
uments by assigning a NativePointer object to an element of this array.
</span><span style=3D"color:#007f7f">   * @param {object} state - Object al=
lowing you to keep state across function calls.
</span><span style=3D"color:#007f7f">   * Only one JavaScript function will=
 execute at a time, so do not worry about race-conditions.
</span><span style=3D"color:#007f7f">   * However, do not use this to store=
 function arguments across onEnter/onLeave, but instead
</span><span style=3D"color:#007f7f">   * use "this" which is an object for=
 keeping state local to an invocation.
</span><span style=3D"color:#007f7f">   */</span>
  onEnter: function (log, args, state) {
    log(<span style=3D"color:#0ff;font-weight:bold">"malloc("</span> + args=
[<span style=3D"color:#ff0;font-weight:bold">0</span>].toInt32() + <span st=
yle=3D"color:#0ff;font-weight:bold">")"</span>);
  },

  <span style=3D"color:#007f7f">/**
</span><span style=3D"color:#007f7f">   * Called synchronously when about t=
o return from malloc.
</span><span style=3D"color:#007f7f">   *
</span><span style=3D"color:#007f7f">   * See onEnter for details.
</span><span style=3D"color:#007f7f">   *
</span><span style=3D"color:#007f7f">   * @this {object} - Object allowing =
you to access state stored in onEnter.
</span><span style=3D"color:#007f7f">   * @param {function} log - Call this=
 function with a string to be presented to the user.
</span><span style=3D"color:#007f7f">   * @param {NativePointer} retval - R=
eturn value represented as a NativePointer object.
</span><span style=3D"color:#007f7f">   * @param {object} state - Object al=
lowing you to keep state across function calls.
</span><span style=3D"color:#007f7f">   */</span>
  onLeave: function (log, retval, state) {
    log(<span style=3D"color:#0ff;font-weight:bold">"</span><span style=3D"=
color:#0ff;font-weight:bold">\t\t</span><span style=3D"color:#0ff;font-weig=
ht:bold">=3D 0x"</span> + retval.toString(<span style=3D"color:#ff0;font-we=
ight:bold">16</span>));
  }
}
</code></pre></div><p>Now, if we run again the exact same command as before=
 we=E2=80=99ll get the following.</p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-fallback"=
 data-lang=3D"fallback">C:\Users\bob\Desktop\frida&gt;frida-trace -i malloc=
 -i free .\ExercisePin.exe
Instrumenting functions...
malloc: Loaded handler at "C:\Users\bob\Desktop\frida\tmp\__handlers__\msvc=
rt.dll\malloc.js"
malloc: Loaded handler at "C:\Users\bob\Desktop\frida\tmp\__handlers__\ucrt=
base.DLL\malloc.js"
free: Loaded handler at "C:\Users\bob\Desktop\frida\tmp\__handlers__\msvcrt=
.dll\free.js"
free: Loaded handler at "C:\Users\bob\Desktop\frida\tmp\__handlers__\ucrtba=
se.DLL\free.js"
Started tracing 4 functions. Press Ctrl+C to stop.
done
           /* TID 0x23e4 */
    64 ms  free(0x0)
    64 ms  malloc(2)
    64 ms               =3D 0x8a42a8
    64 ms  malloc(128)
    64 ms               =3D 0x8a57a0
    64 ms  malloc(128)
    64 ms               =3D 0x8a5828
    64 ms  malloc(128)
    64 ms               =3D 0x8a58b0
    64 ms  free(0x8a57a0)
    64 ms  free(0x8a58b0)
    65 ms  malloc(2)
    65 ms               =3D 0x8a42b8
Process terminated
</code></pre></div><p>We can extend this program to get the exact same func=
tionality as our <code>Pintool</code>,  and check for memory corruption bug=
s instead of logging the calls only. I=E2=80=99ll leave that as an exercise=
 for you.</p>
<h2 id=3D"debugging">Debugging</h2>
<p>If you want to debug your <code>Pintool</code> you should use the <code>=
-pause_tool</code> switch and specify the number of seconds to wait until y=
ou attach the debugger to its process. See below how.</p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-fallback"=
 data-lang=3D"fallback">C:\pin\source\tools\MallocTracer\Release&gt;c:\pin\=
pin.exe -pause_tool 20 -t "C:\pin\source\tools\MallocTracer\Release\MallocT=
racer.dll" -- ExercisePin.exe
Pausing for 20 seconds to attach to process with pid 1568
</code></pre></div><p>For debugging of the <code>Pintool</code> I actually =
don=E2=80=99t use <code>Visual Studio</code>, I prefer to use <code>WinDbg<=
/code> because I=E2=80=99m used to it and it is awesome. Once you attach to=
 the process with <code>WinDbg</code> it=E2=80=99s very easy to set up a <c=
ode>breakpoint</code> wherever you like in your <code>Pintool</code>. Below=
 is just a simple example of setting a <code>breakpoint</code> in the <code=
>main</code> function of my <code>Pintool</code>.</p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-cpp" data=
-lang=3D"cpp">Microsoft (R) Windows Debugger Version <span style=3D"color:#=
ff0;font-weight:bold">10.0.17134.12</span> X86
Copyright (c) Microsoft Corporation. All rights reserved.

*** wait with pending attach
Symbol search path is: srv*
Executable search path is:=20
ModLoad: <span style=3D"color:#ff0;font-weight:bold">000</span><span style=
=3D"color:#ff0;font-weight:bold">80000</span> <span style=3D"color:#ff0;fon=
t-weight:bold">000</span><span style=3D"color:#ff0;font-weight:bold">87000<=
/span>   C:<span style=3D"color:#f00">\</span>pin<span style=3D"color:#f00"=
>\</span>source<span style=3D"color:#f00">\</span>tools<span style=3D"color=
:#f00">\</span>MallocTracer<span style=3D"color:#f00">\</span>Release<span =
style=3D"color:#f00">\</span>ExercisePin.exe
ModLoad: <span style=3D"color:#ff0;font-weight:bold">77800000</span> <span =
style=3D"color:#ff0;font-weight:bold">77980000</span>   C:<span style=3D"co=
lor:#f00">\</span>Windows<span style=3D"color:#f00">\</span>SysWOW64<span s=
tyle=3D"color:#f00">\</span>ntdll.dll
ModLoad: <span style=3D"color:#ff0;font-weight:bold">769</span>d0000 <span =
style=3D"color:#ff0;font-weight:bold">76</span>ae0000   C:<span style=3D"co=
lor:#f00">\</span>Windows<span style=3D"color:#f00">\</span>syswow64<span s=
tyle=3D"color:#f00">\</span>kernel32.dll
ModLoad: <span style=3D"color:#ff0;font-weight:bold">76</span>b50000 <span =
style=3D"color:#ff0;font-weight:bold">76</span>b97000   C:<span style=3D"co=
lor:#f00">\</span>Windows<span style=3D"color:#f00">\</span>syswow64<span s=
tyle=3D"color:#f00">\</span>KERNELBASE.dll
Break-in sent, waiting <span style=3D"color:#ff0;font-weight:bold">30</span=
> seconds...
ModLoad: <span style=3D"color:#ff0;font-weight:bold">54</span>c20000 <span =
style=3D"color:#ff0;font-weight:bold">54f</span><span style=3D"color:#ff0;f=
ont-weight:bold">93000</span>   MallocTracer.dll
It is now possible to set breakpoints in Pin tool.
Use <span style=3D"color:#0ff;font-weight:bold">"Go"</span> command (F5) to=
 proceed.
(<span style=3D"color:#ff0;font-weight:bold">620.12</span>c0): Break instru=
ction exception - code <span style=3D"color:#ff0;font-weight:bold">80000003=
</span> (first chance)
eax=3D<span style=3D"color:#ff0;font-weight:bold">00000000</span> ebx=3D<sp=
an style=3D"color:#ff0;font-weight:bold">53833</span>c8c ecx=3D<span style=
=3D"color:#ff0;font-weight:bold">76</span>b6388e edx=3D<span style=3D"color=
:#ff0;font-weight:bold">00000000</span> esi=3D<span style=3D"color:#ff0;fon=
t-weight:bold">53833</span>c8c edi=3D<span style=3D"color:#ff0;font-weight:=
bold">53833</span>cb8
eip=3D<span style=3D"color:#ff0;font-weight:bold">76</span>b6338d esp=3D<sp=
an style=3D"color:#ff0;font-weight:bold">01</span>ad1930 ebp=3D<span style=
=3D"color:#ff0;font-weight:bold">0042e7</span>e4 iopl=3D<span style=3D"colo=
r:#ff0;font-weight:bold">0</span>         nv up ei pl zr na pe nc
cs=3D<span style=3D"color:#ff0;font-weight:bold">0023</span>  ss=3D<span st=
yle=3D"color:#ff0;font-weight:bold">002</span>b  ds=3D<span style=3D"color:=
#ff0;font-weight:bold">002</span>b  es=3D<span style=3D"color:#ff0;font-wei=
ght:bold">002</span>b  fs=3D<span style=3D"color:#ff0;font-weight:bold">005=
3</span>  gs=3D<span style=3D"color:#ff0;font-weight:bold">002</span>b     =
        efl=3D<span style=3D"color:#ff0;font-weight:bold">00000246</span>
KERNELBASE!DebugBreak+<span style=3D"color:#ff0;font-weight:bold">0x2</span=
>:
<span style=3D"color:#ff0;font-weight:bold">76</span>b6338d cc             =
 <span style=3D"color:#fff;font-weight:bold">int</span>     <span style=3D"=
color:#ff0;font-weight:bold">3</span>
<span style=3D"color:#ff0;font-weight:bold">0</span>:<span style=3D"color:#=
ff0;font-weight:bold">000</span>&gt; lmf
start    end        module name
<span style=3D"color:#ff0;font-weight:bold">000</span><span style=3D"color:=
#ff0;font-weight:bold">80000</span> <span style=3D"color:#ff0;font-weight:b=
old">000</span><span style=3D"color:#ff0;font-weight:bold">87000</span>   E=
xercisePin C:<span style=3D"color:#f00">\</span>pin<span style=3D"color:#f0=
0">\</span>source<span style=3D"color:#f00">\</span>tools<span style=3D"col=
or:#f00">\</span>MallocTracer<span style=3D"color:#f00">\</span>Release<spa=
n style=3D"color:#f00">\</span>ExercisePin.exe
<span style=3D"color:#ff0;font-weight:bold">54</span>c20000 <span style=3D"=
color:#ff0;font-weight:bold">54f</span><span style=3D"color:#ff0;font-weigh=
t:bold">93000</span>   MallocTracer MallocTracer.dll
<span style=3D"color:#ff0;font-weight:bold">769</span>d0000 <span style=3D"=
color:#ff0;font-weight:bold">76</span>ae0000   kernel32 C:<span style=3D"co=
lor:#f00">\</span>Windows<span style=3D"color:#f00">\</span>syswow64<span s=
tyle=3D"color:#f00">\</span>kernel32.dll
<span style=3D"color:#ff0;font-weight:bold">76</span>b50000 <span style=3D"=
color:#ff0;font-weight:bold">76</span>b97000   KERNELBASE C:<span style=3D"=
color:#f00">\</span>Windows<span style=3D"color:#f00">\</span>syswow64<span=
 style=3D"color:#f00">\</span>KERNELBASE.dll
<span style=3D"color:#ff0;font-weight:bold">77800000</span> <span style=3D"=
color:#ff0;font-weight:bold">77980000</span>   ntdll    C:<span style=3D"co=
lor:#f00">\</span>Windows<span style=3D"color:#f00">\</span>SysWOW64<span s=
tyle=3D"color:#f00">\</span>ntdll.dll
<span style=3D"color:#ff0;font-weight:bold">0</span>:<span style=3D"color:#=
ff0;font-weight:bold">000</span>&gt; lmDvmMallocTracer
Browse full module list
start    end        module name
<span style=3D"color:#ff0;font-weight:bold">54</span>c20000 <span style=3D"=
color:#ff0;font-weight:bold">54f</span><span style=3D"color:#ff0;font-weigh=
t:bold">93000</span>   MallocTracer   (deferred)            =20
    Image path: MallocTracer.dll
    Image name: MallocTracer.dll
    Browse all global symbols  functions  data
    Timestamp:        Sat Jun <span style=3D"color:#ff0;font-weight:bold">3=
0</span> <span style=3D"color:#ff0;font-weight:bold">14</span>:<span style=
=3D"color:#ff0;font-weight:bold">28</span>:<span style=3D"color:#ff0;font-w=
eight:bold">14</span> <span style=3D"color:#ff0;font-weight:bold">2018</spa=
n> (<span style=3D"color:#ff0;font-weight:bold">5</span>B37F5EE)
    CheckSum:         <span style=3D"color:#ff0;font-weight:bold">00000000<=
/span>
    ImageSize:        <span style=3D"color:#ff0;font-weight:bold">00373000<=
/span>
    Translations:     <span style=3D"color:#ff0;font-weight:bold">0000.04</=
span>b0 <span style=3D"color:#ff0;font-weight:bold">0000.04e4</span> <span =
style=3D"color:#ff0;font-weight:bold">0409.04</span>b0 <span style=3D"color=
:#ff0;font-weight:bold">0409.04e4</span>
    Information from resource tables:
<span style=3D"color:#ff0;font-weight:bold">0</span>:<span style=3D"color:#=
ff0;font-weight:bold">000</span>&gt; x /D /f MallocTracer!a*
 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z

*** WARNING: Unable to verify checksum <span style=3D"color:#fff;font-weigh=
t:bold">for</span> MallocTracer.dll
<span style=3D"color:#ff0;font-weight:bold">54</span>c549b8          Malloc=
Tracer!ASM_pin_wow64_gate (&lt;no parameter info&gt;)
<span style=3D"color:#ff0;font-weight:bold">54</span>c5483c          Malloc=
Tracer!ATOMIC_Increment16 (&lt;no parameter info&gt;)
<span style=3D"color:#ff0;font-weight:bold">54</span>c547d0          Malloc=
Tracer!ATOMIC_Swap8 (&lt;no parameter info&gt;)
<span style=3D"color:#ff0;font-weight:bold">54</span>c54854          Malloc=
Tracer!ATOMIC_Increment32 (&lt;no parameter info&gt;)
<span style=3D"color:#ff0;font-weight:bold">54e28</span>b64          Malloc=
Tracer!ADDRINT_AtomicInc (&lt;no parameter info&gt;)
<span style=3D"color:#ff0;font-weight:bold">54</span>c35e20          Malloc=
Tracer!atexit (&lt;no parameter info&gt;)
<span style=3D"color:#ff0;font-weight:bold">54</span>c547fc          Malloc=
Tracer!ATOMIC_Swap32 (&lt;no parameter info&gt;)
<span style=3D"color:#ff0;font-weight:bold">54</span>c54740          Malloc=
Tracer!ATOMIC_SpinDelay (&lt;no parameter info&gt;)
<span style=3D"color:#ff0;font-weight:bold">54</span>c533c0          Malloc=
Tracer!ATOMIC::LIFO_PTR&lt;LEVEL_BASE::SWMALLOC::FREE_LIST_ELEMENT,<span st=
yle=3D"color:#ff0;font-weight:bold">3</span>,LEVEL_BASE::ATOMIC_STATS&gt;::=
PopInternal (&lt;no parameter info&gt;)
<span style=3D"color:#ff0;font-weight:bold">54e1</span>a2b0          Malloc=
Tracer!abort (&lt;no parameter info&gt;)
<span style=3D"color:#ff0;font-weight:bold">54</span>c54810          Malloc=
Tracer!ATOMIC_Copy64 (&lt;no parameter info&gt;)
<span style=3D"color:#ff0;font-weight:bold">54</span>c547e4          Malloc=
Tracer!ATOMIC_Swap16 (&lt;no parameter info&gt;)
<span style=3D"color:#ff0;font-weight:bold">54</span>c41710          Malloc=
Tracer!ATOMIC::LIFO_CTR&lt;ATOMIC::FIXED_LIFO&lt;LEVEL_BASE::LOCK_COMMAND *=
,<span style=3D"color:#ff0;font-weight:bold">1</span>,<span style=3D"color:=
#ff0;font-weight:bold">32</span>,ATOMIC::NULLSTATS&gt;::ELEMENT,ATOMIC::FIX=
ED_LIFO&lt;LEVEL_BASE::LOCK_COMMAND *,<span style=3D"color:#ff0;font-weight=
:bold">1</span>,<span style=3D"color:#ff0;font-weight:bold">32</span>,ATOMI=
C::NULLSTATS&gt;::ELEMENT_HEAP,<span style=3D"color:#ff0;font-weight:bold">=
1</span>,<span style=3D"color:#ff0;font-weight:bold">32</span>,<span style=
=3D"color:#fff;font-weight:bold">unsigned</span> <span style=3D"color:#fff;=
font-weight:bold">__int64</span>,ATOMIC::NULLSTATS&gt;::Pop (&lt;no paramet=
er info&gt;)
<span style=3D"color:#ff0;font-weight:bold">54</span>c54824          Malloc=
Tracer!ATOMIC_Increment8 (&lt;no parameter info&gt;)
<span style=3D"color:#ff0;font-weight:bold">54</span>c549bb          Malloc=
Tracer!ASM_pin_wow64_gate_end (&lt;no parameter info&gt;)
<span style=3D"color:#ff0;font-weight:bold">54</span>c5478c          Malloc=
Tracer!ATOMIC_CompareAndSwap32 (&lt;no parameter info&gt;)
<span style=3D"color:#ff0;font-weight:bold">54</span>c54750          Malloc=
Tracer!ATOMIC_CompareAndSwap8 (&lt;no parameter info&gt;)
<span style=3D"color:#ff0;font-weight:bold">54</span>c41820          Malloc=
Tracer!ATOMIC::LIFO_CTR&lt;ATOMIC::FIXED_LIFO&lt;LEVEL_BASE::LOCK_COMMAND *=
,<span style=3D"color:#ff0;font-weight:bold">1</span>,<span style=3D"color:=
#ff0;font-weight:bold">32</span>,ATOMIC::NULLSTATS&gt;::ELEMENT,ATOMIC::FIX=
ED_LIFO&lt;LEVEL_BASE::LOCK_COMMAND *,<span style=3D"color:#ff0;font-weight=
:bold">1</span>,<span style=3D"color:#ff0;font-weight:bold">32</span>,ATOMI=
C::NULLSTATS&gt;::ELEMENT_HEAP,<span style=3D"color:#ff0;font-weight:bold">=
1</span>,<span style=3D"color:#ff0;font-weight:bold">32</span>,<span style=
=3D"color:#fff;font-weight:bold">unsigned</span> <span style=3D"color:#fff;=
font-weight:bold">__int64</span>,ATOMIC::NULLSTATS&gt;::Push (&lt;no parame=
ter info&gt;)
<span style=3D"color:#ff0;font-weight:bold">54</span>c535a0          Malloc=
Tracer!ATOMIC::IDSET&lt;<span style=3D"color:#ff0;font-weight:bold">7</span=
>,LEVEL_BASE::ATOMIC_STATS&gt;::ReleaseID (&lt;no parameter info&gt;)
<span style=3D"color:#ff0;font-weight:bold">54</span>c547a8          Malloc=
Tracer!ATOMIC_CompareAndSwap64 (&lt;no parameter info&gt;)
<span style=3D"color:#ff0;font-weight:bold">54</span>c3e660          Malloc=
Tracer!ATOMIC::EXPONENTIAL_BACKOFF&lt;LEVEL_BASE::ATOMIC_STATS&gt;::~EXPONE=
NTIAL_BACKOFF&lt;LEVEL_BASE::ATOMIC_STATS&gt; (&lt;no parameter info&gt;)
<span style=3D"color:#ff0;font-weight:bold">54</span>c5476c          Malloc=
Tracer!ATOMIC_CompareAndSwap16 (&lt;no parameter info&gt;)
<span style=3D"color:#ff0;font-weight:bold">0</span>:<span style=3D"color:#=
ff0;font-weight:bold">000</span>&gt; x /D /f MallocTracer!m*
 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z

<span style=3D"color:#ff0;font-weight:bold">54e21</span>e20          Malloc=
Tracer!mbsinit (&lt;no parameter info&gt;)
<span style=3D"color:#ff0;font-weight:bold">54</span>c6e450          Malloc=
Tracer!mmap (&lt;no parameter info&gt;)
<span style=3D"color:#ff0;font-weight:bold">54</span>c3bb40          Malloc=
Tracer!malloc (&lt;no parameter info&gt;)
<span style=3D"color:#ff0;font-weight:bold">54e21</span>db0          Malloc=
Tracer!memchr (&lt;no parameter info&gt;)
<span style=3D"color:#ff0;font-weight:bold">54e21</span>e00          Malloc=
Tracer!mbrtowc (&lt;no parameter info&gt;)
<span style=3D"color:#ff0;font-weight:bold">54e26500</span>          Malloc=
Tracer!mbrlen (&lt;no parameter info&gt;)
<span style=3D"color:#ff0;font-weight:bold">54e21</span>e40          Malloc=
Tracer!mbsnrtowcs (&lt;no parameter info&gt;)
<span style=3D"color:#ff0;font-weight:bold">54e261</span>b0          Malloc=
Tracer!mbrtoc32 (&lt;no parameter info&gt;)
<span style=3D"color:#ff0;font-weight:bold">54</span>c38730          Malloc=
Tracer!main (&lt;no parameter info&gt;)
<span style=3D"color:#ff0;font-weight:bold">54e1</span>a2f0          Malloc=
Tracer!memset (&lt;no parameter info&gt;)
<span style=3D"color:#ff0;font-weight:bold">54e26410</span>          Malloc=
Tracer!mbstate_get_byte (&lt;no parameter info&gt;)
<span style=3D"color:#ff0;font-weight:bold">54e22010</span>          Malloc=
Tracer!mbsrtowcs (&lt;no parameter info&gt;)
<span style=3D"color:#ff0;font-weight:bold">54e1</span>a1a0          Malloc=
Tracer!memmove (&lt;no parameter info&gt;)
<span style=3D"color:#ff0;font-weight:bold">54e263</span>e0          Malloc=
Tracer!mbstate_bytes_so_far (&lt;no parameter info&gt;)
<span style=3D"color:#ff0;font-weight:bold">54e1</span>a2c0          Malloc=
Tracer!memcpy (&lt;no parameter info&gt;)
<span style=3D"color:#ff0;font-weight:bold">54</span>c6e480          Malloc=
Tracer!munmap (&lt;no parameter info&gt;)
<span style=3D"color:#ff0;font-weight:bold">54e26420</span>          Malloc=
Tracer!mbstate_set_byte (&lt;no parameter info&gt;)
<span style=3D"color:#ff0;font-weight:bold">0</span>:<span style=3D"color:#=
ff0;font-weight:bold">000</span>&gt; bp <span style=3D"color:#ff0;font-weig=
ht:bold">54</span>c38730
<span style=3D"color:#ff0;font-weight:bold">0</span>:<span style=3D"color:#=
ff0;font-weight:bold">000</span>&gt; g
Breakpoint <span style=3D"color:#ff0;font-weight:bold">0</span> hit
eax=3D<span style=3D"color:#ff0;font-weight:bold">53833</span>cb8 ebx=3D<sp=
an style=3D"color:#ff0;font-weight:bold">54f</span><span style=3D"color:#ff=
0;font-weight:bold">64000</span> ecx=3D<span style=3D"color:#ff0;font-weigh=
t:bold">00000000</span> edx=3D<span style=3D"color:#ff0;font-weight:bold">5=
4f</span><span style=3D"color:#ff0;font-weight:bold">356</span>c0 esi=3D<sp=
an style=3D"color:#ff0;font-weight:bold">54f</span><span style=3D"color:#ff=
0;font-weight:bold">6500</span>a edi=3D<span style=3D"color:#ff0;font-weigh=
t:bold">54f</span><span style=3D"color:#ff0;font-weight:bold">65000</span>
eip=3D<span style=3D"color:#ff0;font-weight:bold">54</span>c38730 esp=3D<sp=
an style=3D"color:#ff0;font-weight:bold">01</span>ad19f4 ebp=3D<span style=
=3D"color:#ff0;font-weight:bold">53833</span>c8c iopl=3D<span style=3D"colo=
r:#ff0;font-weight:bold">0</span>         nv up ei pl zr na pe nc
cs=3D<span style=3D"color:#ff0;font-weight:bold">0023</span>  ss=3D<span st=
yle=3D"color:#ff0;font-weight:bold">002</span>b  ds=3D<span style=3D"color:=
#ff0;font-weight:bold">002</span>b  es=3D<span style=3D"color:#ff0;font-wei=
ght:bold">002</span>b  fs=3D<span style=3D"color:#ff0;font-weight:bold">005=
3</span>  gs=3D<span style=3D"color:#ff0;font-weight:bold">002</span>b     =
        efl=3D<span style=3D"color:#ff0;font-weight:bold">00000246</span>
MallocTracer!main:
<span style=3D"color:#ff0;font-weight:bold">54</span>c38730 <span style=3D"=
color:#ff0;font-weight:bold">55</span>              push    ebp
</code></pre></div><p>For <code>DynamoRIO</code> I=E2=80=99ll just point yo=
u to the official documentation since the debugging process can be a bit mo=
re tricky. Check the documentation <a href=3D"https://github.com/DynamoRIO/=
dynamorio/wiki/Debugging">here</a>.</p>
<h2 id=3D"pintool-winmalloctracer">Pintool (WinMallocTracer)</h2>
<p>As mentioned in the beginning, this post is all about <code>Windows</cod=
e>. Which means it doesn=E2=80=99t really make sense to be tracking <code>m=
alloc</code>, and/or <code>free</code>. If we want to play with =E2=80=9Cre=
al=E2=80=9D <code>Windows</code> applications we need to <code>trace</code>=
 the <code>Windows</code> <code>Heap</code> family of functions.</p>
<p>It=E2=80=99s a good time to look again at the diagram shown before that =
illustrates the relationship of <code>Windows API</code> calls used to allo=
cate process memory (from the book <a href=3D"https://www.amazon.co.uk/Art-=
Memory-Forensics-Detecting-Malware/dp/1118825098">The Art of Memory Forensi=
cs</a>).</p>
<p>If we want to make sure we=E2=80=99ll always =E2=80=9Csee=E2=80=9D the m=
emory allocations performed by <code>Windows</code> applications, we should=
 be looking for <a href=3D"https://docs.microsoft.com/en-us/windows-hardwar=
e/drivers/ddi/content/ntifs/nf-ntifs-rtlallocateheap">RtlAllocateHeap</a>, =
<a href=3D"https://undocumented.ntinternals.net/index.html?page=3DUserMode%=
2FUndocumented%20Functions%2FMemory%20Management%2FHeap%20Memory%2FRtlReAll=
ocateHeap.html">RtlReAllocateHeap</a>, <a href=3D"https://docs.microsoft.co=
m/en-us/windows-hardware/drivers/ddi/content/ntifs/nf-ntifs-rtlfreeheap">Rt=
lFreeHeap</a>, <a href=3D"https://msdn.microsoft.com/en-us/library/windows/=
desktop/aa366890(v=3Dvs.85).aspx">VirtualAllocEx</a>, and <a href=3D"https:=
//msdn.microsoft.com/en-us/library/windows/desktop/aa366894(v=3Dvs.85).aspx=
">VirtualFreeEx</a>.</p>
<p>The <code>Pintool</code> below looks exactly at these functions. If you =
play a bit with multiple applications you=E2=80=99ll realize that to accomp=
lish =E2=80=9Cour=E2=80=9D goal of tracking memory allocations we=E2=80=99l=
l face a lot of challenges. The code below tries to overcome some of them.<=
/p>
<p>I won=E2=80=99t go into detail explaining the <code>API</code> calls use=
d as I did before. Mainly because they are mostly the same. I=E2=80=99ll le=
ave the code here and you can go through it. After I simply mention some of=
 the main differences when compared to the basic <code>Pintool</code> prese=
nted before.</p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-cpp" data=
-lang=3D"cpp"><span style=3D"color:#0f0;font-weight:bold">#include</span> <=
span style=3D"color:#0f0;font-weight:bold">"pin.h"</span><span style=3D"col=
or:#0f0;font-weight:bold">
</span><span style=3D"color:#0f0;font-weight:bold">#include</span> <span st=
yle=3D"color:#0f0;font-weight:bold">&lt;iostream&gt;</span><span style=3D"c=
olor:#0f0;font-weight:bold">
</span><span style=3D"color:#0f0;font-weight:bold">#include</span> <span st=
yle=3D"color:#0f0;font-weight:bold">&lt;fstream&gt;</span><span style=3D"co=
lor:#0f0;font-weight:bold">
</span><span style=3D"color:#0f0;font-weight:bold">#include</span> <span st=
yle=3D"color:#0f0;font-weight:bold">&lt;map&gt;</span><span style=3D"color:=
#0f0;font-weight:bold">
</span><span style=3D"color:#0f0;font-weight:bold"></span>
map&lt;ADDRINT, <span style=3D"color:#fff;font-weight:bold">bool</span>&gt;=
 MallocMap;
ofstream LogFile;
KNOB&lt;string&gt; LogFileName(KNOB_MODE_WRITEONCE, <span style=3D"color:#0=
ff;font-weight:bold">"pintool"</span>, <span style=3D"color:#0ff;font-weigh=
t:bold">"o"</span>, <span style=3D"color:#0ff;font-weight:bold">"memprofile=
.out"</span>, <span style=3D"color:#0ff;font-weight:bold">"Memory trace fil=
e name"</span>);
KNOB&lt;string&gt; EntryPoint(KNOB_MODE_WRITEONCE, <span style=3D"color:#0f=
f;font-weight:bold">"pintool"</span>, <span style=3D"color:#0ff;font-weight=
:bold">"entrypoint"</span>, <span style=3D"color:#0ff;font-weight:bold">"ma=
in"</span>, <span style=3D"color:#0ff;font-weight:bold">"Guest entry-point =
function"</span>);
KNOB&lt;BOOL&gt; EnumSymbols(KNOB_MODE_WRITEONCE, <span style=3D"color:#0ff=
;font-weight:bold">"pintool"</span>, <span style=3D"color:#0ff;font-weight:=
bold">"symbols"</span>, <span style=3D"color:#0ff;font-weight:bold">"0"</sp=
an>, <span style=3D"color:#0ff;font-weight:bold">"List Symbols"</span>);
BOOL start_trace =3D <span style=3D"color:#fff;font-weight:bold">false</spa=
n>;

VOID LogBeforeVirtualAlloc(ADDRINT size)
{
  <span style=3D"color:#fff;font-weight:bold">if</span> (!start_trace)
    <span style=3D"color:#fff;font-weight:bold">return</span>;

  LogFile &lt;&lt; <span style=3D"color:#0ff;font-weight:bold">"[*] Virtual=
AllocEx("</span> &lt;&lt; dec &lt;&lt; size &lt;&lt; <span style=3D"color:#=
0ff;font-weight:bold">")"</span>;
}

VOID LogAfterVirtualAlloc(ADDRINT addr)
{
  <span style=3D"color:#fff;font-weight:bold">if</span> (!start_trace)
    <span style=3D"color:#fff;font-weight:bold">return</span>;

  <span style=3D"color:#fff;font-weight:bold">if</span> (addr =3D=3D <span =
style=3D"color:#fff;font-weight:bold">NULL</span>)
  {
    cerr &lt;&lt; <span style=3D"color:#0ff;font-weight:bold">"[-] Error: V=
irtualAllocEx() return value was NULL."</span>;
    <span style=3D"color:#fff;font-weight:bold">return</span>;
  }

  map&lt;ADDRINT, <span style=3D"color:#fff;font-weight:bold">bool</span>&g=
t;::iterator it =3D MallocMap.find(addr);

  <span style=3D"color:#fff;font-weight:bold">if</span> (it !=3D MallocMap.=
end())
  {
    <span style=3D"color:#fff;font-weight:bold">if</span> (it-&gt;second)
      it-&gt;second =3D <span style=3D"color:#fff;font-weight:bold">false</=
span>;
    <span style=3D"color:#fff;font-weight:bold">else</span>
      cerr &lt;&lt; <span style=3D"color:#0ff;font-weight:bold">"[-] Error:=
 allocating memory not freed!?!"</span> &lt;&lt; endl;
  }
  <span style=3D"color:#fff;font-weight:bold">else</span>
  {
    MallocMap.insert(pair&lt;ADDRINT, <span style=3D"color:#fff;font-weight=
:bold">bool</span>&gt;(addr, <span style=3D"color:#fff;font-weight:bold">fa=
lse</span>));
    LogFile &lt;&lt; <span style=3D"color:#0ff;font-weight:bold">"</span><s=
pan style=3D"color:#0ff;font-weight:bold">\t\t</span><span style=3D"color:#=
0ff;font-weight:bold">=3D 0x"</span> &lt;&lt; hex &lt;&lt; addr &lt;&lt; en=
dl;
  }
}

VOID LogBeforeVirtualFree(ADDRINT addr)
{
  <span style=3D"color:#fff;font-weight:bold">if</span> (!start_trace)
    <span style=3D"color:#fff;font-weight:bold">return</span>;

  map&lt;ADDRINT, <span style=3D"color:#fff;font-weight:bold">bool</span>&g=
t;::iterator it =3D MallocMap.find(addr);

  <span style=3D"color:#fff;font-weight:bold">if</span> (it !=3D MallocMap.=
end())
  {
    <span style=3D"color:#fff;font-weight:bold">if</span> (it-&gt;second)
      LogFile &lt;&lt; <span style=3D"color:#0ff;font-weight:bold">"[*] Mem=
ory at address 0x"</span> &lt;&lt; hex &lt;&lt; addr &lt;&lt; <span style=
=3D"color:#0ff;font-weight:bold">" has been freed more than once (Double Fr=
ee)."</span> &lt;&lt; endl;
    <span style=3D"color:#fff;font-weight:bold">else</span>
    {
      it-&gt;second =3D <span style=3D"color:#fff;font-weight:bold">true</s=
pan>;    <span style=3D"color:#007f7f">// Mark it as freed
</span><span style=3D"color:#007f7f"></span>      LogFile &lt;&lt; <span st=
yle=3D"color:#0ff;font-weight:bold">"[*] VirtualFreeEx(0x"</span> &lt;&lt; =
hex &lt;&lt; addr &lt;&lt; <span style=3D"color:#0ff;font-weight:bold">")"<=
/span> &lt;&lt; endl;
    }
  }
  <span style=3D"color:#fff;font-weight:bold">else</span>
    LogFile &lt;&lt; <span style=3D"color:#0ff;font-weight:bold">"[*] Freei=
ng unallocated memory at address 0x"</span> &lt;&lt; hex &lt;&lt; addr &lt;=
&lt; <span style=3D"color:#0ff;font-weight:bold">"."</span> &lt;&lt; endl;
}

VOID LogBeforeReAlloc(ADDRINT freed_addr, ADDRINT size)
{
  <span style=3D"color:#fff;font-weight:bold">if</span> (!start_trace)
    <span style=3D"color:#fff;font-weight:bold">return</span>;

  <span style=3D"color:#007f7f">// mark freed_addr as free
</span><span style=3D"color:#007f7f"></span>  map&lt;ADDRINT, <span style=
=3D"color:#fff;font-weight:bold">bool</span>&gt;::iterator it =3D MallocMap=
.find(freed_addr);

  <span style=3D"color:#fff;font-weight:bold">if</span> (it !=3D MallocMap.=
end())
  {
    it-&gt;second =3D <span style=3D"color:#fff;font-weight:bold">true</spa=
n>;
    LogFile &lt;&lt; <span style=3D"color:#0ff;font-weight:bold">"[*] RtlHe=
apfree(0x"</span> &lt;&lt; hex &lt;&lt; freed_addr &lt;&lt; <span style=3D"=
color:#0ff;font-weight:bold">") from RtlHeapRealloc()"</span> &lt;&lt; endl=
;
  }
  <span style=3D"color:#fff;font-weight:bold">else</span>
    LogFile &lt;&lt; <span style=3D"color:#0ff;font-weight:bold">"[-] RtlHe=
apRealloc could not find addr to free??? - "</span> &lt;&lt; freed_addr &lt=
;&lt; endl;

  LogFile &lt;&lt; <span style=3D"color:#0ff;font-weight:bold">"[*] RtlHeap=
ReAlloc("</span> &lt;&lt; dec &lt;&lt; size &lt;&lt; <span style=3D"color:#=
0ff;font-weight:bold">")"</span>;
}

VOID LogAfterReAlloc(ADDRINT addr)
{
  <span style=3D"color:#fff;font-weight:bold">if</span> (!start_trace)
    <span style=3D"color:#fff;font-weight:bold">return</span>;

  <span style=3D"color:#fff;font-weight:bold">if</span> (addr =3D=3D <span =
style=3D"color:#fff;font-weight:bold">NULL</span>)
    <span style=3D"color:#fff;font-weight:bold">return</span>;

  map&lt;ADDRINT, <span style=3D"color:#fff;font-weight:bold">bool</span>&g=
t;::iterator it =3D MallocMap.find(addr);

  <span style=3D"color:#fff;font-weight:bold">if</span> (it !=3D MallocMap.=
end())
  {
    <span style=3D"color:#fff;font-weight:bold">if</span> (it-&gt;second)
      it-&gt;second =3D <span style=3D"color:#fff;font-weight:bold">false</=
span>;
    <span style=3D"color:#fff;font-weight:bold">else</span>
      <span style=3D"color:#007f7f">// it already exists because of the Hea=
pAlloc, we don't need to insert... just log it
</span><span style=3D"color:#007f7f"></span>      LogFile &lt;&lt; <span st=
yle=3D"color:#0ff;font-weight:bold">"</span><span style=3D"color:#0ff;font-=
weight:bold">\t\t</span><span style=3D"color:#0ff;font-weight:bold">=3D 0x"=
</span> &lt;&lt; hex &lt;&lt; addr &lt;&lt; endl;
  }
}

VOID LogBeforeMalloc(ADDRINT size)
{
  <span style=3D"color:#fff;font-weight:bold">if</span> (!start_trace)
    <span style=3D"color:#fff;font-weight:bold">return</span>;

  LogFile &lt;&lt; <span style=3D"color:#0ff;font-weight:bold">"[*] RtlAllo=
cateHeap("</span> &lt;&lt; dec &lt;&lt; size &lt;&lt; <span style=3D"color:=
#0ff;font-weight:bold">")"</span>;
}

VOID LogAfterMalloc(ADDRINT addr)
{
  <span style=3D"color:#fff;font-weight:bold">if</span> (!start_trace)
    <span style=3D"color:#fff;font-weight:bold">return</span>;

  <span style=3D"color:#fff;font-weight:bold">if</span> (addr =3D=3D <span =
style=3D"color:#fff;font-weight:bold">NULL</span>)
  {
    cerr &lt;&lt; <span style=3D"color:#0ff;font-weight:bold">"[-] Error: R=
tlAllocateHeap() return value was NULL."</span>;
    <span style=3D"color:#fff;font-weight:bold">return</span>;
  }

  map&lt;ADDRINT, <span style=3D"color:#fff;font-weight:bold">bool</span>&g=
t;::iterator it =3D MallocMap.find(addr);

  <span style=3D"color:#fff;font-weight:bold">if</span> (it !=3D MallocMap.=
end())
  {
    <span style=3D"color:#fff;font-weight:bold">if</span> (it-&gt;second)
      it-&gt;second =3D <span style=3D"color:#fff;font-weight:bold">false</=
span>;
    <span style=3D"color:#fff;font-weight:bold">else</span>
      cerr &lt;&lt; <span style=3D"color:#0ff;font-weight:bold">"[-] Error:=
 allocating memory not freed!?!"</span> &lt;&lt; endl;
  }
  <span style=3D"color:#fff;font-weight:bold">else</span>
  {
    MallocMap.insert(pair&lt;ADDRINT, <span style=3D"color:#fff;font-weight=
:bold">bool</span>&gt;(addr, <span style=3D"color:#fff;font-weight:bold">fa=
lse</span>));
    LogFile &lt;&lt; <span style=3D"color:#0ff;font-weight:bold">"</span><s=
pan style=3D"color:#0ff;font-weight:bold">\t\t</span><span style=3D"color:#=
0ff;font-weight:bold">=3D 0x"</span> &lt;&lt; hex &lt;&lt; addr &lt;&lt; en=
dl;
  }
}

VOID LogFree(ADDRINT addr)
{
  <span style=3D"color:#fff;font-weight:bold">if</span> (!start_trace)
    <span style=3D"color:#fff;font-weight:bold">return</span>;

  map&lt;ADDRINT, <span style=3D"color:#fff;font-weight:bold">bool</span>&g=
t;::iterator it =3D MallocMap.find(addr);

  <span style=3D"color:#fff;font-weight:bold">if</span> (it !=3D MallocMap.=
end())
  {
    <span style=3D"color:#fff;font-weight:bold">if</span> (it-&gt;second)
      LogFile &lt;&lt; <span style=3D"color:#0ff;font-weight:bold">"[*] Mem=
ory at address 0x"</span> &lt;&lt; hex &lt;&lt; addr &lt;&lt; <span style=
=3D"color:#0ff;font-weight:bold">" has been freed more than once (Double Fr=
ee)."</span> &lt;&lt; endl;
    <span style=3D"color:#fff;font-weight:bold">else</span>
    {
      it-&gt;second =3D <span style=3D"color:#fff;font-weight:bold">true</s=
pan>;    <span style=3D"color:#007f7f">// Mark it as freed
</span><span style=3D"color:#007f7f"></span>      LogFile &lt;&lt; <span st=
yle=3D"color:#0ff;font-weight:bold">"[*] RtlFreeHeap(0x"</span> &lt;&lt; he=
x &lt;&lt; addr &lt;&lt; <span style=3D"color:#0ff;font-weight:bold">")"</s=
pan> &lt;&lt; endl;
    }
  }
  <span style=3D"color:#fff;font-weight:bold">else</span>
    LogFile &lt;&lt; <span style=3D"color:#0ff;font-weight:bold">"[*] Freei=
ng unallocated memory at address 0x"</span> &lt;&lt; hex &lt;&lt; addr &lt;=
&lt; <span style=3D"color:#0ff;font-weight:bold">"."</span> &lt;&lt; endl;
}

VOID BeforeMain() {
  start_trace =3D <span style=3D"color:#fff;font-weight:bold">true</span>;
}
VOID AfterMain() {
  start_trace =3D <span style=3D"color:#fff;font-weight:bold">false</span>;
}

VOID CustomInstrumentation(IMG img, VOID *v)
{
  <span style=3D"color:#fff;font-weight:bold">for</span> (SYM sym =3D IMG_R=
egsymHead(img); SYM_Valid(sym); sym =3D SYM_Next(sym))
  {
    string undFuncName =3D PIN_UndecorateSymbolName(SYM_Name(sym), UNDECORA=
TION_NAME_ONLY);

    <span style=3D"color:#fff;font-weight:bold">if</span>(EnumSymbols.Value=
())
    {
      LogFile &lt;&lt; <span style=3D"color:#0ff;font-weight:bold">""</span=
> &lt;&lt; undFuncName &lt;&lt; <span style=3D"color:#0ff;font-weight:bold"=
>""</span> &lt;&lt; endl;
      <span style=3D"color:#fff;font-weight:bold">continue</span>;
    }

    <span style=3D"color:#fff;font-weight:bold">if</span> (undFuncName =3D=
=3D EntryPoint.Value().c_str())
    {
      RTN allocRtn =3D RTN_FindByAddress(IMG_LowAddress(img) + SYM_Value(sy=
m));

      <span style=3D"color:#fff;font-weight:bold">if</span> (RTN_Valid(allo=
cRtn))
      {
        RTN_Open(allocRtn);

        RTN_InsertCall(allocRtn, IPOINT_BEFORE, (AFUNPTR)BeforeMain, IARG_E=
ND);
        RTN_InsertCall(allocRtn, IPOINT_AFTER, (AFUNPTR)AfterMain, IARG_END=
);

        RTN_Close(allocRtn);
      }
    }
    <span style=3D"color:#fff;font-weight:bold">if</span> (undFuncName =3D=
=3D <span style=3D"color:#0ff;font-weight:bold">"RtlAllocateHeap"</span>)
    {
      RTN allocRtn =3D RTN_FindByAddress(IMG_LowAddress(img) + SYM_Value(sy=
m));

      <span style=3D"color:#fff;font-weight:bold">if</span> (RTN_Valid(allo=
cRtn))
      {
        RTN_Open(allocRtn);
       =20
        <span style=3D"color:#007f7f">// Record RtlAllocateHeap size
</span><span style=3D"color:#007f7f"></span>        RTN_InsertCall(allocRtn=
, IPOINT_BEFORE, (AFUNPTR)LogBeforeMalloc,
          IARG_FUNCARG_ENTRYPOINT_VALUE, <span style=3D"color:#ff0;font-wei=
ght:bold">2</span>, IARG_END);

        <span style=3D"color:#007f7f">// Record RtlAllocateHeap return addr=
ess
</span><span style=3D"color:#007f7f"></span>        RTN_InsertCall(allocRtn=
, IPOINT_AFTER, (AFUNPTR)LogAfterMalloc,
          IARG_FUNCRET_EXITPOINT_VALUE, IARG_END);
       =20
        RTN_Close(allocRtn);
      }
    }
    <span style=3D"color:#fff;font-weight:bold">if</span> (undFuncName =3D=
=3D <span style=3D"color:#0ff;font-weight:bold">"RtlReAllocateHeap"</span>)
    {
      RTN reallocRtn =3D RTN_FindByAddress(IMG_LowAddress(img) + SYM_Value(=
sym));

      <span style=3D"color:#fff;font-weight:bold">if</span> (RTN_Valid(real=
locRtn))
      {
        RTN_Open(reallocRtn);

        <span style=3D"color:#007f7f">// Record RtlReAllocateHeap freed_add=
r, size
</span><span style=3D"color:#007f7f"></span>        RTN_InsertCall(reallocR=
tn, IPOINT_BEFORE, (AFUNPTR)LogBeforeReAlloc,
          IARG_FUNCARG_ENTRYPOINT_VALUE, <span style=3D"color:#ff0;font-wei=
ght:bold">2</span>, IARG_FUNCARG_ENTRYPOINT_VALUE, <span style=3D"color:#ff=
0;font-weight:bold">3</span>, IARG_END);

        <span style=3D"color:#007f7f">// Record RtlReAllocateHeap return ad=
dress
</span><span style=3D"color:#007f7f"></span>        RTN_InsertCall(reallocR=
tn, IPOINT_AFTER, (AFUNPTR)LogAfterReAlloc,
          IARG_FUNCRET_EXITPOINT_VALUE, IARG_END);

        RTN_Close(reallocRtn);
      }
    }
    <span style=3D"color:#fff;font-weight:bold">else</span> <span style=3D"=
color:#fff;font-weight:bold">if</span> (undFuncName =3D=3D <span style=3D"c=
olor:#0ff;font-weight:bold">"RtlFreeHeap"</span>)
    {
      RTN freeRtn =3D RTN_FindByAddress(IMG_LowAddress(img) + SYM_Value(sym=
));

      <span style=3D"color:#fff;font-weight:bold">if</span> (RTN_Valid(free=
Rtn))
      {
        RTN_Open(freeRtn);

        RTN_InsertCall(freeRtn, IPOINT_BEFORE, (AFUNPTR)LogFree,
          IARG_FUNCARG_ENTRYPOINT_VALUE, <span style=3D"color:#ff0;font-wei=
ght:bold">2</span>,
          IARG_END);

        RTN_Close(freeRtn);
      }
    }
    <span style=3D"color:#fff;font-weight:bold">if</span> (undFuncName =3D=
=3D <span style=3D"color:#0ff;font-weight:bold">"VirtualAllocEx"</span>)
    {
      RTN vrallocRtn =3D RTN_FindByAddress(IMG_LowAddress(img) + SYM_Value(=
sym));

      <span style=3D"color:#fff;font-weight:bold">if</span> (RTN_Valid(vral=
locRtn))
      {
        RTN_Open(vrallocRtn);

        RTN_InsertCall(vrallocRtn, IPOINT_BEFORE, (AFUNPTR)LogBeforeVirtual=
Alloc,
          IARG_FUNCARG_ENTRYPOINT_VALUE, <span style=3D"color:#ff0;font-wei=
ght:bold">2</span>, IARG_END);

        RTN_InsertCall(vrallocRtn, IPOINT_AFTER, (AFUNPTR)LogAfterVirtualAl=
loc,
          IARG_FUNCRET_EXITPOINT_VALUE, IARG_END);

        RTN_Close(vrallocRtn);
      }
    }
    <span style=3D"color:#fff;font-weight:bold">if</span> (undFuncName =3D=
=3D <span style=3D"color:#0ff;font-weight:bold">"VirtualFreeEx"</span>)
    {
      RTN vrfreeRtn =3D RTN_FindByAddress(IMG_LowAddress(img) + SYM_Value(s=
ym));

      <span style=3D"color:#fff;font-weight:bold">if</span> (RTN_Valid(vrfr=
eeRtn))
      {
        RTN_Open(vrfreeRtn);

        RTN_InsertCall(vrfreeRtn, IPOINT_BEFORE, (AFUNPTR)LogBeforeVirtualF=
ree,
          IARG_FUNCARG_ENTRYPOINT_VALUE, <span style=3D"color:#ff0;font-wei=
ght:bold">1</span>, IARG_END);

        RTN_Close(vrfreeRtn);
      }
    }
  }
}

VOID FinalFunc(INT32 code, VOID *v)
{
  <span style=3D"color:#fff;font-weight:bold">for</span> (pair&lt;ADDRINT, =
<span style=3D"color:#fff;font-weight:bold">bool</span>&gt; p : MallocMap)
  {
    <span style=3D"color:#fff;font-weight:bold">if</span> (!p.second)
      LogFile &lt;&lt; <span style=3D"color:#0ff;font-weight:bold">"[*] Mem=
ory at address 0x"</span> &lt;&lt; hex &lt;&lt; p.first &lt;&lt; <span styl=
e=3D"color:#0ff;font-weight:bold">" allocated but not freed"</span> &lt;&lt=
; endl;
  }

  LogFile.close();
}

<span style=3D"color:#fff;font-weight:bold">int</span> main(<span style=3D"=
color:#fff;font-weight:bold">int</span> argc, <span style=3D"color:#fff;fon=
t-weight:bold">char</span> *argv[])
{
  PIN_InitSymbols();
  PIN_Init(argc, argv);

  LogFile.open(LogFileName.Value().c_str());
  LogFile &lt;&lt; <span style=3D"color:#0ff;font-weight:bold">"## Memory t=
racing for PID =3D "</span> &lt;&lt; PIN_GetPid() &lt;&lt; <span style=3D"c=
olor:#0ff;font-weight:bold">" started"</span> &lt;&lt; endl;

  <span style=3D"color:#fff;font-weight:bold">if</span> (EnumSymbols.Value(=
))
    LogFile &lt;&lt; <span style=3D"color:#0ff;font-weight:bold">"### Listi=
ng Symbols"</span> &lt;&lt; endl;
  <span style=3D"color:#fff;font-weight:bold">else</span>
    LogFile &lt;&lt; <span style=3D"color:#0ff;font-weight:bold">"### Start=
ed tracing after '"</span> &lt;&lt; EntryPoint.Value().c_str() &lt;&lt; <sp=
an style=3D"color:#0ff;font-weight:bold">"()' call"</span> &lt;&lt; endl;
 =20
  IMG_AddInstrumentFunction(CustomInstrumentation, <span style=3D"color:#ff=
f;font-weight:bold">NULL</span>);
  PIN_AddFiniFunction(FinalFunc, <span style=3D"color:#fff;font-weight:bold=
">NULL</span>);
  PIN_StartProgram();

  <span style=3D"color:#fff;font-weight:bold">return</span> <span style=3D"=
color:#ff0;font-weight:bold">0</span>;
}
</code></pre></div><p>There are a couple of new options supported by this <=
code>Pintool</code>. If you look at the <code>KNOB</code> switches (below),=
 you=E2=80=99ll see that the <code>Pintool</code> now supports two new opti=
ons.</p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-cpp" data=
-lang=3D"cpp">KNOB&lt;string&gt; EntryPoint(KNOB_MODE_WRITEONCE, <span styl=
e=3D"color:#0ff;font-weight:bold">"pintool"</span>, <span style=3D"color:#0=
ff;font-weight:bold">"entrypoint"</span>, <span style=3D"color:#0ff;font-we=
ight:bold">"main"</span>, <span style=3D"color:#0ff;font-weight:bold">"Gues=
t entry-point function"</span>);
KNOB&lt;BOOL&gt; EnumSymbols(KNOB_MODE_WRITEONCE, <span style=3D"color:#0ff=
;font-weight:bold">"pintool"</span>, <span style=3D"color:#0ff;font-weight:=
bold">"symbols"</span>, <span style=3D"color:#0ff;font-weight:bold">"0"</sp=
an>, <span style=3D"color:#0ff;font-weight:bold">"List Symbols"</span>);
</code></pre></div><p>You can specify what=E2=80=99s the entry-point functi=
on of the target/guest application you want to trace. Why is this useful? I=
f you don=E2=80=99t do it, all the initialization code will also be <code>t=
raced</code> and it will become very hard to make sense of the output of ou=
r <code>Pintool</code>. Try. By default, the <code>tracing</code> will star=
t only after the function <code>main</code> is called. Obviously, if our ta=
rget/guest application doesn=E2=80=99t have a <code>main</code> function, w=
e=E2=80=99ll end with an empty output file.</p>
<p>Let=E2=80=99s look at a specific example. Let=E2=80=99s look at the <cod=
e>Windows</code> <code>calc.exe</code>. This binary doesn=E2=80=99t have a =
<code>main</code> function. So we run our <code>Pintool</code> as shown bel=
ow.</p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-fallback"=
 data-lang=3D"fallback">C:\pin&gt;pin -t source\tools\WinMallocTracer\Relea=
se\WinMallocTracer.dll -- calc.exe
</code></pre></div><p>We=E2=80=99ll get the following output.</p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-fallback"=
 data-lang=3D"fallback">## Memory tracing for PID =3D 1732 started
### Started tracing after 'main()' call
</code></pre></div><p>As expected, since <code>calc.exe</code> doesn=E2=80=
=99t have a <code>main</code> function. So, if we want to <code>trace</code=
> <code>calc.exe</code> or any other binary, we=E2=80=99ll need to find wha=
t=E2=80=99s its entry-point (or any other call after we want to start our <=
code>trace</code>). We can launch it on <code>IDA</code>, for example, or w=
e can use the other <code>KNOB</code> switch (<code>-symbols</code>) as sho=
wn below to list all the <code>symbols</code>.</p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-fallback"=
 data-lang=3D"fallback">C:\pin&gt;pin -t source\tools\WinMallocTracer\Relea=
se\WinMallocTracer.dll -symbols 1 -- calc.exe
</code></pre></div><p>And look at the output file (by default <code>memprof=
ile.out</code>) to see if we can find the function we are looking for.</p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-fallback"=
 data-lang=3D"fallback">C:\pin&gt; type memprofile.out
## Memory tracing for PID =3D 5696 started
### Listing Symbols
unnamedImageEntryPoint
InterlockedIncrement
InterlockedDecrement
InterlockedExchange
InterlockedCompareExchange
InterlockedExchangeAdd
KernelBaseGetGlobalData
unnamedImageEntryPoint
GetErrorMode
SetErrorMode
CreateIoCompletionPort
PostQueuedCompletionStatus
GetOverlappedResult
(...)
</code></pre></div><p>If you want to see the whole contents of the file you=
 can find it <a href=3D"https://github.com/houseofxyz/DBI/tree/master/calc.=
memprofile.out">here</a>. The first line is quite interesting though, and i=
t=E2=80=99s probably what we are looking for (<code>unnamedImageEntryPoint<=
/code>). So we can use our <code>Pintool</code> as shown below.</p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-fallback"=
 data-lang=3D"fallback">C:\pin&gt;pin -t source\tools\WinMallocTracer\Relea=
se\WinMallocTracer.dll -entrypoint unnamedImageEntryPoint -- calc.exe
</code></pre></div><p>And if we look at the output this time we=E2=80=99ll =
get something like:</p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-fallback"=
 data-lang=3D"fallback">C:\pin&gt; type memprofile.out
## Memory tracing for PID =3D 6656 started
### Started tracing after 'unnamedImageEntryPoint()' call
[*] RtlAllocateHeap(32)   =3D 0x4d9098
[*] RtlAllocateHeap(564)    =3D 0x2050590
[*] RtlAllocateHeap(520)    =3D 0x4dcb18
[*] RtlAllocateHeap(1024)   =3D 0x4dd240
[*] RtlAllocateHeap(532)    =3D 0x20507d0
[*] RtlAllocateHeap(1152)   =3D 0x20509f0
[*] RtlAllocateHeap(3608)   =3D 0x4dd648
[*] RtlAllocateHeap(1804)   =3D 0x2050e78
[*] RtlFreeHeap(0x4dd648)
(...)
</code></pre></div><p>If you want to see the whole contents of the file you=
 can find it <a href=3D"https://github.com/houseofxyz/DBI/tree/master/calc.=
full.memprofile.out">here</a>. As you=E2=80=99ll see, it=E2=80=99s still ha=
rd to read and make sense of the output. As I mentioned before, this <code>=
Pintool</code> can actually tell there=E2=80=99s a problem, but not where i=
t is. I=E2=80=99ll try to improve the <code>Pintool</code>, and if you are =
interested you can follow its future developments <a href=3D"https://github=
.com/houseofxyz/WinMallocTracer">here</a>. At least, every time I detect an=
 issue I=E2=80=99ll add a <a href=3D"https://software.intel.com/sites/landi=
ngpage/pintool/docs/81205/Pin/html/group__APPDEBUG__API.html#gad46f50d48ebc=
f2414e766c2978111c4b">PIN_ApplicationBreakpoint</a> (see <a href=3D"https:/=
/github.com/houseofxyz/WinMallocTracer">here</a>). In some cases, it might =
still be very hard to locate the issue, but it=E2=80=99s a starting point. =
There are also a lot of <code>false positives</code>, as you can see in the=
 output of <code>calc.exe</code>. To validate that actually the <code>Pinto=
ol</code> is working we can use the following sample target/guest (I called=
 it <code>ExercisePin2.exe</code>).</p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-cpp" data=
-lang=3D"cpp"><span style=3D"color:#0f0;font-weight:bold">#include</span> <=
span style=3D"color:#0f0;font-weight:bold">&lt;windows.h&gt;</span><span st=
yle=3D"color:#0f0;font-weight:bold">
</span><span style=3D"color:#0f0;font-weight:bold">#include</span> <span st=
yle=3D"color:#0f0;font-weight:bold">&lt;stdio.h&gt;</span><span style=3D"co=
lor:#0f0;font-weight:bold">
</span><span style=3D"color:#0f0;font-weight:bold"></span>
<span style=3D"color:#0f0;font-weight:bold">#define PAGELIMIT 80
</span><span style=3D"color:#0f0;font-weight:bold"></span>
<span style=3D"color:#fff;font-weight:bold">int</span> my_heap_functions(<s=
pan style=3D"color:#fff;font-weight:bold">char</span> *buf) {
  HLOCAL h1 =3D <span style=3D"color:#ff0;font-weight:bold">0</span>, h2 =
=3D <span style=3D"color:#ff0;font-weight:bold">0</span>, h3 =3D <span styl=
e=3D"color:#ff0;font-weight:bold">0</span>, h4 =3D <span style=3D"color:#ff=
0;font-weight:bold">0</span>;

  h1 =3D HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, <span style=3D"color=
:#ff0;font-weight:bold">260</span>);

  h2 =3D HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, <span style=3D"color=
:#ff0;font-weight:bold">260</span>);
 =20
  HeapFree(GetProcessHeap(), <span style=3D"color:#ff0;font-weight:bold">0<=
/span>, h1);

  h3 =3D HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, <span style=3D"color=
:#ff0;font-weight:bold">520</span>);

  h4 =3D HeapReAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, h3, <span style=3D=
"color:#ff0;font-weight:bold">1040</span>);

  HeapFree(GetProcessHeap(), <span style=3D"color:#ff0;font-weight:bold">0<=
/span>, h4);
  <span style=3D"color:#fff;font-weight:bold">return</span> <span style=3D"=
color:#ff0;font-weight:bold">0</span>;
}

<span style=3D"color:#fff;font-weight:bold">int</span> my_virtual_functions=
(<span style=3D"color:#fff;font-weight:bold">char</span> *buf) {
  LPVOID lpvBase;
  DWORD dwPageSize;
  BOOL bSuccess;
  SYSTEM_INFO sSysInfo;         <span style=3D"color:#007f7f">// Useful inf=
ormation about the system
</span><span style=3D"color:#007f7f"></span>
  GetSystemInfo(&amp;sSysInfo);     <span style=3D"color:#007f7f">// Initia=
lize the structure.
</span><span style=3D"color:#007f7f"></span>  dwPageSize =3D sSysInfo.dwPag=
eSize;

  <span style=3D"color:#007f7f">// Reserve pages in the virtual address spa=
ce of the process.
</span><span style=3D"color:#007f7f"></span>  lpvBase =3D VirtualAlloc(
    <span style=3D"color:#fff;font-weight:bold">NULL</span>,               =
  <span style=3D"color:#007f7f">// System selects address
</span><span style=3D"color:#007f7f"></span>    PAGELIMIT*dwPageSize, <span=
 style=3D"color:#007f7f">// Size of allocation
</span><span style=3D"color:#007f7f"></span>    MEM_RESERVE,          <span=
 style=3D"color:#007f7f">// Allocate reserved pages
</span><span style=3D"color:#007f7f"></span>    PAGE_NOACCESS);       <span=
 style=3D"color:#007f7f">// Protection =3D no access
</span><span style=3D"color:#007f7f"></span>
  <span style=3D"color:#fff;font-weight:bold">if</span> (lpvBase =3D=3D <sp=
an style=3D"color:#fff;font-weight:bold">NULL</span>)
    exit(<span style=3D"color:#0ff;font-weight:bold">"VirtualAlloc reserve =
failed."</span>);

  bSuccess =3D VirtualFree(
    lpvBase,       <span style=3D"color:#007f7f">// Base address of block
</span><span style=3D"color:#007f7f"></span>    <span style=3D"color:#ff0;f=
ont-weight:bold">0</span>,             <span style=3D"color:#007f7f">// Byt=
es of committed pages
</span><span style=3D"color:#007f7f"></span>    MEM_RELEASE);  <span style=
=3D"color:#007f7f">// Decommit the pages
</span><span style=3D"color:#007f7f"></span>
  <span style=3D"color:#fff;font-weight:bold">return</span> <span style=3D"=
color:#ff0;font-weight:bold">0</span>;
}

<span style=3D"color:#fff;font-weight:bold">int</span> main(<span style=3D"=
color:#fff;font-weight:bold">void</span>) {
  my_heap_functions(<span style=3D"color:#0ff;font-weight:bold">"moo"</span=
>);
  my_virtual_functions(<span style=3D"color:#0ff;font-weight:bold">"moo"</s=
pan>);

  <span style=3D"color:#fff;font-weight:bold">return</span> <span style=3D"=
color:#ff0;font-weight:bold">0</span>;
}
</code></pre></div><p>You can find the <code>Visual Studio</code> project <=
a href=3D"https://github.com/houseofxyz/DBI/tree/master/ExercisePin2">here<=
/a>. You can play with it a compare the output with what=E2=80=99s expected=
 based on <code>ExercisePin2.c</code> source code.</p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-fallback"=
 data-lang=3D"fallback">C:\pin&gt;pin -t source\tools\WinMallocTracer\Relea=
se\WinMallocTracer.dll -symbols 1 -- C:\TARGET\ExercisePin2.exe
C:\pin&gt; type memprofile.out
## Memory tracing for PID =3D 5600 started
### Listing Symbols
_enc$textbss$end
unnamedImageEntryPoint
main
my_heap_functions
my_virtual_functions
HeapAlloc
HeapReAlloc
HeapFree
GetProcessHeap
GetSystemInfo
(...)
</code></pre></div><p>The full output is <a href=3D"https://github.com/hous=
eofxyz/DBI/tree/master/ExercisePin2.symbols.memprofile.out">here</a>. Since=
 the entry-point function is <code>main</code>, we can simply run the <code=
>Pintool</code> without passing anything to it.</p>
<div class=3D"highlight"><pre style=3D"color:#e5e5e5;background-color:#000;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class=3D"language-fallback"=
 data-lang=3D"fallback">C:\pin&gt;pin -t source\tools\WinMallocTracer\Relea=
se\WinMallocTracer.dll -- C:\TARGET\ExercisePin2.exe
C:\pin&gt; type memprofile.out
## Memory tracing for PID =3D 4396 started
### Started tracing after 'main()' call
[*] RtlAllocateHeap(260)    =3D 0x41dd30
[*] RtlAllocateHeap(260)    =3D 0x41de40
[*] RtlFreeHeap(0x41dd30)
[*] RtlAllocateHeap(520)    =3D 0x41df50
[*] RtlHeapfree(0x41df50) from RtlHeapRealloc()
[*] RtlHeapReAlloc(1040)    =3D 0x41df50
[*] RtlFreeHeap(0x41df50)
[*] VirtualAllocEx(327680)    =3D 0x2410000
[*] VirtualFreeEx(0x2410000)
[*] Memory at address 0x41de40 allocated but not freed
</code></pre></div><p>As we can see, tracing memory calls is tricky, but ac=
hievable. I=E2=80=99ll try to add a few more things to this <code>WinMalloc=
Tracer</code> <code>Pintool</code> in a near future. Keep an eye on <a href=
=3D"https://github.com/houseofxyz/WinMallocTracer">GitLab</a> if you fancy.=
</p>
<h2 id=3D"final-notes">Final notes</h2>
<p>Playing with a <code>DBI</code> framework is not that hard, as we saw, t=
he challenge lies in doing it right. That is, handle all the corner cases e=
fficiently. Something that looks fairly easy can become very challenging if=
 we are going to do it right. The example tool I chose came from a specific=
 need, and from a vulnerability discovering perspective <code>DBI</code> fr=
ameworks are indeed very useful. There=E2=80=99s a lot of room for improvem=
ent, and I plan to keep working on it.</p>
<p>Even though it was the <code>Fuzzing</code> subject that brought me here=
 (that is, playing with <code>DBI</code> frameworks) I ended up not talking=
 too much about its relationship. Think that a <code>DBI</code> tool per si=
 won=E2=80=99t find many bugs unless you exercise as many code paths as pos=
sible. After all, a <code>DBI</code> system only modifies the code that=E2=
=80=99s executed. So, it=E2=80=99s easy to understand that we need to combi=
ne it with a coverage-guided <code>Fuzzer</code> to discover more bugs (pre=
ferably, exploitable).</p>
<p><code>DBI</code> systems are here to stay, they emerged as a means for b=
ypassing the restrictions imposed by binary code. Or, lack of access to sou=
rce code. The need to understand, and modify the runtime behavior, of compu=
ter programs, is undeniable.</p>
<p>The field of <code>dynamic binary modification</code> is evolving very f=
ast. New applications and new complex engineering challenges are appearing =
constantly and <code>static binary patching</code> and <code>hooking</code>=
 are =E2=80=9Cthings=E2=80=9D from the past.</p>
<p>This post documents the first steps if you want to get into this area. A=
ll the code snippets used are available at this <a href=3D"https://github.c=
om/houseofxyz/DBI">GitLab repo</a>. And, an improved version of the <code>W=
inMallocTracer</code> <code>Pintool</code> is available at this <a href=3D"=
https://github.com/houseofxyz/WinAllocTracer">GitLab repo</a>.</p>
<h2 id=3D"references-in-no-particular-order">References (in no particular o=
rder)</h2>
<ul>
<li><a href=3D"https://en.wikipedia.org/wiki/Pin_(computer_program)">https:=
//en.wikipedia.org/wiki/Pin_(computer_program)</a></li>
<li><a href=3D"https://en.wikipedia.org/wiki/Dynamic_program_analysis">http=
s://en.wikipedia.org/wiki/Dynamic_program_analysis</a></li>
<li><a href=3D"https://en.wikipedia.org/wiki/Instrumentation_(computer_prog=
ramming)">https://en.wikipedia.org/wiki/Instrumentation_(computer_programmi=
ng)</a></li>
<li><a href=3D"http://uninformed.org/index.cgi?v=3D7&amp;a=3D1&amp;p=3D3">h=
ttp://uninformed.org/index.cgi?v=3D7&amp;a=3D1&amp;p=3D3</a></li>
<li><a href=3D"https://software.intel.com/sites/landingpage/pintool/docs/97=
619/Pin/html/">https://software.intel.com/sites/landingpage/pintool/docs/97=
619/Pin/html/</a></li>
<li><a href=3D"http://www.ic.unicamp.br/~rodolfo/mo801/04-PinTutorial.pdf">=
http://www.ic.unicamp.br/~rodolfo/mo801/04-PinTutorial.pdf</a></li>
<li><a href=3D"https://software.intel.com/en-us/articles/pin-a-dynamic-bina=
ry-instrumentation-tool">https://software.intel.com/en-us/articles/pin-a-dy=
namic-binary-instrumentation-tool</a></li>
<li><a href=3D"https://software.intel.com/sites/default/files/managed/62/f4=
/cgo2013.pdf">https://software.intel.com/sites/default/files/managed/62/f4/=
cgo2013.pdf</a></li>
<li><a href=3D"https://software.intel.com/sites/default/files/m/d/4/1/d/8/p=
in_tutorial_cgo_ispass_2012.ppt">https://software.intel.com/sites/default/f=
iles/m/d/4/1/d/8/pin_tutorial_cgo_ispass_2012.ppt</a></li>
<li><a href=3D"https://software.intel.com/sites/default/files/m/d/4/1/d/8/P=
in_tutorial_cgo_2011_final_1.ppt">https://software.intel.com/sites/default/=
files/m/d/4/1/d/8/Pin_tutorial_cgo_2011_final_1.ppt</a></li>
<li><a href=3D"https://software.intel.com/sites/default/files/article/25667=
5/cgo-2010-final.ppt">https://software.intel.com/sites/default/files/articl=
e/256675/cgo-2010-final.ppt</a></li>
<li><a href=3D"https://msdn.microsoft.com/en-gb/magazine/dn818497.aspx">htt=
ps://msdn.microsoft.com/en-gb/magazine/dn818497.aspx</a> (got a bunch of id=
eas from this post)</li>
<li><a href=3D"https://github.com/JonathanSalwan/PinTools">https://github.c=
om/JonathanSalwan/PinTools</a> (mandatory)</li>
<li><a href=3D"http://shell-storm.org/blog/Taint-analysis-and-pattern-match=
ing-with-Pin/">http://shell-storm.org/blog/Taint-analysis-and-pattern-match=
ing-with-Pin/</a> (mandatory)</li>
<li><a href=3D"http://shell-storm.org/blog/Binary-analysis-Concolic-executi=
on-with-Pin-and-z3/">http://shell-storm.org/blog/Binary-analysis-Concolic-e=
xecution-with-Pin-and-z3/</a></li>
<li><a href=3D"http://shell-storm.org/blog/In-Memory-fuzzing-with-Pin/">htt=
p://shell-storm.org/blog/In-Memory-fuzzing-with-Pin/</a></li>
<li><a href=3D"https://github.com/jingpu/pintools/blob/master/source/tools/=
ManualExamples/w_malloctrace.cpp">https://github.com/jingpu/pintools/blob/m=
aster/source/tools/ManualExamples/w_malloctrace.cpp</a></li>
<li><a href=3D"https://github.com/corelan/pin">https://github.com/corelan/p=
in</a></li>
<li><a href=3D"http://dynamorio.org/docs/">http://dynamorio.org/docs/</a></=
li>
<li><a href=3D"http://dynamorio.org/tutorial.html">http://dynamorio.org/tut=
orial.html</a></li>
<li><a href=3D"http://dynamorio.org/pubs.html">http://dynamorio.org/pubs.ht=
ml</a></li>
<li><a href=3D"http://dynamorio.org/docs/API_BT.html#sec_decode">http://dyn=
amorio.org/docs/API_BT.html#sec_decode</a></li>
<li><a href=3D"https://groups.google.com/forum/#!forum/dynamorio-users">htt=
ps://groups.google.com/forum/#!forum/dynamorio-users</a></li>
<li><a href=3D"http://dynamorio.org/docs/samples/wrap.c">http://dynamorio.o=
rg/docs/samples/wrap.c</a></li>
<li><a href=3D"https://github.com/DynamoRIO/dynamorio/blob/master/api/sampl=
es/ssljack.c">https://github.com/DynamoRIO/dynamorio/blob/master/api/sample=
s/ssljack.c</a></li>
<li><a href=3D"https://axtaxt.wordpress.com/2014/03/02/implementing-a-simpl=
e-hit-tracer-in-dynamorio/">https://axtaxt.wordpress.com/2014/03/02/impleme=
nting-a-simple-hit-tracer-in-dynamorio/</a></li>
<li><a href=3D"https://pdfs.semanticscholar.org/presentation/4415/2007fea2b=
4f5f3b3f1f66d1d00aa0c88fd9b.pdf">Building Dynamic Instrumentation Tools wit=
h DynamoRIO</a></li>
<li><a href=3D"https://media.blackhat.com/bh-us-11/Diskin/BH_US_11_Diskin_B=
inary_Instrumentation_Slides.pdf">https://media.blackhat.com/bh-us-11/Diski=
n/BH_US_11_Diskin_Binary_Instrumentation_Slides.pdf</a></li>
<li><a href=3D"https://github.com/joxeankoret/membugtool/blob/master/docs/U=
sing%20Binary%20Instrumentation%20for%20Vulnerability%20Discovery%20(or%20e=
ven%20mitigation!).pdf">Using Binary Instrumentation for Vulnerability Disc=
overy</a> (mandatory)</li>
<li><a href=3D"http://shell-storm.org/talks/SecurityDay2015_dynamic_symboli=
c_execution_Jonathan_Salwan.pdf">Dynamic Binary Analysis and Instrumentatio=
n Covering a function using a DSE approach</a> (mandatory)</li>
<li><a href=3D"http://2011.zeronights.org/files/dmitriyd1g1evdokimov-dbiint=
ro-111202045015-phpapp01.pdf">http://2011.zeronights.org/files/dmitriyd1g1e=
vdokimov-dbiintro-111202045015-phpapp01.pdf</a></li>
<li><a href=3D"https://qbdi.quarkslab.com/QBDI_34c3.pdf">https://qbdi.quark=
slab.com/QBDI_34c3.pdf</a></li>
<li><a href=3D"https://www.coresecurity.com/system/files/publications/2016/=
10/Getting%20fun%20with%20Frida-Ekoparty-21-10-2016.pdf">Getting fun with F=
rida</a> (mandatory)</li>
<li><a href=3D"https://dyninst.org/sites/default/files/manuals/dyninst/dyni=
nstAPI.pdf">https://dyninst.org/sites/default/files/manuals/dyninst/dyninst=
API.pdf</a></li>
<li><a href=3D"https://www.frida.re/docs/home/">https://www.frida.re/docs/h=
ome/</a></li>
<li><a href=3D"https://www.frida.re/docs/presentations/">https://www.frida.=
re/docs/presentations/</a></li>
<li><a href=3D"https://monosource.github.io/tutorial/2017/01/26/frida-linux=
-part1/">https://monosource.github.io/tutorial/2017/01/26/frida-linux-part1=
/</a> (my frida section comes mostly from here)</li>
<li><a href=3D"https://vicarius.io/blog/wtf-is-frida/">https://vicarius.io/=
blog/wtf-is-frida/</a></li>
<li><a href=3D"http://blog.kalleberg.org/post/833101026/live-x86-code-instr=
umentation-with-frida">http://blog.kalleberg.org/post/833101026/live-x86-co=
de-instrumentation-with-frida</a></li>
<li><a href=3D"https://www.codemetrix.net/hacking-android-apps-with-frida-1=
/">https://www.codemetrix.net/hacking-android-apps-with-frida-1/</a></li>
<li><a href=3D"https://en.wikipedia.org/wiki/Chrome_V8">https://en.wikipedi=
a.org/wiki/Chrome_V8</a></li>
<li><a href=3D"https://github.com/BinaryAnalysisPlatform/bap-tutorial">http=
s://github.com/BinaryAnalysisPlatform/bap-tutorial</a></li>
<li><a href=3D"https://www.blackhat.com/docs/eu-17/materials/eu-17-Polino-H=
iding-Pins-Artifacts-To-Defeat-Evasive-Malware.pdf">Hiding PIN=E2=80=99s Ar=
tifacts to Defeat Evasive Malware</a></li>
<li><a href=3D"https://software.intel.com/en-us/articles/pin-errors-in-2017=
-update-3-and-4-analysis-tools">https://software.intel.com/en-us/articles/p=
in-errors-in-2017-update-3-and-4-analysis-tools</a></li>
<li><a href=3D"https://recon.cx/2018/montreal/schedule/system/event_attachm=
ents/attachments/000/000/048/original/RECON-MTL-2018-Pwning_Intel_Pin.pdf">=
Pwning Intel Pin Reconsidering Intel Pin in Context of Security</a></li>
<li><a href=3D"https://www.escholar.manchester.ac.uk/api/datastream?publica=
tionPid=3Duk-ac-man-scw:220490&amp;datastreamId=3DFULL-TEXT.PDF">Dynamic Pr=
ogram Analysis and Optimization under DynamoRIO</a></li>
<li><a href=3D"https://bsidesvienna.at/slides/2017/the_art_of_fuzzing.pdf">=
https://bsidesvienna.at/slides/2017/the_art_of_fuzzing.pdf</a></li>
<li><a href=3D"https://libraries.io/github/memtt/malt">https://libraries.io=
/github/memtt/malt</a></li>
<li><a href=3D"http://3nity.io/~vj/downloads/publications/pldi05_pin.pdf">h=
ttp://3nity.io/~vj/downloads/publications/pldi05_pin.pdf</a></li>
<li><a href=3D"http://valgrind.org/docs/valgrind2007.pdf">http://valgrind.o=
rg/docs/valgrind2007.pdf</a></li>
<li><a href=3D"http://groups.csail.mit.edu/commit/papers/03/RIO-adaptive-CG=
O03.pdf">http://groups.csail.mit.edu/commit/papers/03/RIO-adaptive-CGO03.pd=
f</a></li>
<li><a href=3D"http://groups.csail.mit.edu/commit/papers/01/RIO-FDDO.pdf">h=
ttp://groups.csail.mit.edu/commit/papers/01/RIO-FDDO.pdf</a></li>
<li><a href=3D"http://shell-storm.org/talks/SSTIC2015_English_slide_detaile=
d_version_Triton_Concolic_Execution_FrameWork_FSaudel_JSalwan.pdf">Triton C=
oncolic Execution Framework</a></li>
<li><a href=3D"https://www.cc.gatech.edu/~orso/papers/clause.li.orso.ISSTA0=
7.pdf">https://www.cc.gatech.edu/~orso/papers/clause.li.orso.ISSTA07.pdf</a=
></li>
<li><a href=3D"http://www-leland.stanford.edu/class/cs343/resources/shadow-=
memory2007.pdf">http://www-leland.stanford.edu/class/cs343/resources/shadow=
-memory2007.pdf</a></li>
<li><a href=3D"http://www.burningcutlery.com/derek/docs/drmem-CGO11.pdf">ht=
tp://www.burningcutlery.com/derek/docs/drmem-CGO11.pdf</a></li>
<li><a href=3D"http://valgrind.org/docs/iiswc2006.pdf">http://valgrind.org/=
docs/iiswc2006.pdf</a></li>
<li><a href=3D"https://pdfs.semanticscholar.org/1156/5da78c06a94c1fc8a0ff3a=
8d710cb9a5d450.pdf">https://pdfs.semanticscholar.org/1156/5da78c06a94c1fc8a=
0ff3a8d710cb9a5d450.pdf</a></li>
<li><a href=3D"http://homepages.dcc.ufmg.br/~fernando/publications/papers_p=
t/Tymburiba15Tools.pdf">http://homepages.dcc.ufmg.br/~fernando/publications=
/papers_pt/Tymburiba15Tools.pdf</a></li>
<li><a href=3D"http://delivery.acm.org/10.1145/3030000/3029812/p219-elsabag=
h.pdf">http://delivery.acm.org/10.1145/3030000/3029812/p219-elsabagh.pdf</a=
></li>
<li><a href=3D"http://sharcs-project.eu/m/filer_public/74/5c/745c0bf6-7636-=
405f-86e6-089ac630f0d2/patharmor_ccs15.pdf">http://sharcs-project.eu/m/file=
r_public/74/5c/745c0bf6-7636-405f-86e6-089ac630f0d2/patharmor_ccs15.pdf</a>=
</li>
<li><a href=3D"https://www.bodden.de/pubs/fb2016ropocop.pdf">https://www.bo=
dden.de/pubs/fb2016ropocop.pdf</a></li>
<li><a href=3D"https://arxiv.org/pdf/1502.03245.pdf">https://arxiv.org/pdf/=
1502.03245.pdf</a></li>
<li><a href=3D"https://suif.stanford.edu/papers/vmi-ndss03.pdf">https://sui=
f.stanford.edu/papers/vmi-ndss03.pdf</a></li>
<li><a href=3D"https://recon.cx/2012/schedule/attachments/42_FalconRiva_201=
2.pdf">https://recon.cx/2012/schedule/attachments/42_FalconRiva_2012.pdf</a=
></li>
<li><a href=3D"https://hackinparis.com/data/slides/2013/slidesricardorodrig=
uez.pdf">https://hackinparis.com/data/slides/2013/slidesricardorodriguez.pd=
f</a></li>
<li><a href=3D"http://anti-reversing.com/Downloads/HES_2011_Presentations/B=
lack%20Box%20Auditing%20Adobe%20Shockwave%20-%20Aaron%20Portnoy%20&amp;%20L=
ogan%20Brown.pdf">Black Box Auditing Adobe Shockwave</a></li>
<li><a href=3D"https://www.blackhat.com/presentations/bh-usa-07/Quist_and_V=
alsmith/Whitepaper/bh-usa-07-quist_and_valsmith-WP.pdf">Covert Debugging Ci=
rcumventing Software Armoring Techniques</a></li>
<li><a href=3D"http://public.avast.com/caro2011/Daniel%20Radu%20and%20Bruce=
%20Dang%20-%20Shellcode%20analysis%20using%20dynamic%20binary%20instrumenta=
tion.pdf">Shellcode analysis using dynamic binary instrumentation</a></li>
<li><a href=3D"http://taviso.decsystem.org/making_software_dumber.pdf">http=
://taviso.decsystem.org/making_software_dumber.pdf</a></li>
<li><a href=3D"http://web.cs.iastate.edu/~weile/cs513x/2018spring/taintanal=
ysis.pdf">http://web.cs.iastate.edu/~weile/cs513x/2018spring/taintanalysis.=
pdf</a></li>
<li><a href=3D"https://www.researchgate.net/publication/220796366_Hybrid_an=
alysis_of_executables_to_detect_security_vulnerabilities">Hybrid analysis o=
f executables to detect security vulnerabilities</a></li>
<li><a href=3D"https://deepsec.net/docs/Slides/2010/DeepSec_2010_Tripoux_Re=
verse_Engineering_of_malware_packers_for_dummies.pdf">Tripoux Reverse Engin=
eering Of Malware Packers For Dummies</a></li>
<li><a href=3D"https://pdfs.semanticscholar.org/presentation/c135/68c933ea8=
f6a91db67a103715fd1d4ce2253.pdf">https://pdfs.semanticscholar.org/presentat=
ion/c135/68c933ea8f6a91db67a103715fd1d4ce2253.pdf</a></li>
<li><a href=3D"https://code.google.com/archive/p/devilheart/">https://code.=
google.com/archive/p/devilheart/</a></li>
<li><a href=3D"http://groups.csail.mit.edu/commit/papers/02/RIO-security-us=
enix.pdf">http://groups.csail.mit.edu/commit/papers/02/RIO-security-usenix.=
pdf</a></li>
<li><a href=3D"http://pages.cs.wisc.edu/~madhurm/pindb/pindb.pdf">http://pa=
ges.cs.wisc.edu/~madhurm/pindb/pindb.pdf</a></li>
<li><a href=3D"https://www.usenix.org/legacy/event/osdi10/tech/full_papers/=
Enck.pdf">https://www.usenix.org/legacy/event/osdi10/tech/full_papers/Enck.=
pdf</a></li>
<li><a href=3D"https://deepsec.net/docs/Slides/2009/DeepSec_2009_Daniel_Rey=
naud_-_Deobfuscation_Unpacking.pdf">https://deepsec.net/docs/Slides/2009/De=
epSec_2009_Daniel_Reynaud_-_Deobfuscation_Unpacking.pdf</a></li>
<li><a href=3D"http://fmv.jku.at/master/Holzleiter-MasterThesis-2009.pdf">h=
ttp://fmv.jku.at/master/Holzleiter-MasterThesis-2009.pdf</a></li>
<li><a href=3D"http://csl.cs.ucf.edu/debugging/user_guide.html">http://csl.=
cs.ucf.edu/debugging/user_guide.html</a></li>
<li><a href=3D"http://bitblaze.cs.berkeley.edu/papers/sweeper.pdf">http://b=
itblaze.cs.berkeley.edu/papers/sweeper.pdf</a></li>
<li><a href=3D"http://www.ece.neu.edu/groups/nucar/publications/ASSISD06mof=
fie.pdf">http://www.ece.neu.edu/groups/nucar/publications/ASSISD06moffie.pd=
f</a></li>
<li><a href=3D"https://events.ccc.de/congress/2009/Fahrplan/attachments/143=
0_secuBT.pdf">https://events.ccc.de/congress/2009/Fahrplan/attachments/1430=
_secuBT.pdf</a></li>
<li><a href=3D"https://recon.cx/2010/slides/Recon2010-UnderStaningSwizzorOb=
fuscation.pdf">https://recon.cx/2010/slides/Recon2010-UnderStaningSwizzorOb=
fuscation.pdf</a></li>
<li><a href=3D"http://www.dtic.mil/dtic/tr/fulltext/u2/a462289.pdf">http://=
www.dtic.mil/dtic/tr/fulltext/u2/a462289.pdf</a></li>
<li><a href=3D"https://scholarworks.iupui.edu/bitstream/handle/1805/8807/Hi=
ll_2015_pin.pdf?sequence=3D1">Pin++: A Object-oriented Framework for Writin=
g Pintools</a></li>
<li><a href=3D"https://media.blackhat.com/bh-eu-11/Mihai_Chiriac/BlackHat_E=
U_2011_Chiriac_Rootkit_detection-Slides.pdf">Rootkit detection via Kernel C=
ode Tunneling</a></li>
<li><a href=3D"https://media.blackhat.com/bh-eu-11/Mihai_Chiriac/BlackHat_E=
U_2011_Chiriac_Rootkit_detection-WP.pdf">https://media.blackhat.com/bh-eu-1=
1/Mihai_Chiriac/BlackHat_EU_2011_Chiriac_Rootkit_detection-WP.pdf</a></li>
<li><a href=3D"https://www.cc.gatech.edu/~orso/papers/clause.li.orso.ISSTA0=
7.pdf">https://www.cc.gatech.edu/~orso/papers/clause.li.orso.ISSTA07.pdf</a=
></li>
<li><a href=3D"https://recon.cx/2014/slides/pinpoint_control_for_analyzing_=
malware_recon2014_jjones.pdf">https://recon.cx/2014/slides/pinpoint_control=
_for_analyzing_malware_recon2014_jjones.pdf</a></li>
<li><a href=3D"https://arxiv.org/pdf/1503.01186.pdf">https://arxiv.org/pdf/=
1503.01186.pdf</a></li>
<li><a href=3D"https://code.google.com/archive/p/tartetatintools/">https://=
code.google.com/archive/p/tartetatintools/</a></li>
<li><a href=3D"https://github.com/0xPhoeniX/MazeWalker">https://github.com/=
0xPhoeniX/MazeWalker</a></li>
<li><a href=3D"https://recon.cx/2017/montreal/resources/slides/RECON-MTL-20=
17-MazeWalker.pdf">https://recon.cx/2017/montreal/resources/slides/RECON-MT=
L-2017-MazeWalker.pdf</a></li>
<li><a href=3D"https://github.com/poxyran/misc/blob/master/frida-heap-trace=
.py">https://github.com/poxyran/misc/blob/master/frida-heap-trace.py</a></l=
i>
<li><a href=3D"https://github.com/OALabs/frida-extract">https://github.com/=
OALabs/frida-extract</a></li>
<li><a href=3D"https://github.com/Nightbringer21/fridump">https://github.co=
m/Nightbringer21/fridump</a></li>
<li><a href=3D"https://edmcman.github.io/papers/oakland10.pdf">https://edmc=
man.github.io/papers/oakland10.pdf</a></li>
<li><a href=3D"https://edmcman.github.io/pres/oakland10.pdf">https://edmcma=
n.github.io/pres/oakland10.pdf</a></li>
<li><a href=3D"https://github.com/falconre/falcon">https://github.com/falco=
nre/falcon</a></li>
<li><a href=3D"http://reversing.io/posts/palindrome-progress/">http://rever=
sing.io/posts/palindrome-progress/</a></li>
<li>[https://www.blackhat.com/docs/us-16/materials/us-16-Mariani-Pindemoniu=
m-A-Dbi-Based-Generic-Unpacker-For-Windows-Executables-wp.pdf](PinDemonium:=
 a DBI-based generic unpacker for Windows executables)</li>
<li><a href=3D"https://www.reddit.com/r/REMath/comments/8ml1ep/books_on_pro=
gram_analysis/">https://www.reddit.com/r/REMath/comments/8ml1ep/books_on_pr=
ogram_analysis/</a></li>
<li><a href=3D"http://bitblaze.cs.berkeley.edu/temu.html">http://bitblaze.c=
s.berkeley.edu/temu.html</a></li>
<li><a href=3D"https://code.google.com/archive/p/flayer/">https://code.goog=
le.com/archive/p/flayer/</a></li>
<li><a href=3D"https://resources.infosecinstitute.com/pin-dynamic-binary-in=
strumentation-framework/">https://resources.infosecinstitute.com/pin-dynami=
c-binary-instrumentation-framework/</a></li>
<li><a href=3D"http://www.ckluk.org/ck/papers/pin_ieeecomputer10.pdf">http:=
//www.ckluk.org/ck/papers/pin_ieeecomputer10.pdf</a></li>
<li><a href=3D"http://joxeankoret.com/blog/2012/11/04/a-simple-pin-tool-unp=
acker-for-the-linux-version-of-skype/">A simple PIN tool unpacker for the L=
inux version of Skype</a> (mandatory)</li>
<li><a href=3D"http://www.msreverseengineering.com/program-analysis-reading=
-list/">http://www.msreverseengineering.com/program-analysis-reading-list/<=
/a> (mandatory)</li>
<li><a href=3D"https://www.amazon.co.uk/gp/product/1608454584/">Dynamic Bin=
ary Modifications: Tools, Techniques &amp; Applications</a> (mandatory)</li=
>
<li><a href=3D"https://riot.im/app/#/room/#programanalysis:disroot.org">htt=
ps://riot.im/app/#/room/#programanalysis:disroot.org</a></li>
<li><a href=3D"https://github.com/wapiflapi/villoc/blob/master/pintool/pint=
ool.cpp">https://github.com/wapiflapi/villoc/blob/master/pintool/pintool.cp=
p</a></li>
<li><a href=3D"http://www.computerix.info/skripten/mem-bugs.pdf">http://www=
.computerix.info/skripten/mem-bugs.pdf</a></li>
<li><a href=3D"https://en.wikibooks.org/wiki/Linux_Applications_Debugging_T=
echniques/Leaks">https://en.wikibooks.org/wiki/Linux_Applications_Debugging=
_Techniques/Leaks</a></li>
<li><a href=3D"https://en.wikipedia.org/wiki/Memory_debugger">https://en.wi=
kipedia.org/wiki/Memory_debugger</a></li>
<li><a href=3D"https://nebelwelt.net/publications/students/11fs-kravina-lig=
htweight_memory_tracing.pdf">https://nebelwelt.net/publications/students/11=
fs-kravina-lightweight_memory_tracing.pdf</a></li>
<li><a href=3D"https://panthema.net/2013/malloc_count/">https://panthema.ne=
t/2013/malloc_count/</a></li>
<li><a href=3D"http://www.burningcutlery.com/derek/docs/drmem-CGO11.pdf">ht=
tp://www.burningcutlery.com/derek/docs/drmem-CGO11.pdf</a></li>
<li><a href=3D"https://github.com/DataChi/memdb">https://github.com/DataChi=
/memdb</a></li>
<li><a href=3D"https://hshrzd.wordpress.com/2018/07/16/how-to-compile-a-pin=
-tool-using-visual-studio-2017/">https://hshrzd.wordpress.com/2018/07/16/ho=
w-to-compile-a-pin-tool-using-visual-studio-2017/</a></li>
</ul>
<h5 id=3D"videos">Videos</h5>
<ul>
<li><a href=3D"https://www.youtube.com/watch?v=3DZt74lOuU6zc">Implementing =
an LLVM based Dynamic Binary Instrumentation framework</a></li>
<li><a href=3D"https://www.youtube.com/watch?v=3DIeMCCZD5kVA">DEF CON 15 - =
Quist and Valsmith - Covert Debugging</a></li>
<li><a href=3D"https://www.youtube.com/watch?v=3DYtw4Bz1gTzY">HIRBSecConf 2=
009 - Travis Ormandy - Making Software Dumber</a></li>
<li><a href=3D"https://www.youtube.com/watch?v=3Duc1mbN9EJKQ">Ole Andr=C3=
=A9 Vadla Ravn=C3=A5s - Frida: The engineering behind the reverse-engineeri=
ng</a></li>
<li><a href=3D"https://www.youtube.com/watch?v=3DV-DiwxoeXMs">Finding secur=
ity vulnerabilities with modern fuzzing techniques (RuhrSec 2018)</a> (mult=
iple references to dynamic binary instrumentation)</li>
</ul>

      </div>


      <footer>
       =20


       =20
       =20
       =20
      </footer>
    </article>

   =20
  </section>

      </div>

     =20

    </main>

   =20
     =20
       =20
       =20
     =20
   =20

   =20

   =20

   =20

   =20

   =20

   =20
 =20


</body></html>
------MultipartBoundary--WJYGjXZBIsLH8W9XYSwBFOvHaqe9Rm2yqzypfCs1Nm----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://fonts.googleapis.com/css?family=Lato:400,700%7CMerriweather:300,700%7CSource+Code+Pro:400,700&display=swap

@charset "utf-8";

@font-face { font-family: Lato; font-style: normal; font-weight: 400; font-=
display: swap; src: url("https://fonts.gstatic.com/s/lato/v24/S6uyw4BMUTPHj=
xAwXjeu.woff2") format("woff2"); unicode-range: U+100-2AF, U+304, U+308, U+=
329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+=
2C60-2C7F, U+A720-A7FF; }

@font-face { font-family: Lato; font-style: normal; font-weight: 400; font-=
display: swap; src: url("https://fonts.gstatic.com/s/lato/v24/S6uyw4BMUTPHj=
x4wXg.woff2") format("woff2"); unicode-range: U+0-FF, U+131, U+152-153, U+2=
BB-2BC, U+2C6, U+2DA, U+2DC, U+304, U+308, U+329, U+2000-206F, U+2074, U+20=
AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }

@font-face { font-family: Lato; font-style: normal; font-weight: 700; font-=
display: swap; src: url("https://fonts.gstatic.com/s/lato/v24/S6u9w4BMUTPHh=
6UVSwaPGR_p.woff2") format("woff2"); unicode-range: U+100-2AF, U+304, U+308=
, U+329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113=
, U+2C60-2C7F, U+A720-A7FF; }

@font-face { font-family: Lato; font-style: normal; font-weight: 700; font-=
display: swap; src: url("https://fonts.gstatic.com/s/lato/v24/S6u9w4BMUTPHh=
6UVSwiPGQ.woff2") format("woff2"); unicode-range: U+0-FF, U+131, U+152-153,=
 U+2BB-2BC, U+2C6, U+2DA, U+2DC, U+304, U+308, U+329, U+2000-206F, U+2074, =
U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }

@font-face { font-family: Merriweather; font-style: normal; font-weight: 30=
0; font-display: swap; src: url("https://fonts.gstatic.com/s/merriweather/v=
30/u-4n0qyriQwlOrhSvowK_l521wRZVcf6lvg.woff2") format("woff2"); unicode-ran=
ge: U+460-52F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F; =
}

@font-face { font-family: Merriweather; font-style: normal; font-weight: 30=
0; font-display: swap; src: url("https://fonts.gstatic.com/s/merriweather/v=
30/u-4n0qyriQwlOrhSvowK_l521wRZXMf6lvg.woff2") format("woff2"); unicode-ran=
ge: U+301, U+400-45F, U+490-491, U+4B0-4B1, U+2116; }

@font-face { font-family: Merriweather; font-style: normal; font-weight: 30=
0; font-display: swap; src: url("https://fonts.gstatic.com/s/merriweather/v=
30/u-4n0qyriQwlOrhSvowK_l521wRZV8f6lvg.woff2") format("woff2"); unicode-ran=
ge: U+102-103, U+110-111, U+128-129, U+168-169, U+1A0-1A1, U+1AF-1B0, U+300=
-301, U+303-304, U+308-309, U+323, U+329, U+1EA0-1EF9, U+20AB; }

@font-face { font-family: Merriweather; font-style: normal; font-weight: 30=
0; font-display: swap; src: url("https://fonts.gstatic.com/s/merriweather/v=
30/u-4n0qyriQwlOrhSvowK_l521wRZVsf6lvg.woff2") format("woff2"); unicode-ran=
ge: U+100-2AF, U+304, U+308, U+329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A=
0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF; }

@font-face { font-family: Merriweather; font-style: normal; font-weight: 30=
0; font-display: swap; src: url("https://fonts.gstatic.com/s/merriweather/v=
30/u-4n0qyriQwlOrhSvowK_l521wRZWMf6.woff2") format("woff2"); unicode-range:=
 U+0-FF, U+131, U+152-153, U+2BB-2BC, U+2C6, U+2DA, U+2DC, U+304, U+308, U+=
329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U=
+FEFF, U+FFFD; }

@font-face { font-family: Merriweather; font-style: normal; font-weight: 70=
0; font-display: swap; src: url("https://fonts.gstatic.com/s/merriweather/v=
30/u-4n0qyriQwlOrhSvowK_l52xwNZVcf6lvg.woff2") format("woff2"); unicode-ran=
ge: U+460-52F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F; =
}

@font-face { font-family: Merriweather; font-style: normal; font-weight: 70=
0; font-display: swap; src: url("https://fonts.gstatic.com/s/merriweather/v=
30/u-4n0qyriQwlOrhSvowK_l52xwNZXMf6lvg.woff2") format("woff2"); unicode-ran=
ge: U+301, U+400-45F, U+490-491, U+4B0-4B1, U+2116; }

@font-face { font-family: Merriweather; font-style: normal; font-weight: 70=
0; font-display: swap; src: url("https://fonts.gstatic.com/s/merriweather/v=
30/u-4n0qyriQwlOrhSvowK_l52xwNZV8f6lvg.woff2") format("woff2"); unicode-ran=
ge: U+102-103, U+110-111, U+128-129, U+168-169, U+1A0-1A1, U+1AF-1B0, U+300=
-301, U+303-304, U+308-309, U+323, U+329, U+1EA0-1EF9, U+20AB; }

@font-face { font-family: Merriweather; font-style: normal; font-weight: 70=
0; font-display: swap; src: url("https://fonts.gstatic.com/s/merriweather/v=
30/u-4n0qyriQwlOrhSvowK_l52xwNZVsf6lvg.woff2") format("woff2"); unicode-ran=
ge: U+100-2AF, U+304, U+308, U+329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A=
0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF; }

@font-face { font-family: Merriweather; font-style: normal; font-weight: 70=
0; font-display: swap; src: url("https://fonts.gstatic.com/s/merriweather/v=
30/u-4n0qyriQwlOrhSvowK_l52xwNZWMf6.woff2") format("woff2"); unicode-range:=
 U+0-FF, U+131, U+152-153, U+2BB-2BC, U+2C6, U+2DA, U+2DC, U+304, U+308, U+=
329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U=
+FEFF, U+FFFD; }

@font-face { font-family: "Source Code Pro"; font-style: normal; font-weigh=
t: 400; font-display: swap; src: url("https://fonts.gstatic.com/s/sourcecod=
epro/v23/HI_SiYsKILxRpg3hIP6sJ7fM7PqlMOvWjMY.woff2") format("woff2"); unico=
de-range: U+460-52F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-=
FE2F; }

@font-face { font-family: "Source Code Pro"; font-style: normal; font-weigh=
t: 400; font-display: swap; src: url("https://fonts.gstatic.com/s/sourcecod=
epro/v23/HI_SiYsKILxRpg3hIP6sJ7fM7PqlOevWjMY.woff2") format("woff2"); unico=
de-range: U+301, U+400-45F, U+490-491, U+4B0-4B1, U+2116; }

@font-face { font-family: "Source Code Pro"; font-style: normal; font-weigh=
t: 400; font-display: swap; src: url("https://fonts.gstatic.com/s/sourcecod=
epro/v23/HI_SiYsKILxRpg3hIP6sJ7fM7PqlMevWjMY.woff2") format("woff2"); unico=
de-range: U+1F00-1FFF; }

@font-face { font-family: "Source Code Pro"; font-style: normal; font-weigh=
t: 400; font-display: swap; src: url("https://fonts.gstatic.com/s/sourcecod=
epro/v23/HI_SiYsKILxRpg3hIP6sJ7fM7PqlPuvWjMY.woff2") format("woff2"); unico=
de-range: U+370-3FF; }

@font-face { font-family: "Source Code Pro"; font-style: normal; font-weigh=
t: 400; font-display: swap; src: url("https://fonts.gstatic.com/s/sourcecod=
epro/v23/HI_SiYsKILxRpg3hIP6sJ7fM7PqlMuvWjMY.woff2") format("woff2"); unico=
de-range: U+102-103, U+110-111, U+128-129, U+168-169, U+1A0-1A1, U+1AF-1B0,=
 U+300-301, U+303-304, U+308-309, U+323, U+329, U+1EA0-1EF9, U+20AB; }

@font-face { font-family: "Source Code Pro"; font-style: normal; font-weigh=
t: 400; font-display: swap; src: url("https://fonts.gstatic.com/s/sourcecod=
epro/v23/HI_SiYsKILxRpg3hIP6sJ7fM7PqlM-vWjMY.woff2") format("woff2"); unico=
de-range: U+100-2AF, U+304, U+308, U+329, U+1E00-1E9F, U+1EF2-1EFF, U+2020,=
 U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF; }

@font-face { font-family: "Source Code Pro"; font-style: normal; font-weigh=
t: 400; font-display: swap; src: url("https://fonts.gstatic.com/s/sourcecod=
epro/v23/HI_SiYsKILxRpg3hIP6sJ7fM7PqlPevW.woff2") format("woff2"); unicode-=
range: U+0-FF, U+131, U+152-153, U+2BB-2BC, U+2C6, U+2DA, U+2DC, U+304, U+3=
08, U+329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2=
215, U+FEFF, U+FFFD; }

@font-face { font-family: "Source Code Pro"; font-style: normal; font-weigh=
t: 700; font-display: swap; src: url("https://fonts.gstatic.com/s/sourcecod=
epro/v23/HI_SiYsKILxRpg3hIP6sJ7fM7PqlMOvWjMY.woff2") format("woff2"); unico=
de-range: U+460-52F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-=
FE2F; }

@font-face { font-family: "Source Code Pro"; font-style: normal; font-weigh=
t: 700; font-display: swap; src: url("https://fonts.gstatic.com/s/sourcecod=
epro/v23/HI_SiYsKILxRpg3hIP6sJ7fM7PqlOevWjMY.woff2") format("woff2"); unico=
de-range: U+301, U+400-45F, U+490-491, U+4B0-4B1, U+2116; }

@font-face { font-family: "Source Code Pro"; font-style: normal; font-weigh=
t: 700; font-display: swap; src: url("https://fonts.gstatic.com/s/sourcecod=
epro/v23/HI_SiYsKILxRpg3hIP6sJ7fM7PqlMevWjMY.woff2") format("woff2"); unico=
de-range: U+1F00-1FFF; }

@font-face { font-family: "Source Code Pro"; font-style: normal; font-weigh=
t: 700; font-display: swap; src: url("https://fonts.gstatic.com/s/sourcecod=
epro/v23/HI_SiYsKILxRpg3hIP6sJ7fM7PqlPuvWjMY.woff2") format("woff2"); unico=
de-range: U+370-3FF; }

@font-face { font-family: "Source Code Pro"; font-style: normal; font-weigh=
t: 700; font-display: swap; src: url("https://fonts.gstatic.com/s/sourcecod=
epro/v23/HI_SiYsKILxRpg3hIP6sJ7fM7PqlMuvWjMY.woff2") format("woff2"); unico=
de-range: U+102-103, U+110-111, U+128-129, U+168-169, U+1A0-1A1, U+1AF-1B0,=
 U+300-301, U+303-304, U+308-309, U+323, U+329, U+1EA0-1EF9, U+20AB; }

@font-face { font-family: "Source Code Pro"; font-style: normal; font-weigh=
t: 700; font-display: swap; src: url("https://fonts.gstatic.com/s/sourcecod=
epro/v23/HI_SiYsKILxRpg3hIP6sJ7fM7PqlM-vWjMY.woff2") format("woff2"); unico=
de-range: U+100-2AF, U+304, U+308, U+329, U+1E00-1E9F, U+1EF2-1EFF, U+2020,=
 U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF; }

@font-face { font-family: "Source Code Pro"; font-style: normal; font-weigh=
t: 700; font-display: swap; src: url("https://fonts.gstatic.com/s/sourcecod=
epro/v23/HI_SiYsKILxRpg3hIP6sJ7fM7PqlPevW.woff2") format("woff2"); unicode-=
range: U+0-FF, U+131, U+152-153, U+2BB-2BC, U+2C6, U+2DA, U+2DC, U+304, U+3=
08, U+329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2=
215, U+FEFF, U+FFFD; }
------MultipartBoundary--WJYGjXZBIsLH8W9XYSwBFOvHaqe9Rm2yqzypfCs1Nm----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://cdn.jsdelivr.net/npm/fork-awesome@1.1.7/css/fork-awesome.min.css

@charset "utf-8";

@font-face { font-family: ForkAwesome; src: url("../fonts/forkawesome-webfo=
nt.woff2?v=3D1.1.7") format("woff2"), url("../fonts/forkawesome-webfont.wof=
f?v=3D1.1.7") format("woff"), url("../fonts/forkawesome-webfont.ttf?v=3D1.1=
.7") format("truetype"); font-weight: 400; font-style: normal; }

.fa { display: inline-block; font-style: normal; font-variant: normal; font=
-size-adjust: none; font-kerning: auto; font-optical-sizing: auto; font-fea=
ture-settings: normal; font-variation-settings: normal; font-weight: normal=
; font-stretch: normal; line-height: 1; font-family: ForkAwesome; font-size=
: inherit; text-rendering: auto; -webkit-font-smoothing: antialiased; }

.fa-lg { font-size: 1.33333em; line-height: 0.75em; vertical-align: -15%; }

.fa-2x { font-size: 2em; }

.fa-3x { font-size: 3em; }

.fa-4x { font-size: 4em; }

.fa-5x { font-size: 5em; }

.fa-fw { width: 1.28571em; text-align: center; }

.fa-ul { padding-left: 0px; margin-left: 2.14286em; list-style-type: none; =
}

.fa-ul > li { position: relative; }

.fa-li { position: absolute; left: -2.14286em; width: 2.14286em; top: 0.142=
857em; text-align: center; }

.fa-li.fa-lg { left: -1.85714em; }

.fa-border { padding: 0.2em 0.25em 0.15em; border: 0.08em solid rgb(238, 23=
8, 238); border-radius: 0.1em; }

.fa-pull-left { float: left; }

.fa-pull-right { float: right; }

.fa.fa-pull-left { margin-right: 0.3em; }

.fa.fa-pull-right { margin-left: 0.3em; }

.pull-right { float: right; }

.pull-left { float: left; }

.fa.pull-left { margin-right: 0.3em; }

.fa.pull-right { margin-left: 0.3em; }

.fa-spin { animation: 2s linear 0s infinite normal none running fa-spin; }

.fa-pulse { animation: 1s steps(8) 0s infinite normal none running fa-spin;=
 }

@-webkit-keyframes fa-spin {=20
  0% { transform: rotate(0deg); }
  100% { transform: rotate(359deg); }
}

@keyframes fa-spin {=20
  0% { transform: rotate(0deg); }
  100% { transform: rotate(359deg); }
}

.fa-rotate-90 { transform: rotate(90deg); }

.fa-rotate-180 { transform: rotate(180deg); }

.fa-rotate-270 { transform: rotate(270deg); }

.fa-flip-horizontal { transform: scale(-1, 1); }

.fa-flip-vertical { transform: scale(1, -1); }

:root .fa-flip-horizontal, :root .fa-flip-vertical, :root .fa-rotate-180, :=
root .fa-rotate-270, :root .fa-rotate-90 { filter: none; }

.fa-stack { position: relative; display: inline-block; width: 2em; height: =
2em; line-height: 2em; vertical-align: middle; }

.fa-stack-1x, .fa-stack-2x { position: absolute; left: 0px; width: 100%; te=
xt-align: center; }

.fa-stack-1x { line-height: inherit; }

.fa-stack-2x { font-size: 2em; }

.fa-inverse { color: rgb(255, 255, 255); }

.fa-glass::before { content: "=EF=80=80"; }

.fa-music::before { content: "=EF=80=81"; }

.fa-search::before { content: "=EF=80=82"; }

.fa-envelope-o::before { content: "=EF=80=83"; }

.fa-heart::before { content: "=EF=80=84"; }

.fa-star::before { content: "=EF=80=85"; }

.fa-star-o::before { content: "=EF=80=86"; }

.fa-user::before { content: "=EF=80=87"; }

.fa-film::before { content: "=EF=80=88"; }

.fa-th-large::before { content: "=EF=80=89"; }

.fa-th::before { content: "=EF=80=8A"; }

.fa-th-list::before { content: "=EF=80=8B"; }

.fa-check::before { content: "=EF=80=8C"; }

.fa-close::before, .fa-remove::before, .fa-times::before { content: "=EF=80=
=8D"; }

.fa-search-plus::before { content: "=EF=80=8E"; }

.fa-search-minus::before { content: "=EF=80=90"; }

.fa-power-off::before { content: "=EF=80=91"; }

.fa-signal::before { content: "=EF=80=92"; }

.fa-cog::before, .fa-gear::before { content: "=EF=80=93"; }

.fa-trash-o::before { content: "=EF=80=94"; }

.fa-home::before { content: "=EF=80=95"; }

.fa-file-o::before { content: "=EF=80=96"; }

.fa-clock-o::before { content: "=EF=80=97"; }

.fa-road::before { content: "=EF=80=98"; }

.fa-download::before { content: "=EF=80=99"; }

.fa-arrow-circle-o-down::before { content: "=EF=80=9A"; }

.fa-arrow-circle-o-up::before { content: "=EF=80=9B"; }

.fa-inbox::before { content: "=EF=80=9C"; }

.fa-play-circle-o::before { content: "=EF=80=9D"; }

.fa-repeat::before, .fa-rotate-right::before { content: "=EF=80=9E"; }

.fa-refresh::before, .fa-sync::before { content: "=EF=80=A1"; }

.fa-list-alt::before { content: "=EF=80=A2"; }

.fa-lock::before { content: "=EF=80=A3"; }

.fa-flag::before { content: "=EF=80=A4"; }

.fa-headphones::before { content: "=EF=80=A5"; }

.fa-volume-off::before { content: "=EF=80=A6"; }

.fa-volume-down::before { content: "=EF=80=A7"; }

.fa-volume-up::before { content: "=EF=80=A8"; }

.fa-qrcode::before { content: "=EF=80=A9"; }

.fa-barcode::before { content: "=EF=80=AA"; }

.fa-tag::before { content: "=EF=80=AB"; }

.fa-tags::before { content: "=EF=80=AC"; }

.fa-book::before { content: "=EF=80=AD"; }

.fa-bookmark::before { content: "=EF=80=AE"; }

.fa-print::before { content: "=EF=80=AF"; }

.fa-camera::before { content: "=EF=80=B0"; }

.fa-font::before { content: "=EF=80=B1"; }

.fa-bold::before { content: "=EF=80=B2"; }

.fa-italic::before { content: "=EF=80=B3"; }

.fa-text-height::before { content: "=EF=80=B4"; }

.fa-text-width::before { content: "=EF=80=B5"; }

.fa-align-left::before { content: "=EF=80=B6"; }

.fa-align-center::before { content: "=EF=80=B7"; }

.fa-align-right::before { content: "=EF=80=B8"; }

.fa-align-justify::before { content: "=EF=80=B9"; }

.fa-list::before { content: "=EF=80=BA"; }

.fa-dedent::before, .fa-outdent::before { content: "=EF=80=BB"; }

.fa-indent::before { content: "=EF=80=BC"; }

.fa-video-camera::before, .fa-video::before { content: "=EF=80=BD"; }

.fa-image::before, .fa-photo::before, .fa-picture-o::before { content: "=EF=
=80=BE"; }

.fa-pencil::before { content: "=EF=81=80"; }

.fa-map-marker::before { content: "=EF=81=81"; }

.fa-adjust::before { content: "=EF=81=82"; }

.fa-tint::before { content: "=EF=81=83"; }

.fa-edit::before, .fa-pencil-square-o::before { content: "=EF=81=84"; }

.fa-share-square-o::before { content: "=EF=81=85"; }

.fa-check-square-o::before { content: "=EF=81=86"; }

.fa-arrows::before { content: "=EF=81=87"; }

.fa-step-backward::before { content: "=EF=81=88"; }

.fa-fast-backward::before { content: "=EF=81=89"; }

.fa-backward::before { content: "=EF=81=8A"; }

.fa-play::before { content: "=EF=81=8B"; }

.fa-pause::before { content: "=EF=81=8C"; }

.fa-stop::before { content: "=EF=81=8D"; }

.fa-forward::before { content: "=EF=81=8E"; }

.fa-fast-forward::before { content: "=EF=81=90"; }

.fa-step-forward::before { content: "=EF=81=91"; }

.fa-eject::before { content: "=EF=81=92"; }

.fa-chevron-left::before { content: "=EF=81=93"; }

.fa-chevron-right::before { content: "=EF=81=94"; }

.fa-plus-circle::before { content: "=EF=81=95"; }

.fa-minus-circle::before { content: "=EF=81=96"; }

.fa-times-circle::before { content: "=EF=81=97"; }

.fa-check-circle::before { content: "=EF=81=98"; }

.fa-question-circle::before { content: "=EF=81=99"; }

.fa-info-circle::before { content: "=EF=81=9A"; }

.fa-crosshairs::before { content: "=EF=81=9B"; }

.fa-times-circle-o::before { content: "=EF=81=9C"; }

.fa-check-circle-o::before { content: "=EF=81=9D"; }

.fa-ban::before { content: "=EF=81=9E"; }

.fa-arrow-left::before { content: "=EF=81=A0"; }

.fa-arrow-right::before { content: "=EF=81=A1"; }

.fa-arrow-up::before { content: "=EF=81=A2"; }

.fa-arrow-down::before { content: "=EF=81=A3"; }

.fa-mail-forward::before, .fa-share::before { content: "=EF=81=A4"; }

.fa-expand::before { content: "=EF=81=A5"; }

.fa-compress::before { content: "=EF=81=A6"; }

.fa-plus::before { content: "=EF=81=A7"; }

.fa-minus::before { content: "=EF=81=A8"; }

.fa-asterisk::before { content: "=EF=81=A9"; }

.fa-exclamation-circle::before { content: "=EF=81=AA"; }

.fa-gift::before { content: "=EF=81=AB"; }

.fa-leaf::before { content: "=EF=81=AC"; }

.fa-fire::before { content: "=EF=81=AD"; }

.fa-eye::before { content: "=EF=81=AE"; }

.fa-eye-slash::before { content: "=EF=81=B0"; }

.fa-exclamation-triangle::before, .fa-warning::before { content: "=EF=81=B1=
"; }

.fa-plane::before { content: "=EF=81=B2"; }

.fa-calendar::before { content: "=EF=81=B3"; }

.fa-random::before { content: "=EF=81=B4"; }

.fa-comment::before { content: "=EF=81=B5"; }

.fa-magnet::before { content: "=EF=81=B6"; }

.fa-chevron-up::before { content: "=EF=81=B7"; }

.fa-chevron-down::before { content: "=EF=81=B8"; }

.fa-retweet::before { content: "=EF=81=B9"; }

.fa-shopping-cart::before { content: "=EF=81=BA"; }

.fa-folder::before { content: "=EF=81=BB"; }

.fa-folder-open::before { content: "=EF=81=BC"; }

.fa-arrows-v::before { content: "=EF=81=BD"; }

.fa-arrows-h::before { content: "=EF=81=BE"; }

.fa-bar-chart-o::before, .fa-bar-chart::before { content: "=EF=82=80"; }

.fa-twitter-square::before { content: "=EF=82=81"; }

.fa-facebook-square::before { content: "=EF=82=82"; }

.fa-camera-retro::before { content: "=EF=82=83"; }

.fa-key::before { content: "=EF=82=84"; }

.fa-cogs::before, .fa-gears::before { content: "=EF=82=85"; }

.fa-comments::before { content: "=EF=82=86"; }

.fa-thumbs-o-up::before { content: "=EF=82=87"; }

.fa-thumbs-o-down::before { content: "=EF=82=88"; }

.fa-star-half::before { content: "=EF=82=89"; }

.fa-heart-o::before { content: "=EF=82=8A"; }

.fa-sign-out::before { content: "=EF=82=8B"; }

.fa-linkedin-square::before { content: "=EF=82=8C"; }

.fa-thumb-tack::before { content: "=EF=82=8D"; }

.fa-external-link::before { content: "=EF=82=8E"; }

.fa-sign-in::before { content: "=EF=82=90"; }

.fa-trophy::before { content: "=EF=82=91"; }

.fa-github-square::before { content: "=EF=82=92"; }

.fa-upload::before { content: "=EF=82=93"; }

.fa-lemon-o::before { content: "=EF=82=94"; }

.fa-phone::before { content: "=EF=82=95"; }

.fa-square-o::before { content: "=EF=82=96"; }

.fa-bookmark-o::before { content: "=EF=82=97"; }

.fa-phone-square::before { content: "=EF=82=98"; }

.fa-twitter::before { content: "=EF=82=99"; }

.fa-facebook-f::before, .fa-facebook::before { content: "=EF=82=9A"; }

.fa-github::before { content: "=EF=82=9B"; }

.fa-unlock::before { content: "=EF=82=9C"; }

.fa-credit-card::before { content: "=EF=82=9D"; }

.fa-feed::before, .fa-rss::before { content: "=EF=82=9E"; }

.fa-hdd-o::before { content: "=EF=82=A0"; }

.fa-bullhorn::before { content: "=EF=82=A1"; }

.fa-bell-o::before { content: "=EF=83=B3"; }

.fa-certificate::before { content: "=EF=82=A3"; }

.fa-hand-o-right::before { content: "=EF=82=A4"; }

.fa-hand-o-left::before { content: "=EF=82=A5"; }

.fa-hand-o-up::before { content: "=EF=82=A6"; }

.fa-hand-o-down::before { content: "=EF=82=A7"; }

.fa-arrow-circle-left::before { content: "=EF=82=A8"; }

.fa-arrow-circle-right::before { content: "=EF=82=A9"; }

.fa-arrow-circle-up::before { content: "=EF=82=AA"; }

.fa-arrow-circle-down::before { content: "=EF=82=AB"; }

.fa-globe::before { content: "=EF=82=AC"; }

.fa-globe-e::before { content: "=EF=8C=84"; }

.fa-globe-w::before { content: "=EF=8C=85"; }

.fa-wrench::before { content: "=EF=82=AD"; }

.fa-tasks::before { content: "=EF=82=AE"; }

.fa-filter::before { content: "=EF=82=B0"; }

.fa-briefcase::before { content: "=EF=82=B1"; }

.fa-arrows-alt::before { content: "=EF=82=B2"; }

.fa-community::before, .fa-group::before, .fa-users::before { content: "=EF=
=83=80"; }

.fa-chain::before, .fa-link::before { content: "=EF=83=81"; }

.fa-cloud::before { content: "=EF=83=82"; }

.fa-flask::before { content: "=EF=83=83"; }

.fa-cut::before, .fa-scissors::before { content: "=EF=83=84"; }

.fa-copy::before, .fa-files-o::before { content: "=EF=83=85"; }

.fa-paperclip::before { content: "=EF=83=86"; }

.fa-floppy-o::before, .fa-save::before { content: "=EF=83=87"; }

.fa-square::before { content: "=EF=83=88"; }

.fa-bars::before, .fa-navicon::before, .fa-reorder::before { content: "=EF=
=83=89"; }

.fa-list-ul::before { content: "=EF=83=8A"; }

.fa-list-ol::before { content: "=EF=83=8B"; }

.fa-strikethrough::before { content: "=EF=83=8C"; }

.fa-underline::before { content: "=EF=83=8D"; }

.fa-table::before { content: "=EF=83=8E"; }

.fa-magic::before { content: "=EF=83=90"; }

.fa-truck::before { content: "=EF=83=91"; }

.fa-pinterest::before { content: "=EF=83=92"; }

.fa-pinterest-square::before { content: "=EF=83=93"; }

.fa-google-plus-square::before { content: "=EF=83=94"; }

.fa-google-plus-g::before, .fa-google-plus::before { content: "=EF=83=95"; =
}

.fa-money::before { content: "=EF=83=96"; }

.fa-caret-down::before { content: "=EF=83=97"; }

.fa-caret-up::before { content: "=EF=83=98"; }

.fa-caret-left::before { content: "=EF=83=99"; }

.fa-caret-right::before { content: "=EF=83=9A"; }

.fa-columns::before { content: "=EF=83=9B"; }

.fa-sort::before, .fa-unsorted::before { content: "=EF=83=9C"; }

.fa-sort-desc::before, .fa-sort-down::before { content: "=EF=83=9D"; }

.fa-sort-asc::before, .fa-sort-up::before { content: "=EF=83=9E"; }

.fa-envelope::before { content: "=EF=83=A0"; }

.fa-linkedin::before { content: "=EF=83=A1"; }

.fa-rotate-left::before, .fa-undo::before { content: "=EF=83=A2"; }

.fa-gavel::before, .fa-legal::before { content: "=EF=83=A3"; }

.fa-dashboard::before, .fa-tachometer::before { content: "=EF=83=A4"; }

.fa-comment-o::before { content: "=EF=83=A5"; }

.fa-comments-o::before { content: "=EF=83=A6"; }

.fa-bolt::before, .fa-flash::before { content: "=EF=83=A7"; }

.fa-sitemap::before { content: "=EF=83=A8"; }

.fa-umbrella::before { content: "=EF=83=A9"; }

.fa-clipboard::before, .fa-paste::before { content: "=EF=83=AA"; }

.fa-lightbulb-o::before { content: "=EF=83=AB"; }

.fa-exchange::before { content: "=EF=83=AC"; }

.fa-cloud-download::before { content: "=EF=83=AD"; }

.fa-cloud-upload::before { content: "=EF=83=AE"; }

.fa-user-md::before { content: "=EF=83=B0"; }

.fa-stethoscope::before { content: "=EF=83=B1"; }

.fa-suitcase::before { content: "=EF=83=B2"; }

.fa-bell::before { content: "=EF=82=A2"; }

.fa-coffee::before { content: "=EF=83=B4"; }

.fa-cutlery::before, .fa-utensils::before { content: "=EF=83=B5"; }

.fa-file-text-o::before { content: "=EF=83=B6"; }

.fa-building-o::before { content: "=EF=83=B7"; }

.fa-hospital-o::before { content: "=EF=83=B8"; }

.fa-ambulance::before { content: "=EF=83=B9"; }

.fa-medkit::before { content: "=EF=83=BA"; }

.fa-fighter-jet::before { content: "=EF=83=BB"; }

.fa-beer::before { content: "=EF=83=BC"; }

.fa-h-square::before { content: "=EF=83=BD"; }

.fa-plus-square::before { content: "=EF=83=BE"; }

.fa-angle-double-left::before { content: "=EF=84=80"; }

.fa-angle-double-right::before { content: "=EF=84=81"; }

.fa-angle-double-up::before { content: "=EF=84=82"; }

.fa-angle-double-down::before { content: "=EF=84=83"; }

.fa-angle-left::before { content: "=EF=84=84"; }

.fa-angle-right::before { content: "=EF=84=85"; }

.fa-angle-up::before { content: "=EF=84=86"; }

.fa-angle-down::before { content: "=EF=84=87"; }

.fa-desktop::before { content: "=EF=84=88"; }

.fa-laptop::before { content: "=EF=84=89"; }

.fa-tablet::before { content: "=EF=84=8A"; }

.fa-mobile-phone::before, .fa-mobile::before { content: "=EF=84=8B"; }

.fa-circle-o::before { content: "=EF=84=8C"; }

.fa-quote-left::before { content: "=EF=84=8D"; }

.fa-quote-right::before { content: "=EF=84=8E"; }

.fa-spinner::before { content: "=EF=84=90"; }

.fa-circle::before { content: "=EF=84=91"; }

.fa-mail-reply::before, .fa-reply::before { content: "=EF=84=92"; }

.fa-github-alt::before { content: "=EF=84=93"; }

.fa-folder-o::before { content: "=EF=84=94"; }

.fa-folder-open-o::before { content: "=EF=84=95"; }

.fa-smile-o::before { content: "=EF=84=98"; }

.fa-frown-o::before { content: "=EF=84=99"; }

.fa-meh-o::before { content: "=EF=84=9A"; }

.fa-gamepad::before { content: "=EF=84=9B"; }

.fa-keyboard-o::before { content: "=EF=84=9C"; }

.fa-flag-o::before { content: "=EF=84=9D"; }

.fa-flag-checkered::before { content: "=EF=84=9E"; }

.fa-terminal::before { content: "=EF=84=A0"; }

.fa-code::before { content: "=EF=84=A1"; }

.fa-mail-reply-all::before, .fa-reply-all::before { content: "=EF=84=A2"; }

.fa-star-half-empty::before, .fa-star-half-full::before, .fa-star-half-o::b=
efore { content: "=EF=84=A3"; }

.fa-location-arrow::before { content: "=EF=84=A4"; }

.fa-crop::before { content: "=EF=84=A5"; }

.fa-code-fork::before { content: "=EF=84=A6"; }

.fa-chain-broken::before, .fa-unlink::before { content: "=EF=84=A7"; }

.fa-question::before { content: "=EF=84=A8"; }

.fa-info::before { content: "=EF=84=A9"; }

.fa-exclamation::before { content: "=EF=84=AA"; }

.fa-superscript::before { content: "=EF=84=AB"; }

.fa-subscript::before { content: "=EF=84=AC"; }

.fa-eraser::before { content: "=EF=84=AD"; }

.fa-puzzle-piece::before { content: "=EF=84=AE"; }

.fa-microphone::before { content: "=EF=84=B0"; }

.fa-microphone-slash::before { content: "=EF=84=B1"; }

.fa-shield::before { content: "=EF=84=B2"; }

.fa-calendar-o::before { content: "=EF=84=B3"; }

.fa-fire-extinguisher::before { content: "=EF=84=B4"; }

.fa-rocket::before { content: "=EF=84=B5"; }

.fa-maxcdn::before { content: "=EF=84=B6"; }

.fa-chevron-circle-left::before { content: "=EF=84=B7"; }

.fa-chevron-circle-right::before { content: "=EF=84=B8"; }

.fa-chevron-circle-up::before { content: "=EF=84=B9"; }

.fa-chevron-circle-down::before { content: "=EF=84=BA"; }

.fa-html5::before { content: "=EF=84=BB"; }

.fa-css3::before { content: "=EF=84=BC"; }

.fa-anchor::before { content: "=EF=84=BD"; }

.fa-unlock-alt::before { content: "=EF=84=BE"; }

.fa-bullseye::before { content: "=EF=85=80"; }

.fa-ellipsis-h::before { content: "=EF=85=81"; }

.fa-ellipsis-v::before { content: "=EF=85=82"; }

.fa-rss-square::before { content: "=EF=85=83"; }

.fa-play-circle::before { content: "=EF=85=84"; }

.fa-ticket::before { content: "=EF=85=85"; }

.fa-minus-square::before { content: "=EF=85=86"; }

.fa-minus-square-o::before { content: "=EF=85=87"; }

.fa-level-up::before { content: "=EF=85=88"; }

.fa-level-down::before { content: "=EF=85=89"; }

.fa-check-square::before { content: "=EF=85=8A"; }

.fa-pencil-square::before { content: "=EF=85=8B"; }

.fa-external-link-square::before { content: "=EF=85=8C"; }

.fa-share-square::before { content: "=EF=85=8D"; }

.fa-compass::before { content: "=EF=85=8E"; }

.fa-caret-square-o-down::before, .fa-toggle-down::before { content: "=EF=85=
=90"; }

.fa-caret-square-o-up::before, .fa-toggle-up::before { content: "=EF=85=91"=
; }

.fa-caret-square-o-right::before, .fa-toggle-right::before { content: "=EF=
=85=92"; }

.fa-eur::before, .fa-euro::before { content: "=EF=85=93"; }

.fa-gbp::before, .fa-pound::before { content: "=EF=85=94"; }

.fa-dollar::before, .fa-usd::before { content: "=EF=85=95"; }

.fa-inr::before, .fa-rupee::before { content: "=EF=85=96"; }

.fa-cny::before, .fa-jpy::before, .fa-rmb::before, .fa-yen::before { conten=
t: "=EF=85=97"; }

.fa-rouble::before, .fa-rub::before, .fa-ruble::before { content: "=EF=85=
=98"; }

.fa-krw::before, .fa-won::before { content: "=EF=85=99"; }

.fa-bitcoin::before, .fa-btc::before { content: "=EF=85=9A"; }

.fa-file::before { content: "=EF=85=9B"; }

.fa-file-text::before { content: "=EF=85=9C"; }

.fa-sort-alpha-asc::before, .fa-sort-alpha-down::before { content: "=EF=85=
=9D"; }

.fa-sort-alpha-desc::before, .fa-sort-alpha-up::before { content: "=EF=85=
=9E"; }

.fa-sort-amount-asc::before, .fa-sort-amount-down::before { content: "=EF=
=85=A0"; }

.fa-sort-amount-desc::before, .fa-sort-amount-up::before { content: "=EF=85=
=A1"; }

.fa-sort-numeric-asc::before, .fa-sort-numeric-down::before { content: "=EF=
=85=A2"; }

.fa-sort-numeric-desc::before, .fa-sort-numeric-up::before { content: "=EF=
=85=A3"; }

.fa-thumbs-up::before { content: "=EF=85=A4"; }

.fa-thumbs-down::before { content: "=EF=85=A5"; }

.fa-youtube-square::before { content: "=EF=85=A6"; }

.fa-youtube::before { content: "=EF=85=A7"; }

.fa-xing::before { content: "=EF=85=A8"; }

.fa-xing-square::before { content: "=EF=85=A9"; }

.fa-youtube-play::before { content: "=EF=85=AA"; }

.fa-dropbox::before { content: "=EF=85=AB"; }

.fa-stack-overflow::before { content: "=EF=85=AC"; }

.fa-instagram::before { content: "=EF=85=AD"; }

.fa-flickr::before { content: "=EF=85=AE"; }

.fa-adn::before { content: "=EF=85=B0"; }

.fa-bitbucket::before { content: "=EF=85=B1"; }

.fa-bitbucket-square::before { content: "=EF=85=B2"; }

.fa-tumblr::before { content: "=EF=85=B3"; }

.fa-tumblr-square::before { content: "=EF=85=B4"; }

.fa-long-arrow-down::before { content: "=EF=85=B5"; }

.fa-long-arrow-up::before { content: "=EF=85=B6"; }

.fa-long-arrow-left::before { content: "=EF=85=B7"; }

.fa-long-arrow-right::before { content: "=EF=85=B8"; }

.fa-apple::before { content: "=EF=85=B9"; }

.fa-windows::before { content: "=EF=85=BA"; }

.fa-android::before { content: "=EF=85=BB"; }

.fa-linux::before { content: "=EF=85=BC"; }

.fa-dribbble::before { content: "=EF=85=BD"; }

.fa-skype::before { content: "=EF=85=BE"; }

.fa-foursquare::before { content: "=EF=86=80"; }

.fa-trello::before { content: "=EF=86=81"; }

.fa-female::before { content: "=EF=86=82"; }

.fa-male::before { content: "=EF=86=83"; }

.fa-gittip::before, .fa-gratipay::before { content: "=EF=86=84"; }

.fa-sun-o::before { content: "=EF=86=85"; }

.fa-moon-o::before { content: "=EF=86=86"; }

.fa-archive::before { content: "=EF=86=87"; }

.fa-bug::before { content: "=EF=86=88"; }

.fa-vk::before { content: "=EF=86=89"; }

.fa-weibo::before { content: "=EF=86=8A"; }

.fa-renren::before { content: "=EF=86=8B"; }

.fa-pagelines::before { content: "=EF=86=8C"; }

.fa-stack-exchange::before { content: "=EF=86=8D"; }

.fa-arrow-circle-o-right::before { content: "=EF=86=8E"; }

.fa-arrow-circle-o-left::before { content: "=EF=86=90"; }

.fa-caret-square-o-left::before, .fa-toggle-left::before { content: "=EF=86=
=91"; }

.fa-dot-circle-o::before { content: "=EF=86=92"; }

.fa-wheelchair::before { content: "=EF=86=93"; }

.fa-vimeo-square::before { content: "=EF=86=94"; }

.fa-try::before, .fa-turkish-lira::before { content: "=EF=86=95"; }

.fa-plus-square-o::before { content: "=EF=86=96"; }

.fa-space-shuttle::before { content: "=EF=86=97"; }

.fa-slack::before { content: "=EF=86=98"; }

.fa-envelope-square::before { content: "=EF=86=99"; }

.fa-wordpress::before { content: "=EF=86=9A"; }

.fa-openid::before { content: "=EF=86=9B"; }

.fa-bank::before, .fa-institution::before, .fa-university::before { content=
: "=EF=86=9C"; }

.fa-graduation-cap::before, .fa-mortar-board::before { content: "=EF=86=9D"=
; }

.fa-yahoo::before { content: "=EF=86=9E"; }

.fa-google::before { content: "=EF=86=A0"; }

.fa-reddit::before { content: "=EF=86=A1"; }

.fa-reddit-square::before { content: "=EF=86=A2"; }

.fa-stumbleupon-circle::before { content: "=EF=86=A3"; }

.fa-stumbleupon::before { content: "=EF=86=A4"; }

.fa-delicious::before { content: "=EF=86=A5"; }

.fa-digg::before { content: "=EF=86=A6"; }

.fa-drupal::before { content: "=EF=86=A9"; }

.fa-joomla::before { content: "=EF=86=AA"; }

.fa-language::before { content: "=EF=86=AB"; }

.fa-fax::before { content: "=EF=86=AC"; }

.fa-building::before { content: "=EF=86=AD"; }

.fa-child::before { content: "=EF=86=AE"; }

.fa-paw::before { content: "=EF=86=B0"; }

.fa-spoon::before, .fa-utensil-spoon::before { content: "=EF=86=B1"; }

.fa-cube::before { content: "=EF=86=B2"; }

.fa-cubes::before { content: "=EF=86=B3"; }

.fa-behance::before { content: "=EF=86=B4"; }

.fa-behance-square::before { content: "=EF=86=B5"; }

.fa-steam::before { content: "=EF=86=B6"; }

.fa-steam-square::before { content: "=EF=86=B7"; }

.fa-recycle::before { content: "=EF=86=B8"; }

.fa-automobile::before, .fa-car::before { content: "=EF=86=B9"; }

.fa-cab::before, .fa-taxi::before { content: "=EF=86=BA"; }

.fa-tree::before { content: "=EF=86=BB"; }

.fa-spotify::before { content: "=EF=86=BC"; }

.fa-deviantart::before { content: "=EF=86=BD"; }

.fa-soundcloud::before { content: "=EF=86=BE"; }

.fa-database::before { content: "=EF=87=80"; }

.fa-file-pdf-o::before { content: "=EF=87=81"; }

.fa-file-word-o::before { content: "=EF=87=82"; }

.fa-file-excel-o::before { content: "=EF=87=83"; }

.fa-file-powerpoint-o::before { content: "=EF=87=84"; }

.fa-file-image-o::before, .fa-file-photo-o::before, .fa-file-picture-o::bef=
ore { content: "=EF=87=85"; }

.fa-file-archive-o::before, .fa-file-zip-o::before { content: "=EF=87=86"; =
}

.fa-file-audio-o::before, .fa-file-sound-o::before { content: "=EF=87=87"; =
}

.fa-file-movie-o::before, .fa-file-video-o::before { content: "=EF=87=88"; =
}

.fa-file-code-o::before { content: "=EF=87=89"; }

.fa-vine::before { content: "=EF=87=8A"; }

.fa-codepen::before { content: "=EF=87=8B"; }

.fa-jsfiddle::before { content: "=EF=87=8C"; }

.fa-life-bouy::before, .fa-life-buoy::before, .fa-life-ring::before, .fa-li=
fe-saver::before, .fa-support::before { content: "=EF=87=8D"; }

.fa-circle-o-notch::before { content: "=EF=87=8E"; }

.fa-ra::before, .fa-rebel::before, .fa-resistance::before { content: "=EF=
=87=90"; }

.fa-empire::before, .fa-ge::before { content: "=EF=87=91"; }

.fa-git-square::before { content: "=EF=87=92"; }

.fa-git::before { content: "=EF=87=93"; }

.fa-hacker-news::before, .fa-y-combinator-square::before, .fa-yc-square::be=
fore { content: "=EF=87=94"; }

.fa-tencent-weibo::before { content: "=EF=87=95"; }

.fa-qq::before { content: "=EF=87=96"; }

.fa-wechat::before, .fa-weixin::before { content: "=EF=87=97"; }

.fa-paper-plane::before, .fa-send::before { content: "=EF=87=98"; }

.fa-paper-plane-o::before, .fa-send-o::before { content: "=EF=87=99"; }

.fa-history::before { content: "=EF=87=9A"; }

.fa-circle-thin::before { content: "=EF=87=9B"; }

.fa-header::before, .fa-heading::before { content: "=EF=87=9C"; }

.fa-paragraph::before { content: "=EF=87=9D"; }

.fa-sliders::before { content: "=EF=87=9E"; }

.fa-share-alt::before { content: "=EF=87=A0"; }

.fa-share-alt-square::before { content: "=EF=87=A1"; }

.fa-bomb::before { content: "=EF=87=A2"; }

.fa-futbol-o::before, .fa-soccer-ball-o::before { content: "=EF=87=A3"; }

.fa-tty::before { content: "=EF=87=A4"; }

.fa-binoculars::before { content: "=EF=87=A5"; }

.fa-plug::before { content: "=EF=87=A6"; }

.fa-slideshare::before { content: "=EF=87=A7"; }

.fa-twitch::before { content: "=EF=87=A8"; }

.fa-yelp::before { content: "=EF=87=A9"; }

.fa-newspaper-o::before { content: "=EF=87=AA"; }

.fa-wifi::before { content: "=EF=87=AB"; }

.fa-calculator::before { content: "=EF=87=AC"; }

.fa-paypal::before { content: "=EF=87=AD"; }

.fa-google-wallet::before { content: "=EF=87=AE"; }

.fa-cc-visa::before { content: "=EF=87=B0"; }

.fa-cc-mastercard::before { content: "=EF=87=B1"; }

.fa-cc-discover::before { content: "=EF=87=B2"; }

.fa-cc-amex::before { content: "=EF=87=B3"; }

.fa-cc-paypal::before { content: "=EF=87=B4"; }

.fa-cc-stripe::before { content: "=EF=87=B5"; }

.fa-bell-slash::before { content: "=EF=87=B6"; }

.fa-bell-slash-o::before { content: "=EF=87=B7"; }

.fa-trash::before { content: "=EF=87=B8"; }

.fa-copyright::before { content: "=EF=87=B9"; }

.fa-at::before { content: "=EF=87=BA"; }

.fa-eyedropper::before { content: "=EF=87=BB"; }

.fa-paint-brush::before { content: "=EF=87=BC"; }

.fa-birthday-cake::before { content: "=EF=87=BD"; }

.fa-area-chart::before { content: "=EF=87=BE"; }

.fa-pie-chart::before { content: "=EF=88=80"; }

.fa-line-chart::before { content: "=EF=88=81"; }

.fa-lastfm::before { content: "=EF=88=82"; }

.fa-lastfm-square::before { content: "=EF=88=83"; }

.fa-toggle-off::before { content: "=EF=88=84"; }

.fa-toggle-on::before { content: "=EF=88=85"; }

.fa-bicycle::before { content: "=EF=88=86"; }

.fa-bus::before { content: "=EF=88=87"; }

.fa-ioxhost::before { content: "=EF=88=88"; }

.fa-angellist::before { content: "=EF=88=89"; }

.fa-cc::before, .fa-closed-captioning::before { content: "=EF=88=8A"; }

.fa-ils::before, .fa-shekel::before, .fa-sheqel::before { content: "=EF=88=
=8B"; }

.fa-meanpath::before { content: "=EF=88=8C"; }

.fa-buysellads::before { content: "=EF=88=8D"; }

.fa-connectdevelop::before { content: "=EF=88=8E"; }

.fa-dashcube::before { content: "=EF=88=90"; }

.fa-forumbee::before { content: "=EF=88=91"; }

.fa-leanpub::before { content: "=EF=88=92"; }

.fa-sellsy::before { content: "=EF=88=93"; }

.fa-shirtsinbulk::before { content: "=EF=88=94"; }

.fa-simplybuilt::before { content: "=EF=88=95"; }

.fa-skyatlas::before { content: "=EF=88=96"; }

.fa-cart-plus::before { content: "=EF=88=97"; }

.fa-cart-arrow-down::before { content: "=EF=88=98"; }

.fa-diamond::before, .fa-gem::before { content: "=EF=88=99"; }

.fa-ship::before { content: "=EF=88=9A"; }

.fa-user-secret::before { content: "=EF=88=9B"; }

.fa-motorcycle::before { content: "=EF=88=9C"; }

.fa-street-view::before { content: "=EF=88=9D"; }

.fa-heartbeat::before { content: "=EF=88=9E"; }

.fa-venus::before { content: "=EF=88=A1"; }

.fa-mars::before { content: "=EF=88=A2"; }

.fa-mercury::before { content: "=EF=88=A3"; }

.fa-intersex::before, .fa-transgender::before { content: "=EF=88=A4"; }

.fa-transgender-alt::before { content: "=EF=88=A5"; }

.fa-venus-double::before { content: "=EF=88=A6"; }

.fa-mars-double::before { content: "=EF=88=A7"; }

.fa-venus-mars::before { content: "=EF=88=A8"; }

.fa-mars-stroke::before { content: "=EF=88=A9"; }

.fa-mars-stroke-v::before { content: "=EF=88=AA"; }

.fa-mars-stroke-h::before { content: "=EF=88=AB"; }

.fa-neuter::before { content: "=EF=88=AC"; }

.fa-genderless::before { content: "=EF=88=AD"; }

.fa-facebook-official::before { content: "=EF=88=B0"; }

.fa-pinterest-p::before { content: "=EF=88=B1"; }

.fa-whatsapp::before { content: "=EF=88=B2"; }

.fa-server::before { content: "=EF=88=B3"; }

.fa-user-plus::before { content: "=EF=88=B4"; }

.fa-user-times::before { content: "=EF=88=B5"; }

.fa-bed::before, .fa-hotel::before { content: "=EF=88=B6"; }

.fa-viacoin::before { content: "=EF=88=B7"; }

.fa-train::before { content: "=EF=88=B8"; }

.fa-subway::before { content: "=EF=88=B9"; }

.fa-medium::before { content: "=EF=88=BA"; }

.fa-medium-square::before { content: "=EF=8B=B8"; }

.fa-y-combinator::before, .fa-yc::before { content: "=EF=88=BB"; }

.fa-optin-monster::before { content: "=EF=88=BC"; }

.fa-opencart::before { content: "=EF=88=BD"; }

.fa-expeditedssl::before { content: "=EF=88=BE"; }

.fa-battery-4::before, .fa-battery-full::before, .fa-battery::before { cont=
ent: "=EF=89=80"; }

.fa-battery-3::before, .fa-battery-three-quarters::before { content: "=EF=
=89=81"; }

.fa-battery-2::before, .fa-battery-half::before { content: "=EF=89=82"; }

.fa-battery-1::before, .fa-battery-quarter::before { content: "=EF=89=83"; =
}

.fa-battery-0::before, .fa-battery-empty::before { content: "=EF=89=84"; }

.fa-mouse-pointer::before { content: "=EF=89=85"; }

.fa-i-cursor::before { content: "=EF=89=86"; }

.fa-object-group::before { content: "=EF=89=87"; }

.fa-object-ungroup::before { content: "=EF=89=88"; }

.fa-sticky-note::before { content: "=EF=89=89"; }

.fa-sticky-note-o::before { content: "=EF=89=8A"; }

.fa-cc-jcb::before { content: "=EF=89=8B"; }

.fa-cc-diners-club::before { content: "=EF=89=8C"; }

.fa-clone::before { content: "=EF=89=8D"; }

.fa-balance-scale::before { content: "=EF=89=8E"; }

.fa-hourglass-o::before { content: "=EF=89=90"; }

.fa-hourglass-1::before, .fa-hourglass-start::before { content: "=EF=89=91"=
; }

.fa-hourglass-2::before, .fa-hourglass-half::before { content: "=EF=89=92";=
 }

.fa-hourglass-3::before, .fa-hourglass-end::before { content: "=EF=89=93"; =
}

.fa-hourglass::before { content: "=EF=89=94"; }

.fa-hand-grab-o::before, .fa-hand-rock-o::before { content: "=EF=89=95"; }

.fa-hand-paper-o::before, .fa-hand-stop-o::before { content: "=EF=89=96"; }

.fa-hand-scissors-o::before { content: "=EF=89=97"; }

.fa-hand-lizard-o::before { content: "=EF=89=98"; }

.fa-hand-spock-o::before { content: "=EF=89=99"; }

.fa-hand-pointer-o::before { content: "=EF=89=9A"; }

.fa-hand-peace-o::before { content: "=EF=89=9B"; }

.fa-trademark::before { content: "=EF=89=9C"; }

.fa-registered::before { content: "=EF=89=9D"; }

.fa-creative-commons::before { content: "=EF=89=9E"; }

.fa-gg::before { content: "=EF=89=A0"; }

.fa-gg-circle::before { content: "=EF=89=A1"; }

.fa-tripadvisor::before { content: "=EF=89=A2"; }

.fa-odnoklassniki::before { content: "=EF=89=A3"; }

.fa-odnoklassniki-square::before { content: "=EF=89=A4"; }

.fa-get-pocket::before { content: "=EF=89=A5"; }

.fa-wikipedia-w::before { content: "=EF=89=A6"; }

.fa-safari::before { content: "=EF=89=A7"; }

.fa-chrome::before { content: "=EF=89=A8"; }

.fa-firefox::before { content: "=EF=89=A9"; }

.fa-opera::before { content: "=EF=89=AA"; }

.fa-internet-explorer::before { content: "=EF=89=AB"; }

.fa-television::before, .fa-tv::before { content: "=EF=89=AC"; }

.fa-contao::before { content: "=EF=89=AD"; }

.fa-500px::before { content: "=EF=89=AE"; }

.fa-amazon::before { content: "=EF=89=B0"; }

.fa-calendar-plus-o::before { content: "=EF=89=B1"; }

.fa-calendar-minus-o::before { content: "=EF=89=B2"; }

.fa-calendar-times-o::before { content: "=EF=89=B3"; }

.fa-calendar-check-o::before { content: "=EF=89=B4"; }

.fa-industry::before { content: "=EF=89=B5"; }

.fa-map-pin::before { content: "=EF=89=B6"; }

.fa-map-signs::before { content: "=EF=89=B7"; }

.fa-map-o::before { content: "=EF=89=B8"; }

.fa-map::before { content: "=EF=89=B9"; }

.fa-commenting::before { content: "=EF=89=BA"; }

.fa-commenting-o::before { content: "=EF=89=BB"; }

.fa-houzz::before { content: "=EF=89=BC"; }

.fa-vimeo-v::before, .fa-vimeo::before { content: "=EF=89=BD"; }

.fa-black-tie::before { content: "=EF=89=BE"; }

.fa-fonticons::before { content: "=EF=8A=80"; }

.fa-reddit-alien::before { content: "=EF=8A=81"; }

.fa-edge::before { content: "=EF=8A=82"; }

.fa-credit-card-alt::before { content: "=EF=8A=83"; }

.fa-codiepie::before { content: "=EF=8A=84"; }

.fa-modx::before { content: "=EF=8A=85"; }

.fa-fort-awesome::before { content: "=EF=8A=86"; }

.fa-usb::before { content: "=EF=8A=87"; }

.fa-product-hunt::before { content: "=EF=8A=88"; }

.fa-mixcloud::before { content: "=EF=8A=89"; }

.fa-scribd::before { content: "=EF=8A=8A"; }

.fa-pause-circle::before { content: "=EF=8A=8B"; }

.fa-pause-circle-o::before { content: "=EF=8A=8C"; }

.fa-stop-circle::before { content: "=EF=8A=8D"; }

.fa-stop-circle-o::before { content: "=EF=8A=8E"; }

.fa-shopping-bag::before { content: "=EF=8A=90"; }

.fa-shopping-basket::before { content: "=EF=8A=91"; }

.fa-hashtag::before { content: "=EF=8A=92"; }

.fa-bluetooth::before { content: "=EF=8A=93"; }

.fa-bluetooth-b::before { content: "=EF=8A=94"; }

.fa-percent::before { content: "=EF=8A=95"; }

.fa-gitlab::before { content: "=EF=8A=96"; }

.fa-wpbeginner::before { content: "=EF=8A=97"; }

.fa-wpforms::before { content: "=EF=8A=98"; }

.fa-envira::before { content: "=EF=8A=99"; }

.fa-universal-access::before { content: "=EF=8A=9A"; }

.fa-wheelchair-alt::before { content: "=EF=8A=9B"; }

.fa-question-circle-o::before { content: "=EF=8A=9C"; }

.fa-blind::before { content: "=EF=8A=9D"; }

.fa-audio-description::before { content: "=EF=8A=9E"; }

.fa-phone-volume::before, .fa-volume-control-phone::before { content: "=EF=
=8A=A0"; }

.fa-braille::before { content: "=EF=8A=A1"; }

.fa-assistive-listening-systems::before { content: "=EF=8A=A2"; }

.fa-american-sign-language-interpreting::before, .fa-asl-interpreting::befo=
re { content: "=EF=8A=A3"; }

.fa-deaf::before, .fa-deafness::before, .fa-hard-of-hearing::before { conte=
nt: "=EF=8A=A4"; }

.fa-glide::before { content: "=EF=8A=A5"; }

.fa-glide-g::before { content: "=EF=8A=A6"; }

.fa-sign-language::before, .fa-signing::before { content: "=EF=8A=A7"; }

.fa-low-vision::before { content: "=EF=8A=A8"; }

.fa-viadeo::before { content: "=EF=8A=A9"; }

.fa-viadeo-square::before { content: "=EF=8A=AA"; }

.fa-snapchat::before { content: "=EF=8A=AB"; }

.fa-snapchat-ghost::before { content: "=EF=8A=AC"; }

.fa-snapchat-square::before { content: "=EF=8A=AD"; }

.fa-first-order::before { content: "=EF=8A=B0"; }

.fa-yoast::before { content: "=EF=8A=B1"; }

.fa-themeisle::before { content: "=EF=8A=B2"; }

.fa-google-plus-circle::before, .fa-google-plus-official::before { content:=
 "=EF=8A=B3"; }

.fa-fa::before, .fa-font-awesome::before { content: "=EF=8A=B4"; }

.fa-handshake-o::before { content: "=EF=8A=B5"; }

.fa-envelope-open::before { content: "=EF=8A=B6"; }

.fa-envelope-open-o::before { content: "=EF=8A=B7"; }

.fa-linode::before { content: "=EF=8A=B8"; }

.fa-address-book::before { content: "=EF=8A=B9"; }

.fa-address-book-o::before { content: "=EF=8A=BA"; }

.fa-address-card::before, .fa-vcard::before { content: "=EF=8A=BB"; }

.fa-address-card-o::before, .fa-vcard-o::before { content: "=EF=8A=BC"; }

.fa-user-circle::before { content: "=EF=8A=BD"; }

.fa-user-circle-o::before { content: "=EF=8A=BE"; }

.fa-user-o::before { content: "=EF=8B=80"; }

.fa-id-badge::before { content: "=EF=8B=81"; }

.fa-drivers-license::before, .fa-id-card::before { content: "=EF=8B=82"; }

.fa-drivers-license-o::before, .fa-id-card-o::before { content: "=EF=8B=83"=
; }

.fa-quora::before { content: "=EF=8B=84"; }

.fa-free-code-camp::before { content: "=EF=8B=85"; }

.fa-telegram::before { content: "=EF=8B=86"; }

.fa-thermometer-4::before, .fa-thermometer-full::before, .fa-thermometer::b=
efore { content: "=EF=8B=87"; }

.fa-thermometer-3::before, .fa-thermometer-three-quarters::before { content=
: "=EF=8B=88"; }

.fa-thermometer-2::before, .fa-thermometer-half::before { content: "=EF=8B=
=89"; }

.fa-thermometer-1::before, .fa-thermometer-quarter::before { content: "=EF=
=8B=8A"; }

.fa-thermometer-0::before, .fa-thermometer-empty::before { content: "=EF=8B=
=8B"; }

.fa-shower::before { content: "=EF=8B=8C"; }

.fa-bath::before, .fa-bathtub::before, .fa-s15::before { content: "=EF=8B=
=8D"; }

.fa-podcast::before { content: "=EF=8B=8E"; }

.fa-window-maximize::before { content: "=EF=8B=90"; }

.fa-window-minimize::before { content: "=EF=8B=91"; }

.fa-window-restore::before { content: "=EF=8B=92"; }

.fa-times-rectangle::before, .fa-window-close::before { content: "=EF=8B=93=
"; }

.fa-times-rectangle-o::before, .fa-window-close-o::before { content: "=EF=
=8B=94"; }

.fa-bandcamp::before { content: "=EF=8B=95"; }

.fa-grav::before { content: "=EF=8B=96"; }

.fa-etsy::before { content: "=EF=8B=97"; }

.fa-imdb::before { content: "=EF=8B=98"; }

.fa-ravelry::before { content: "=EF=8B=99"; }

.fa-eercast::before { content: "=EF=8B=9A"; }

.fa-microchip::before { content: "=EF=8B=9B"; }

.fa-snowflake-o::before { content: "=EF=8B=9C"; }

.fa-superpowers::before { content: "=EF=8B=9D"; }

.fa-wpexplorer::before { content: "=EF=8B=9E"; }

.fa-meetup::before { content: "=EF=8B=A0"; }

.fa-mastodon::before { content: "=EF=8B=A1"; }

.fa-mastodon-alt::before { content: "=EF=8B=A2"; }

.fa-fork-awesome::before, .fa-fork-circle::before { content: "=EF=8B=A3"; }

.fa-peertube::before { content: "=EF=8B=A4"; }

.fa-diaspora::before { content: "=EF=8B=A5"; }

.fa-friendica::before { content: "=EF=8B=A6"; }

.fa-gnu-social::before { content: "=EF=8B=A7"; }

.fa-liberapay-square::before { content: "=EF=8B=A8"; }

.fa-liberapay::before { content: "=EF=8B=A9"; }

.fa-scuttlebutt::before, .fa-ssb::before { content: "=EF=8B=AA"; }

.fa-hubzilla::before { content: "=EF=8B=AB"; }

.fa-social-home::before { content: "=EF=8B=AC"; }

.fa-artstation::before { content: "=EF=8B=AD"; }

.fa-discord::before { content: "=EF=8B=AE"; }

.fa-discord-alt::before { content: "=EF=8B=AF"; }

.fa-patreon::before { content: "=EF=8B=B0"; }

.fa-snowdrift::before { content: "=EF=8B=B1"; }

.fa-activitypub::before { content: "=EF=8B=B2"; }

.fa-ethereum::before { content: "=EF=8B=B3"; }

.fa-keybase::before { content: "=EF=8B=B4"; }

.fa-shaarli::before { content: "=EF=8B=B5"; }

.fa-shaarli-o::before { content: "=EF=8B=B6"; }

.fa-cut-key::before, .fa-key-modern::before { content: "=EF=8B=B7"; }

.fa-xmpp::before { content: "=EF=8B=B9"; }

.fa-archive-org::before { content: "=EF=8B=BC"; }

.fa-freedombox::before { content: "=EF=8B=BD"; }

.fa-facebook-messenger::before { content: "=EF=8B=BE"; }

.fa-debian::before { content: "=EF=8B=BF"; }

.fa-mastodon-square::before { content: "=EF=8C=80"; }

.fa-tipeee::before { content: "=EF=8C=81"; }

.fa-react::before { content: "=EF=8C=82"; }

.fa-dogmazic::before { content: "=EF=8C=83"; }

.fa-zotero::before { content: "=EF=8C=89"; }

.fa-nodejs::before { content: "=EF=8C=88"; }

.fa-nextcloud::before { content: "=EF=8C=86"; }

.fa-nextcloud-square::before { content: "=EF=8C=87"; }

.fa-hackaday::before { content: "=EF=8C=8A"; }

.fa-laravel::before { content: "=EF=8C=8B"; }

.fa-signalapp::before { content: "=EF=8C=8C"; }

.fa-gnupg::before { content: "=EF=8C=8D"; }

.fa-php::before { content: "=EF=8C=8E"; }

.fa-ffmpeg::before { content: "=EF=8C=8F"; }

.fa-joplin::before { content: "=EF=8C=90"; }

.fa-syncthing::before { content: "=EF=8C=91"; }

.fa-inkscape::before { content: "=EF=8C=92"; }

.fa-matrix-org::before { content: "=EF=8C=93"; }

.fa-pixelfed::before { content: "=EF=8C=94"; }

.fa-bootstrap::before { content: "=EF=8C=95"; }

.fa-dev-to::before { content: "=EF=8C=96"; }

.fa-hashnode::before { content: "=EF=8C=97"; }

.fa-jirafeau::before { content: "=EF=8C=98"; }

.fa-emby::before { content: "=EF=8C=99"; }

.fa-wikidata::before { content: "=EF=8C=9A"; }

.fa-gimp::before { content: "=EF=8C=9B"; }

.fa-c::before { content: "=EF=8C=9C"; }

.fa-digitalocean::before { content: "=EF=8C=9D"; }

.fa-att::before { content: "=EF=8C=9E"; }

.fa-gitea::before { content: "=EF=8C=9F"; }

.fa-file-epub::before { content: "=EF=8C=A1"; }

.fa-python::before { content: "=EF=8C=A2"; }

.fa-archlinux::before { content: "=EF=8C=A3"; }

.fa-pleroma::before { content: "=EF=8C=A4"; }

.fa-unsplash::before { content: "=EF=8C=A5"; }

.fa-hackster::before { content: "=EF=8C=A6"; }

.fa-spell-check::before { content: "=EF=8C=A7"; }

.fa-moon::before { content: "=EF=8C=A8"; }

.fa-sun::before { content: "=EF=8C=A9"; }

.fa-f-droid::before { content: "=EF=8C=AA"; }

.fa-biometric::before { content: "=EF=8C=AB"; }

.sr-only { position: absolute; width: 1px; height: 1px; padding: 0px; margi=
n: -1px; overflow: hidden; clip: rect(0px, 0px, 0px, 0px); border: 0px; }

.sr-only-focusable:active, .sr-only-focusable:focus { position: static; wid=
th: auto; height: auto; margin: 0px; overflow: visible; clip: auto; }
------MultipartBoundary--WJYGjXZBIsLH8W9XYSwBFOvHaqe9Rm2yqzypfCs1Nm----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://cdn.jsdelivr.net/npm/normalize.css@8/normalize.min.css

@charset "utf-8";

html { line-height: 1.15; text-size-adjust: 100%; }

body { margin: 0px; }

main { display: block; }

h1 { font-size: 2em; margin: 0.67em 0px; }

hr { box-sizing: content-box; height: 0px; overflow: visible; }

pre { font-family: monospace, monospace; font-size: 1em; }

a { background-color: transparent; }

abbr[title] { border-bottom: none; text-decoration: underline dotted; }

b, strong { font-weight: bolder; }

code, kbd, samp { font-family: monospace, monospace; font-size: 1em; }

small { font-size: 80%; }

sub, sup { font-size: 75%; line-height: 0; position: relative; vertical-ali=
gn: baseline; }

sub { bottom: -0.25em; }

sup { top: -0.5em; }

img { border-style: none; }

button, input, optgroup, select, textarea { font-family: inherit; font-size=
: 100%; line-height: 1.15; margin: 0px; }

button, input { overflow: visible; }

button, select { text-transform: none; }

[type=3D"button"], [type=3D"reset"], [type=3D"submit"], button { appearance=
: button; }

fieldset { padding: 0.35em 0.75em 0.625em; }

legend { box-sizing: border-box; color: inherit; display: table; max-width:=
 100%; padding: 0px; white-space: normal; }

progress { vertical-align: baseline; }

textarea { overflow: auto; }

[type=3D"checkbox"], [type=3D"radio"] { box-sizing: border-box; padding: 0p=
x; }

[type=3D"number"]::-webkit-inner-spin-button, [type=3D"number"]::-webkit-ou=
ter-spin-button { height: auto; }

[type=3D"search"] { appearance: textfield; outline-offset: -2px; }

[type=3D"search"]::-webkit-search-decoration { appearance: none; }

::-webkit-file-upload-button { appearance: button; font: inherit; }

details { display: block; }

summary { display: list-item; }

template { display: none; }

[hidden] { display: none; }
------MultipartBoundary--WJYGjXZBIsLH8W9XYSwBFOvHaqe9Rm2yqzypfCs1Nm----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://blog.deniable.org/css/coder.min.15d3dcd7d56ff7df8a54a0659da83058d38fb1814fa8dad387efc92034b70def.css

@charset "utf-8";

*, ::after, ::before { box-sizing: inherit; }

html { box-sizing: border-box; font-size: 62.5%; }

body { color: rgb(33, 33, 33); background-color: rgb(250, 250, 250); font-f=
amily: "Helvetica Neue", Helvetica, Arial, sans-serif; font-size: 1.6em; fo=
nt-weight: 300; line-height: 1.8em; }

@media only screen and (max-width: 768px) {
  body { font-size: 1.6em; line-height: 1.6em; }
}

a { font-weight: 300; color: rgb(21, 101, 192); text-decoration: none; tran=
sition: all 0.25s ease-in 0s; }

a:focus, a:hover { text-decoration: underline; }

p { margin: 2rem 0px; }

h1, h2, h3, h4, h5, h6 { font-family: "Helvetica Neue", Helvetica, Arial, s=
ans-serif; font-weight: 700; color: rgb(0, 0, 0); }

h1 { font-size: 3.2rem; line-height: 3.6rem; }

@media only screen and (max-width: 768px) {
  h1 { font-size: 3rem; line-height: 3.4rem; }
}

h2 { font-size: 2.8rem; line-height: 3.2rem; }

@media only screen and (max-width: 768px) {
  h2 { font-size: 2.6rem; line-height: 3rem; }
}

h3 { font-size: 2.4rem; line-height: 2.8rem; }

@media only screen and (max-width: 768px) {
  h3 { font-size: 2.2rem; line-height: 2.6rem; }
}

h4 { font-size: 2.2rem; line-height: 2.6rem; }

@media only screen and (max-width: 768px) {
  h4 { font-size: 2rem; line-height: 2.4rem; }
}

h5 { font-size: 2rem; line-height: 2.4rem; }

@media only screen and (max-width: 768px) {
  h5 { font-size: 1.8rem; line-height: 2.2rem; }
}

h6 { font-size: 1.8rem; line-height: 2.2rem; }

@media only screen and (max-width: 768px) {
  h6 { font-size: 1.6rem; line-height: 2rem; }
}

b, strong { font-weight: 700; }

.highlight > div, .highlight > pre { margin: 0px 0px 2rem; padding: 1rem; b=
order-radius: 1rem; }

pre { display: block; font-family: "source code pro", "lucida console", mon=
ospace; font-size: 1.6rem; font-weight: 400; line-height: 2.6rem; overflow-=
x: auto; margin: 0px; }

pre code { display: inline-block; background-color: inherit; color: inherit=
; }

code { font-family: "source code pro", "lucida console", monospace; font-si=
ze: 1.6rem; font-weight: 400; background-color: rgb(224, 224, 224); color: =
rgb(33, 33, 33); }

blockquote { border-left: 2px solid rgb(224, 224, 224); padding-left: 2rem;=
 line-height: 2.2rem; font-weight: 400; font-style: italic; }

th, td { padding: 1.6rem; }

table { border-collapse: collapse; }

table td, table th { border: 2px solid rgb(0, 0, 0); }

table tr:first-child th { border-top: 0px; }

table tr:last-child td { border-bottom: 0px; }

table tr td:first-child, table tr th:first-child { border-left: 0px; }

table tr td:last-child, table tr th:last-child { border-right: 0px; }

img { max-width: 100%; }

figure { text-align: center; }

.wrapper { display: flex; flex-direction: column; min-height: 100vh; width:=
 100%; }

.container { margin: 0px auto; max-width: 90rem; width: 100%; padding-left:=
 2rem; padding-right: 2rem; }

.fab { font-weight: 400; }

.fas { font-weight: 700; }

.float-right { float: right; }

.float-left { float: left; }

.fab { font-weight: 400; }

.fas { font-weight: 900; }

img.emoji { height: 1em; width: 1em; margin: 0px 0.05em 0px 0.1em; vertical=
-align: -0.1em; }

.content { flex: 1 1 0%; display: flex; margin-top: 1.6rem; margin-bottom: =
3.2rem; }

.content article header { margin-top: 6.4rem; margin-bottom: 3.2rem; }

.content article header h1 { font-size: 4.2rem; line-height: 4.6rem; margin=
: 0px; }

@media only screen and (max-width: 768px) {
  .content article header h1 { font-size: 4rem; line-height: 4.4rem; }
}

.content article footer { margin-top: 4rem; }

.content article footer .see-also { margin: 3.2rem 0px; }

.content article footer .see-also h3 { margin: 3.2rem 0px; }

.content article p { text-align: justify; hyphens: auto; }

.content .post .post-title { margin-bottom: 0.75em; }

.content .post .post-meta i { text-align: center; width: 1.6rem; margin-lef=
t: 0px; margin-right: 0.5rem; }

.content .post .post-meta .date .posted-on { margin-left: 0px; margin-right=
: 1.5rem; }

.content figure { margin: 0px; padding: 0px; }

.content figcaption p { text-align: center; font-style: italic; font-size: =
1.6rem; margin: 0px; }

.avatar img { width: 20rem; height: auto; border-radius: 50%; }

@media only screen and (max-width: 768px) {
  .avatar img { width: 10rem; }
}

.list ul { margin: 3.2rem 0px; list-style: none; padding: 0px; }

.list ul li { font-size: 1.8rem; }

@media only screen and (max-width: 768px) {
  .list ul li { margin: 1.6rem 0px; }
}

.list ul li .date { display: inline-block; flex: 1 1 0%; width: 20rem; text=
-align: right; margin-right: 3rem; }

@media only screen and (max-width: 768px) {
  .list ul li .date { display: block; text-align: left; }
}

.list ul li .title { font-size: 1.8rem; flex: 2 1 0%; color: rgb(33, 33, 33=
); font-family: "Helvetica Neue", Helvetica, Arial, sans-serif; font-weight=
: 700; }

.list ul li .title:hover, .list ul li .title:focus { color: rgb(21, 101, 19=
2); }

@media only screen and (min-width: 768.1px) {
  .list ul:not(.pagination) li { display: flex; }
}

.centered { display: flex; align-items: center; justify-content: center; }

.centered .about { text-align: center; }

.centered .about h1 { margin-top: 2rem; margin-bottom: 0.5rem; }

.centered .about h2 { margin-top: 1rem; margin-bottom: 0.5rem; font-size: 2=
.4rem; }

@media only screen and (max-width: 768px) {
  .centered .about h2 { font-size: 2rem; }
}

.centered .about ul { list-style: none; margin: 3rem 0px 1rem; padding: 0px=
; }

.centered .about ul li { display: inline-block; position: relative; }

.centered .about ul li a { color: rgb(33, 33, 33); text-transform: uppercas=
e; margin-left: 1rem; margin-right: 1rem; font-size: 1.6rem; }

.centered .about ul li a:hover, .centered .about ul li a:focus { color: rgb=
(21, 101, 192); }

@media only screen and (max-width: 768px) {
  .centered .about ul li a { font-size: 1.4rem; }
}

.centered .about ul li a i { font-size: 3.2rem; }

.centered .error { text-align: center; }

.centered .error h1 { margin-top: 2rem; margin-bottom: 0.5rem; font-size: 4=
.6rem; }

@media only screen and (max-width: 768px) {
  .centered .error h1 { font-size: 3.2rem; }
}

.centered .error h2 { margin-top: 2rem; margin-bottom: 3.2rem; font-size: 3=
.2rem; }

@media only screen and (max-width: 768px) {
  .centered .error h2 { font-size: 2.8rem; }
}

.navigation { height: 6rem; width: 100%; }

.navigation a, .navigation span { display: inline; font-size: 1.6rem; font-=
family: "Helvetica Neue", Helvetica, Arial, sans-serif; font-weight: 700; l=
ine-height: 6rem; color: rgb(33, 33, 33); }

.navigation a:hover, .navigation a:focus { color: rgb(21, 101, 192); }

.navigation .navigation-title { letter-spacing: 0.1rem; text-transform: upp=
ercase; }

.navigation .navigation-list { float: right; list-style: none; margin-botto=
m: 0px; margin-top: 0px; }

@media only screen and (max-width: 768px) {
  .navigation .navigation-list { position: absolute; top: 6rem; right: 0px;=
 z-index: 5; visibility: hidden; opacity: 0; padding: 0px; max-height: 0px;=
 width: 100%; background-color: rgb(250, 250, 250); border-top: 2px solid r=
gb(224, 224, 224); border-bottom: 2px solid rgb(224, 224, 224); transition:=
 opacity 0.25s ease 0s, max-height 0.15s linear 0s; }
}

.navigation .navigation-list .navigation-item { float: left; margin: 0px; p=
osition: relative; }

@media only screen and (max-width: 768px) {
  .navigation .navigation-list .navigation-item { text-align: center; float=
: none !important; }
  .navigation .navigation-list .navigation-item a, .navigation .navigation-=
list .navigation-item span { line-height: 5rem; }
}

.navigation .navigation-list .navigation-item a, .navigation .navigation-li=
st .navigation-item span { margin-left: 1rem; margin-right: 1rem; }

@media only screen and (max-width: 768px) {
  .navigation .navigation-list .separator { display: none; }
}

@media only screen and (max-width: 768px) {
  .navigation .navigation-list .menu-separator { border-top: 2px solid rgb(=
33, 33, 33); margin: 0px 8rem; }
  .navigation .navigation-list .menu-separator span { display: none; }
}

.navigation #dark-mode-toggle { margin: 1.7rem 0px; font-size: 2.4rem; line=
-height: inherit; bottom: 2rem; left: 2rem; z-index: 100; position: fixed; =
}

.navigation #menu-toggle { display: none; }

@media only screen and (max-width: 768px) {
  .navigation #menu-toggle:checked + label > i { color: rgb(224, 224, 224);=
 }
  .navigation #menu-toggle:checked + label + ul { visibility: visible; opac=
ity: 1; max-height: 100rem; }
}

.navigation .menu-button { display: none; }

@media only screen and (max-width: 768px) {
  .navigation .menu-button { display: block; margin: 1.8rem 0px; font-size:=
 2.4rem; font-weight: 400; }
}

.navigation .menu-button i:hover, .navigation .menu-button i:focus { color:=
 rgb(0, 0, 0); }

.navigation i { color: rgb(33, 33, 33); cursor: pointer; }

.navigation i:hover, .navigation i:focus { color: rgb(21, 101, 192); }

.pagination { margin-top: 6rem; text-align: center; font-family: "Helvetica=
 Neue", Helvetica, Arial, sans-serif; }

.pagination li { display: inline; text-align: center; font-weight: 700; }

.pagination li span { margin: 0px; text-align: center; width: 3.2rem; }

.pagination li a { font-weight: 300; }

.pagination li a span { margin: 0px; text-align: center; width: 3.2rem; }

.footer { width: 100%; text-align: center; line-height: 2rem; margin-bottom=
: 1rem; }

.footer a { color: rgb(21, 101, 192); }

.float-container { bottom: 2rem; right: 2rem; z-index: 100; position: fixed=
; font-size: 1.6em; }

.float-container a { display: block; text-align: center; width: 3rem; heigh=
t: 3rem; color: rgb(0, 0, 0); background-color: rgb(224, 224, 224); font-si=
ze: 2rem; border-radius: 0.5rem; opacity: 0.5; transition: all 0.25s ease-i=
n 0s; }

.float-container a:hover, .float-container a:focus { color: rgb(21, 101, 19=
2); opacity: 1; }

@media only screen and (max-width: 768px) {
  .float-container a:hover, .float-container a:focus { color: rgb(0, 0, 0);=
 opacity: 0.5; }
}
------MultipartBoundary--WJYGjXZBIsLH8W9XYSwBFOvHaqe9Rm2yqzypfCs1Nm----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://blog.deniable.org/css/coder-dark.min.126ad3988d46bdae6217a11105b53c9662bca05f39d42d3c0fb366919d334620.css

@charset "utf-8";

body.colorscheme-dark { color: rgb(218, 218, 218); background-color: rgb(33=
, 33, 33); }

body.colorscheme-dark a { color: rgb(66, 165, 245); }

body.colorscheme-dark h1, body.colorscheme-dark h2, body.colorscheme-dark h=
3, body.colorscheme-dark h4, body.colorscheme-dark h5, body.colorscheme-dar=
k h6 { color: rgb(218, 218, 218); }

body.colorscheme-dark code { background-color: rgb(66, 66, 66); color: rgb(=
218, 218, 218); }

body.colorscheme-dark pre code { background-color: inherit; color: inherit;=
 }

body.colorscheme-dark blockquote { border-left: 2px solid rgb(66, 66, 66); =
}

body.colorscheme-dark table td, body.colorscheme-dark table th { border: 2p=
x solid rgb(218, 218, 218); }

@media (prefers-color-scheme: dark) {
  body.colorscheme-auto { color: rgb(218, 218, 218); background-color: rgb(=
33, 33, 33); }
  body.colorscheme-auto a { color: rgb(66, 165, 245); }
  body.colorscheme-auto h1, body.colorscheme-auto h2, body.colorscheme-auto=
 h3, body.colorscheme-auto h4, body.colorscheme-auto h5, body.colorscheme-a=
uto h6 { color: rgb(218, 218, 218); }
  body.colorscheme-auto code { background-color: rgb(66, 66, 66); color: rg=
b(218, 218, 218); }
  body.colorscheme-auto pre code { background-color: inherit; color: inheri=
t; }
  body.colorscheme-auto blockquote { border-left: 2px solid rgb(66, 66, 66)=
; }
  body.colorscheme-auto table td, body.colorscheme-auto table th { border: =
2px solid rgb(218, 218, 218); }
}

body.colorscheme-dark .content .list ul li .title { color: rgb(218, 218, 21=
8); }

body.colorscheme-dark .content .list ul li .title:hover, body.colorscheme-d=
ark .content .list ul li .title:focus { color: rgb(66, 165, 245); }

body.colorscheme-dark .content .centered .about ul li a { color: rgb(218, 2=
18, 218); }

body.colorscheme-dark .content .centered .about ul li a:hover, body.colorsc=
heme-dark .content .centered .about ul li a:focus { color: rgb(66, 165, 245=
); }

@media (prefers-color-scheme: dark) {
  body.colorscheme-auto .content .list ul li .title { color: rgb(218, 218, =
218); }
  body.colorscheme-auto .content .list ul li .title:hover, body.colorscheme=
-auto .content .list ul li .title:focus { color: rgb(66, 165, 245); }
  body.colorscheme-auto .content .centered .about ul li a { color: rgb(218,=
 218, 218); }
  body.colorscheme-auto .content .centered .about ul li a:hover, body.color=
scheme-auto .content .centered .about ul li a:focus { color: rgb(66, 165, 2=
45); }
}

body.colorscheme-dark .navigation a, body.colorscheme-dark .navigation span=
 { color: rgb(218, 218, 218); }

body.colorscheme-dark .navigation a:hover, body.colorscheme-dark .navigatio=
n a:focus { color: rgb(66, 165, 245); }

@media only screen and (max-width: 768px) {
  body.colorscheme-dark .navigation .navigation-list { background-color: rg=
b(33, 33, 33); border-top: 2px solid rgb(66, 66, 66); border-bottom: 2px so=
lid rgb(66, 66, 66); }
}

@media only screen and (max-width: 768px) {
  body.colorscheme-dark .navigation .navigation-list .menu-separator { bord=
er-top: 2px solid rgb(218, 218, 218); }
}

@media only screen and (max-width: 768px) {
  body.colorscheme-dark .navigation #menu-toggle:checked + label > i { colo=
r: rgb(66, 66, 66); }
}

body.colorscheme-dark .navigation i { color: rgb(218, 218, 218); }

body.colorscheme-dark .navigation i:hover, body.colorscheme-dark .navigatio=
n i:focus { color: rgb(66, 165, 245); }

body.colorscheme-dark .navigation .menu-button i:hover, body.colorscheme-da=
rk .navigation .menu-button i:focus { color: rgb(218, 218, 218); }

@media (prefers-color-scheme: dark) {
  body.colorscheme-auto .navigation a, body.colorscheme-auto .navigation sp=
an { color: rgb(218, 218, 218); }
  body.colorscheme-auto .navigation a:hover, body.colorscheme-auto .navigat=
ion a:focus { color: rgb(66, 165, 245); }
}

@media only screen and (prefers-color-scheme: dark) and (max-width: 768px) =
{
  body.colorscheme-auto .navigation .navigation-list { background-color: rg=
b(33, 33, 33); border-top: 2px solid rgb(66, 66, 66); border-bottom: 2px so=
lid rgb(66, 66, 66); }
}

@media only screen and (prefers-color-scheme: dark) and (max-width: 768px) =
{
  body.colorscheme-auto .navigation .navigation-list .menu-separator { bord=
er-top: 2px solid rgb(218, 218, 218); }
}

@media only screen and (prefers-color-scheme: dark) and (max-width: 768px) =
{
  body.colorscheme-auto .navigation #menu-toggle:checked + label > i { colo=
r: rgb(66, 66, 66); }
}

@media (prefers-color-scheme: dark) {
  body.colorscheme-auto .navigation i { color: rgb(218, 218, 218); }
  body.colorscheme-auto .navigation i:hover, body.colorscheme-auto .navigat=
ion i:focus { color: rgb(66, 165, 245); }
  body.colorscheme-auto .navigation .menu-button i:hover, body.colorscheme-=
auto .navigation .menu-button i:focus { color: rgb(218, 218, 218); }
}

body.colorscheme-dark .footer a { color: rgb(66, 165, 245); }

@media (prefers-color-scheme: dark) {
  body.colorscheme-auto .footer a { color: rgb(66, 165, 245); }
}

body.colorscheme-dark .float-container a { color: rgb(218, 218, 218); backg=
round-color: rgb(66, 66, 66); }

body.colorscheme-dark .float-container a:hover, body.colorscheme-dark .floa=
t-container a:focus { color: rgb(66, 165, 245); }

@media only screen and (max-width: 768px) {
  body.colorscheme-dark .float-container a:hover, body.colorscheme-dark .fl=
oat-container a:focus { color: rgb(218, 218, 218); }
}

@media (prefers-color-scheme: dark) {
  body.colorscheme-auto .float-container a { color: rgb(218, 218, 218); bac=
kground-color: rgb(66, 66, 66); }
  body.colorscheme-auto .float-container a:hover, body.colorscheme-auto .fl=
oat-container a:focus { color: rgb(66, 165, 245); }
}

@media only screen and (prefers-color-scheme: dark) and (max-width: 768px) =
{
  body.colorscheme-auto .float-container a:hover, body.colorscheme-auto .fl=
oat-container a:focus { color: rgb(218, 218, 218); }
}
------MultipartBoundary--WJYGjXZBIsLH8W9XYSwBFOvHaqe9Rm2yqzypfCs1Nm----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://blog.deniable.org/dbi/DBI_Diagram.png

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
KkAFWqHA/weo8KzxfU5ftwAAAABJRU5ErkJggg==

------MultipartBoundary--WJYGjXZBIsLH8W9XYSwBFOvHaqe9Rm2yqzypfCs1Nm----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://blog.deniable.org/dbi/Visual.Studio.Tools.setup.png

iVBORw0KGgoAAAANSUhEUgAAAcwAAAHgCAYAAAAotV3LAAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAAEnQAABJ0Ad5mH3gAAE8ySURBVHhe7b3Jkt3ceWad47qOmpLBcQ4qdAnF
CPIWMqJqxkEGp7bcyI1kpmzKlCx/6jtLlNXQTuuT/MmO+O2yhh54xoh/WpeBwgPgxdnYeNDmQSbO
yfVErEACu8E+SJy9ciO7i//6z98VAAAAME4lTEIIIYQM5/d+7/cOwkwtCgAAAAd6wtSBIX7/93/f
8vnPf36QP/iDP7D84R/+oeWP/uiPBvnjP/5jyxe+8IVB/uRP/sTyp3/6p5Y/+7M/G+TP//zPLV/8
4hcH+dKXvmT5i7/4C8ubN28Gubm5sXz5y18e5C//8i8tf/VXf2V5+/btIF/5ylcsf/3Xf2159+7d
IF/96lctX/va1wb5m7/5G8vXv/51y9/+7d8O8sknn1i+8Y1vDPLNb37T8q1vfcvy7W9/e5DvfOc7
lu9+97uDfO9737N8//vft/zgBz8Y5Ic//KHlRz/60SB/93d/Z/nxj39s+clPfjLI+/fvLT/96U8t
f//3fz/Iz372M8vPf/7zQX7xi19YfvnLX1o+fPgwyD/8wz9Y/vEf/3GQ29tbyz/90z9ZfvWrXw3y
6aefWn79618P8pvf/Mbyz//8z5bPPvtskN/+9reWf/mXf7H867/+60mCMA1OlIGTpXCiDJwshZOl
cKIMnCyFE2XgZCmcLIUTZeBkKZwshRNl4GQpnCgDJ0vhZCmcKAMnS+FEGThZCidL4UQZOFkKJ8rA
yVI4WQonysDJUjhRBk6WwslSOFEGTpbCyVI4UQZOlsKJMnCyFE6WwokycLIUTpSBk6VwshROlIGT
pXCiDJwshZOlcKIMnCyFk6VwMjoFEKbBiTJwshROlIGTpXCyFE6UgZOlcKIMnCyFk6VwogycLIWT
pXCiDJwshRNl4GQpnCyFE2XgZCmcKAMnS+FkKZwoAydL4UQZOFkKJ0vhRBk4WQonysDJUjhZCifK
wMlSOFkKJ8rAyVI4UQZOlsLJUjhRBk6WwokycLIUTpbCiTJwshROlIGTpXCyFE6UgZOlcLIUx87n
Pve5VmrHTto3wjQ4UQZOlsKJMnCyFE6WwokycLIUTpSBk6VwshROlIGTpXCyFE6UgZOlcKIMnCyF
k6VwogycLIUTZeBkKZwshRNl4GQpnCgDJ0vhZCmcKAMnS+FEGThZCidL4UQZOFkKJ0vhRBk4WQon
ysDJUjhZCifKwMlSOFEGTpbCyVI4UQZOlsKJMnCyFE6WwokycLIUTpYiXHMM5KVcmK7eGvK+4xjC
THCiDJwshRNl4GQpnCyFE2XgZCmcKAMnS+FkKZwoAydL4WQpnCgDJ0vhRBk4WQonS+FEGThZCifK
wMlSOFkKJ8rAyVI4UQZOlsLJUjhRBk6WwokycLIUTpbCiTJwshROlsKJMnCyFE6UgZOlcLIUTpSB
k6VwogycLIWTpXCiDJwshRNl4GQpnCyFE2XgZCmcLEW45hjISwhzACdL4UQZOFkKJ0vhRBk4WQon
ysDJUjhZCifKwMlSOFEGTpbCyVI4UQZOlsLJUjhRBk6WwokycLIUTpbCiTJwshROlIGTpXCyFE6U
gZOlcKIMnCyFk6VwogycLIUTZeBkKZwshRNl4GQpnCyFE2XgZCmcKAMnS+FkKZwoAydL4UQZOFkK
J0vhRBk4WQonysDJUjhZCifKwMlSOFmKcM0QFxcXPVw9IS8hzAGcLIUTZdCT5bc/NBfkH4rvPqQw
v/+PzTj+sfgBwmxxogycLIWTpXCiDJwshRNl4GQpnCyFE2XgZCmcKAMnS+FkKZwoAydL4UQZOFkK
J0vhRBk4WQonS+FEGThZCifKwMlSOFkKJ8rAyVI4UQZOlsLJUjhRBk6WwokycLIUTpbCiTJwshRO
liJc43CyDFx9eWknwvxS8ZP/z3ckPv1kjjDfFD/9t7r+f/zkZufCfFv8/N+7r7HHp99CmAYnS+FE
GThZCifKwMlSOFkKJ8rAyVI4UQZOlsLJUjhRBk6WwokycLIUTpbCiTJwshROlIGTpXCyFE6UgZOl
cLIUTpSBk6VwogycLIWTpXCiDJwshRNl4GQpnCyFE2XgZCmcKAMnS+FkKZwoAydL4WQpwjU5Q3Ic
Oi7mCnOo/VjZemH+09eqY+mqMsXLUpySMGvq1eRXDvL89JusMBucLIWTpXCiDJwshRNl4GQpnCyF
E2XgZCmcKAMnS+FkKZwoAydL4UQZOFkKJ0vhRBk4WQonysDJUjhZCifKwMlSOFkKJ8rAyVI4UQZO
lsLJUjhRBk6WwokycLIUTpbCiTJwshROlIGTpXCyFE6UgZOlcLIU4ZqcEFcur6HjIpfaln3HsZXC
/IvifbsC/UXxjc/XgnzfCPK//u0XxafxcYdfFt+shPnlVqbBf/zky7Uc//JHxX80x379zT8q/ur9
b6t23/7jT4pfx/H3Pyp+13wsfvOtkOQnxW+S4zW/LX729rjC/N6n0XfDr7/Vk+X3f53X+fawMNv9
A7/7xdcQZoKTpXCyFE6UgZOlcKIMnCyFk6VwogycLIUTZeBkKZwshRNl4GQpnCgDJ0vhZCmcKAMn
S+FkKZwoAydL4UQZOFkKJ0vhRBk4WQonysDJUjhZCifKwMlSOFEGTpbCyVI4UQZOlsLJUoRr5jIk
NJFLbazvXI75fk7edxxbv8K8+UErtk8/KYX5yS/q+olA/Qrz6434Pit++mWtLP/2IMJSkKkw/+Pf
JEt93BXmf/3bj4q/KleXtUx17EPx7RBmWfa2WWF+5aeH8u8cRZhfKX7RlP3uZ1+pjn31Z/9S1/33
nxRfrWT514c6P39XCfJrPz/U+VouzOTjH4Ygv3+LMDOcLIWTpXCiDJwshRNl4GQpnCyFE2XgZCmc
KAMnS+FkKZwoAydL4UQZOFkKJ0vhRBk4WQonS+FEGThZCifKwMlSOFkKJ8rAyVI4UQZOlsLJUjhR
Bk6WwokycLIUTpbCiTJwshROliJcM8WU0EQutam+0z6X9h3HVnwP8xfFJ400b378WX0sWVFW8vz8
sDC//JOmza/+tn0U+81f1fX+61efdIX5vll1Vo9kkxXmN5tHst8MAWoVGavMA3/y9u+alWizyryr
ML/7D2377zWrzS9+8VvFP1fHflf883dLYX73IMDvNyvKL33p28VnTZ3PvtcV5mexEv0/74uvJ4LM
cbIUTpSBk6VwshROlIGTpXCyFE6UgZOlcKIMnCyFk6VwogycLIUTZeBkKZwshRNl4GQpnCgDJ0vh
ZCmcKAMnS+FEGThZCidL4UQZOFkKJ0vhRBk4WQonysDJUjhZCifKwMlSOFEGTpbCyVI4UQZOlsKJ
MnCyFE6WwokycLIUTpYiXDPGHKGJpcIUa/uOY3f8HuZfHB7DVnW/3shyWJitHB1aOWaPZBcL8233
ce2h/O7CPKwmf1x8tRVmsqL82V8nderVZC3Md51VZyrMX8TqM+U330GYGU6WwslSOFEGTpbCiTJw
shROlsKJMnCyFE6UgZOlcLIUTpSBk6VwogycLIWTpXCiDJwshZOlcKIMnCyFE2XgZCmcLIUTZeBk
KZwoAydL4WQpnCgDJ0vhRBk4WQonS+FEGThZCidLEa4ZY63UpvpO+53qP+87jt35h36+8U/JiZYI
M1lhBu57mEuE+bZ9BFvvH3uFuYUw9T3Mv5khTSdL4UQZOFkKJ0vhRBk4WQonS+FEGThZCifKwMlS
OFkKJ8rAyVI4UQZOlsLJUjhRBk6WwokycLIUTpbCiTJwshROlIGTpXCyFE6UgZOlcLIUTpSBk6Vw
ogycLIWTpXCiDJwshRNl4GQpnCyFE2XgZCmcKAMnS+FkKZwoAydL4WQpwjVjzBGayKU21nfeZ76f
k/cdx+4mzPi+5ZpHsvoBoCML89vxwziffnIyj2Tzn5L94W/qevkjWidL4UQZOFkKJ0vhRBk4WQon
S+FEGThZCifKwMlSOFkKJ8rAyVI4UQZOlsLJUjhRBk6WwokycLIUTpbCiTJwshROlIGTpXCyFE6U
gZOlcLIUTpSBk6VwogycLIWTpXCiDJwshRNl4GQpnCyFE2XgZCmcKAMnS+FkKZwoAydL4WQpwjXH
IJfaUN9Dchw6LvK+49iGP/Tz+WQ1+fVWmIcf+pFIv3wQ5jd+2fse5mphNj/4cxDkkYS5wQ/96HuY
n30/hPm14pf/p2nLD/10cLIUTpbCiTJwshROlIGTpXCyFE6UgZOlcKIMnCyFk6VwogycLIUTZeBk
KZwshRNl4GQpnCyFE2XgZCmcKAMnS+FkKZwoAydL4UQZOFkKJ0vhRBk4WQonysDJUjhZCifKwMlS
OFmKcM0YYyJLyaU21PdYX0Nled9xbMUP/UiQf1N8Gvv/9sPiy5+vV5SHXyupj0mObb2K4V8rqbij
ML/whb8sfpb2+++/Pe4Ks+GYv1bS/tBPQi5LhIkwnSyFk6VwogycLIUTZeBkKZwshRNl4GQpnCyF
E2XgZCmcKAMnS+FkKZwoAydL4UQZOFkKJ0vhRBk4WQonysDJUjhZCifKwMlSOFmKcM0YIbEhyQVz
hbmGhcLs01thNhy+Z9nnsKrskj6GTQk5OipBGtKfis3p/eGChlyUQcjRkQozJRdlSggyJx7B5uSS
THGyFE6UgZOlcLIUTpSBk6VwshROlIGTpXCiDJwshZOlcKIMnCyFE2XgZCmcLIUTZeBkKZwoAydL
4WQpnCgDJ0vhRBk4WQonS+FEGThZCidL4UQZOFkKJ8rAyVI4WQonysDJUjhRBk6WwslSOFEGTpbC
iTJwshROlsKJMnCyFE6WIlwzBsLMcLIUTpSBk6VwogycLIWTpXCiDJwshRNl4GQpnCyFE2XgZCmc
KAMnS+FkKZwoAydL4WQpnCgDJ0vhRBk4WQonS+FEGThZCifKwMlSOFkKJ8rAyVI4UQZOlsLJUjhR
Bk6WwokycLIUTpbCiTJwshROlsKJMnCyFE6UgZOlcLIUTpSBk6VwogycLIWTpXCiDJwshRNl4GQp
nCyFE2XgZCmcLEW45hjISwhzACdL4UQZOFkKJ0vhRBk4WQonysDJUjhZCifKwMlSOFEGTpbCyVI4
UQZOlsLJUjhRBk6WwokycLIUTpbCiTJwshROlIGTpXCyFE6UgZOlcKIMnCyFk6VwogycLIUTZeBk
KZwshRNl4GQpnCyFE2XgZCmcKAMnS+FkKZwoAydL4UQZOFkKJ0vhRBk4WQonysDJUjhZCifKwMlS
OFkKxfllLbkwXZ21IMwGJ0vhRBk4WQonysDJUjhZCifKwMlSOFEGTpbCyVI4UQZOlsLJUjhRBk6W
wokycLIUTpbCiTJwshROlIGTpXCyFE6UgZOlcKIMnCyFk6VwogycLIUTZeBkKZwshRNl4GQpnCyF
E2XgZCmcKAMnS+FkKZwoAydL4UQZOFkKJ0vhRBk4WQonysDJUjhZCifKwMlSOFkKSejYhNRc2V1B
mCVOlsKJMnCyFE6UgZOlcLIUTpSBk6VwogycLIWTpXCiDJwshZOlcKIMnCyFE2XgZCmcLIUTZeBk
KZwoAydL4WQpnCgDJ0vhRBk4WQonS+FEGThZCifKwMlSOFkKJ8rAyVI4WQonysDJUjhRBk6WwslS
OFEGTpbCiTJwshROlsKJMnCyFE6UgZOlcLIUTpSBk6VwshQhoFMDYRqcKAMnS+FEGThZCidL4UQZ
OFkKJ8rAyVI4WQonysDJUjhZCifKwMlSOFEGTpbCyVI4UQZOlsKJMnCyFE6WwokycLIUTpSBk6Vw
shROlIGTpXCiDJwshZOlcKIMnCyFk6VwogycLIUTZeBkKZwshRNl4GQpnCgDJ0vhZCmcKAMnS+FE
GThZCidL4UQZOFkKJ0vhZHQKWGECAABAH4QJAAAwA4QJAAAwA4QJAAAwA4QJAAAwA4QJAAAwA4QJ
AAAwA4QJAAAwA4QJAAAwA4QJAAAwA4QJAAAwA4QJAAAwA4QJAAAwA4QJAAAwA4QJAAAwA4QJAAAw
A4QJAAAwA4QJAAAwA4QJAAAwgyMI803x8uKiuLh4XrzLyt690PEnxesP3eOng17bMcZ/rH4AAOCh
OKIwL4qXb5PjH14Vz6rjCBNhAgCcPkcSZimD6+fFxdNXxW1z/Pb6SfHs+lUmioNcu4JN+mjKnl2/
75Z1+hiTT/ccFy/e1MdbgQvTX+/c74vXT6O+iBV0t//p1zDQz9tDvYpsnJ0vPgAA4ME5njA/xHbo
WC2OVoSVGDIJdaSRlkUfbj+lkVP0o/0XknjdfyuhSlZrzn2k11CVZa8JYQIA7JojCrNeVVbCkJAq
ASSi6AhE1PKpxZAJpbM/VpbRE1FDR5BCfaw497FeA1IEADg5jirMEMrLF0Yi+SPIhqMKsyfG5Hjy
uHi16I72GkqyvpAnAMC+Oa4wy/3qJ2NbOSVlQzLL6/X2x8oyeivAht651cdaYR7jNWSM9gsAAHvg
6MLU5O9/YCf7/l/J7fXzAaH028UKrHrsOyifuu7Q9zDbc3cENXbuut1h9bf2NWT9dK5RiUQfX2Tw
uBYAYJccX5ijZbU42keRbiXq9ivB1W36P3mbk50j+2Ga+vjIubL9WtBqkwo2+imZ+Rq6/WR9pO0Q
JgDALjmCMAEAAM4fhAkAADADhAkAADADhAkAADADhAkAADADhAkAADADhAkAADCDOwtTHQAAwDBr
5leyXT73uc/Zaz6FPpd3FqZODgAAfTRPrplf17SBacJZrmyKowmTEEJIP5onY7uENW1gGoRJCCE7
jebJ2C5hTRuYBmESQshOo3kytktY0wamQZiEELLTaJ6M7RLWtIFp9inMjzfFZec/clwUV7dN2dFy
W1xdXBY3H5vdpcnGODS+jzeXnddxcXlT1Kd050+O3V512l3dqizppzpWtyKEnGc0T8Z2CWvawDT7
E2Yjiq4MSlm0ojlW7iLMWl4xxlqKV+XRbtzx26s4pzt/fizdz8oaYV92OyCEnFE0T8Z2CWvawDQ7
E+bH4uZyTAKNNG5jdRcy0nG38uoeP5TV5zkcn+onT12vLZfkc6FXQsuFmKZ5LZ3y/Fi6b+pXX1z0
RU0IOY9onoztEta0eXjy/ws8t+z+2JcwZ0mmlFlHTplkqz4GJNIpywW0oB8lVsI3A2N2Eu3ECLB3
LN0fqj8mdkLIKUfzZGyXsKbNdrwvXj8t5+32H+YPgTBH8cIcWzEZafTa1OIbXmUOCGiyn270uPXy
5rZeqTaVqkewIUmESQi5YzRPxnYJa9psxodXxbOnT4pnk8JDmKN4YeZSSGOk0az0cmqJ1EI5POId
EdBoP1k6Mmwe75YVK2FGg0yYt1fR58D5q+THRsZbRccQJiHnGs2TsV3CmjZbcXtdyvL6fbvtlkuE
h/n2oiPFsbKHYV/CbOQz+T3MtLgS3cCqtFc2IqCxfrJ0VpJVGmmWn9RWXlb++fkz2fXajIxXWTBm
QsjpRfNkbJewps026HFsI7pqpZk+lq0f1R4kmq4ix8oejp0Js0wlgXzVVMqiEpSRhpHsx5uruk4u
oKrvVEDpeUb6yWPGWP9EbCnNfFXZEWt3/Crvni8XcVo/e+3Vaxv74oIQcurRPBnbJaxpswlvnxcX
L940+7UEX75tyiTQi+fFu7Z+IsWxsvbY/bM/YSqNDOpleLpyc8JUavm19RPptCITV1ed9oeyWKUN
99NLI82gFld/pdk5v+j0eahfk6wWs/75PUxCHl80T8Z2CWvabMG7F905qyIEKpkOSXGsrD12/+xT
mIQQQqp5MrZLWNPm+EhyqfSyY6wwl4EwCSFkOJonY7uENW2OTudxbJA+lpUEk0e01aoypDhW9nAg
TEII2Wk0T8Z2CWvaHJf8h3YO6Kdl29/JrEQYj2qfd1eRY2UPBMIkhJCdRvNkbJewpg1MgzAJIWSn
0TwZ2yWsaQPTIExCCNlpNE/Gdglr2sA0CHMXGfp1GULIY47mydguYU0bmGZnwuz/rqG431/O30Be
2e+V9n9/EmESQvrRPBnbJaxpA9PsUJgPLY5jj6H+IqD7hwzyP2eHMAkh/WiejO0S1rSBaU5ImE1Z
539humNlOiu6tL+B+p2MjGGw3zKj50xWlfoLPr2/IJSes/nrP1WdfCzpfvPxzeEvAvFn8gg5r2ie
jO0S1rSBaU5MmCGSyPCxjqBaMbr6eYbGMN2vLyvT/Jm7wf+dmZyz+/dl87Gk+/U5O/8dxfZNCDnV
aJ6M7RLWtIFpdijMerWUUjshl4dijuWyavoc7iPPQJ2xfkfPWT+GHf3fmc05r65Ur/NisrGk+67s
cE5CyOlH82Rsl6BofoXjc0IrzLzMHJO8OivI+hHnUYQ51O/ssuZxa1lQCbO1m85Zf3GwXpjp6ySE
nEM0T8Z2CZpXYTvcNZ9iv8Lc0Qqzu5JUGmm2Y1LinLn08rGk+64sbUsIOfVonowtnDb7FGYjjnal
1pHZWP+RoTpT/Q6UVR93RVb/pGwpzVakyTmrHx6K83cFWreLsmycPWkTQk49midjC6fNRsKsV18p
tYgyQVRxx8pM/ZRsXr8TN4ZGRKt+SrZMI82gfj3pSrM7ro4Yk7aXNzdJvXyc2TkJIScfzZOxhdNm
A2GS+Zkjf0LIKUfzZGzhtEGYDxqESci5R/NkbOG0QZgPGoRJyLlH82Rs4bRBmIQQsmE0T8YWThuE
SQghG0bzZGzhtEGYhBCyYTRPxnYJZLvIWe6aT4EwyeNJ8mtD7e/bErJxNE/Gdglr2sA04SxXNsUG
wsx/t7Ck81dylsT0VXLcyS7/wZtj/yDOsa/HXce29eudm/51mf8XjsyYO79D6/p6qD87+FDXl+wl
midju4Q1bWCaHQqzO0F0/+bqktzHZLP1OfZ2Pe7jms5JNo5GePO+GMpfg/bzv6aU/8Wkh3rde7ne
5KGieTK2S1jTBqbZvTCrybBaVTVlvf9lWU94/dXB2GTTlOX/S7LzV3Wi4UDd5C/11Gg8cU5z7mpS
nxpznoF+xq5HZ7UUbd1YlbFxdMsurm5GXm/TxJ5baeod7X93ZudV8j8NOPs61K+zfe3qp7OKH/s8
N1Xy/ewvO7k/sn84nh0rqasPfM6mrvHo/3olpxbNk7Fdwpo2MM3uhan/D9mZWMxk1k6+1WQSE0W/
r0OavmIii0mos5/2k5RVk2H0m5/jsH8Yd53DynBszHn6r2H8etTH2tN2JJL3NTaOZrJuOyr3S2FO
/0PrsXMn/Y2+5jnJx6Gk558aS9a2Edyc/1daZ2S/em1ZWTWQoWuapXfv5eeZuMad+4GcejRPxnYJ
a9rANDsUZvmmTznMDtnkUaY38daTUt3E9FVyKBuY8Kqk+65sRj+dySwZ1+iY89Tn6ryGtmJ+7jKd
cyojYx0bR2/Sj+TnTPaXnLu3f0j9SDRer6/j2yfnWzSW+pxz/l/p8PiT/eraxbmSDF5TpR5f/3Vn
51n4usjpR/NkbJewpg1Ms0Nhjk0qWVk1gaQTTc30BJKXje3nZbmUh9plAorJd3TMefL+05gy9W1W
4HasY+PoTcyRkde75Ny9/aVx7XUsGf+S69DWretJmocnAsrU+E2fi65p+og67cv0O/sak3OI5snY
LmFNG5jmDITpJiFlSV9j+65snghi0q1XMM3B0THnyftPY8p6fY+MdWwcvdVnJD9nsr/k3L39pTHt
0/MvGEt3Jak00mzrK1PjN+OJxFiGrqkda/SV9bvoGpNziObJ2C5hTZv7503x8uJJ8fqDK9snpy3M
ZnI7fHWuCfDKTzad5GVj+1lZZ9JS2cjE2jyGu7xM+x4bc558XGlcWT0eL+d8rGPjaKTRVi732+9h
Dr3eqXOnY833lyZrX13n9LVMjSV5DVVZ+prUXfNYuBVpPt76+kSbun5TXvaXXtNqbFU/A9e0uUcO
Q9d4Yj8b6+TrSsdIziGaJ2O7hDVt1iHp1V9gBi/funqOucLcj1hPXJhKPYm0n7DOJJccb6gnm7yv
sf28n+4Y2sm1mrjyfsrW+iGdzgpGyfrslUf6/R0yUNbIY3qsytg4srJm1h59vYPnzsc6MPbZycZW
kgqvypLr0EgzqO+RRnDlfv7/Sqskbeb/n9KsrHdNdeyqc67eWGdfY3IO0TwZ2yWsabOOTGYfXhXP
ynvz2fX7rJ4DYS6iL8w9homIEPIw0TwZ2yWsabMOI7O3z8sv5p4X7zp14ou8dAWat3X13hevnx6O
Hfod6nNbEOZkECYh5GGieTK2S1jTZh1GmI3MUuG1K85qBZpKL9rOrTdVd1sQ5mQQJiHkYaJ5MrZL
WNNmHRPC7Mmsll0t06Tt3HoqG627LQiTEEJ2Gs2TsV3CmjbrmBBm9Xg2faSaPkJN2s6tp/5H624L
wiSEkJ1G82Rsl7CmzTqMMNPvYfa+n5mSC3NGPe2P1t0WhEkIITuN5snYLmFNm3VkMqsel6Y/JZt9
v7Hk9vp5Uz9tO1UvXUGO1d0WhEkIITuN5snYLmFNm3XUMht/NJrVefqquG2Pp6vToXoS4pPmeKws
h+tuyQ6Fmf2umuj9kt3CdH53zfzOHiGE7DCaJ2O7hDVtYJqdCbP7F1TqlAId/MX+OakFHH3Wvwge
v7hvIrmOnW+qnBBCjhTNk7Fdwpo2MM2+hFmtBEdkVsnvcvB/U3b+JJn+Eksltq4wD8cHgjAJITuJ
5snYLmFNG5hmX8JsxDf+p+KSR7TVnyerf0eyWjkm7fQn6bp/c7OU5uD/O0yCMAkhO4nmydguYU0b
mGZnwlQOf8OzJhVcs8Ls7MfqMS3r1pNMR//fYbWyTc+ZUq54p8qrHgkh5LjRPBnbJaxpA9PsUJjd
dL/nmAuz+z3PdlWZPnbtPIJtZFw2qPqNhmlYYRJCdhLNk7Fdwpo2MM3uhdmVZC5M7fe/P3mTPI7N
H9W20kzbpUGYhJCdRPNkbJewpg1Msy9hSka5xTorxEyY1fcm00eitUA7x6o6XTnWq9aynhMfwiSE
7CSaJ2O7hDVtYJp9CbPUUPf7l5n8WiEG6WqzTvX/J510k3bpT9Zq3640CSHkgaN5MrZLUDS/wvHZ
kTCnkj+SzdP9niYhhJxyNE/GdgmaV2E73DWfYn/C1ONSfmqVEHIm0TwZWzhtdidM+ziWEEJONJon
YwunzQMIkxBCHk80T8YWThuESQghG0bzZGzhtEGYhBCyYTRPxhZOG4RJCCEbRvNkbOG02UiY+e9a
ntAP8lQ/pXsY9+Cw098LdX8EoSof+/UZQshjiObJ2MJps4Ew3e9RlgI91l/W2fSv+NSij7F3/wZu
kt5fJ8rSShdhEvLYo3kytnDaHF+Yk79H2fxayaL/h5nkzsJs/jpQWqddDXaFac/ftB9eMDevr+oL
YRLy2KN5MrZw2my2wrSPKavUUmof0SaPLvM/st75f5iROwtTSeVsJKn9of+7WX1BcFmeo5Z9VbeV
ZypThEkIQZjnxAbCVBppNkLpPprMRZIKKy1LPq4klfaXUq5mp8rVXZ6qzVW50u3+izBJe/T/biaC
r1Lt1+fo/tEFhEkIQZjnxEbC7Kb7vcBcJN1HnPb/YaaZWkFOlSfpfY+yc85G+uXAqnqHAWYSDuHn
XyQcaB1KCHl00TwZWzht7kWYtVTMyrFKCCd2a2ml/w+zk2MJs1lhXiWrws5KsspBgu34qnb5+N1K
cug4IeQxRfNkbOG0Ob4wJZR8SdVZuWUiGVixdY8lOYow01VtIuxqLN0VYb0KLcfT9lm3DZn3Vqlt
ECYhBGGeExusMN2jSSfEoC+Vbf8AezO+tP9UlM3HQS3GfKWZvoYhKSJMQgjCPCc2EOZUpkSSrv4I
IeS0o3kytnDa7E+YzfcW8SUh5ByieTK2cNrsTpj8P0xCyDlF82Rs4bQ5mjD/23//3wAAkKF5cu38
CvsCYQIAbIjmybXzK+wLhAkAsCGaJ9fOr7AvECYAwIZonlw7v8K+2ECY3yh+VfWW5P//VfE/2rL/
W3z5fx5uJgCAc0bzpJLPnXB6bCTMrhT/x9f/b1F89o2kDgDA40Dz5Nr5FfbFvQjzv/3PXxUfq1Vm
WtZ8/PX/rM6tfPz6Hx3aAACcAZonlXzuhNPjXoT5vz4rO69WmLkw43i5L6kW/1n8r7YfAIDTR/Ok
ks+dcHpsJMws7ePYXJipWPN9AIDTR/Okks+dcHrcywrTlyFMADh/NE+unV9hXyBMAIAN0Ty5Zn4l
20XOctd8CoQJALAhmifXzK9r2sA04SxXNgXCBADYEM2Ta+bXNW1gmp0JEwAAAs2Ta+bXNW1gGoQJ
ALBTNE+umV/XtIFpECYAwE7RPLlmfl3TBqbZhTAJIYT0o3kytktY0wamQZiEELLTaJ6M7RLWtIFp
ECYhhOw0midju4Q1bWAahHmn3BZXF5fFzcdmlxBCjhjNk7Fdwpo2w7wpXl5cFBcXz4t3Wdm7Fzr+
pHj9oXt8GzSO/Fzu2HbsTJgSkD4BCZc3Re2jtXLaUmoIkxCyXTRPxnYJa9oME8K8KF6+TY5/eFU8
q44jzDlsJMyugD7eXBYXV7fN3t6CMAkh20XzZGyXsKbNMI2Urp8XF09fFbfN8dvrJ8Wz61ddYbUS
TUVqpFbVixXrQcg9KXeYEmYyzqavZ9fvk7p3Z/fCLI1ZXFarzLSs+fjmqr0wl4PWyvvU/uGTU7v4
Y3FzWe63q9kyt+pb7cbOlfWtsbZ95+cs92+j/Ko8EsejfoyFEELqaJ6M7RLWtBkmpGTk1DuWCO+t
xFVLsXp0++JN018t23r/ffH6aSK2jkhz0nO5Y/X52/NU58/r343dC/P2qrwAlUnSskY0YZhKVCGh
PGm7Woyt8Drt0rK6/7r77FytSKud3pha6VX1MjGmQh4dCyGE7E2Yiegko0pMibASQR7aNQLtlNWS
rI73BJmUtceCVI7uWF6enL+tfzd2KMxSLCkHA2Vyio+VfD9NUtaTUi2t9hRN+U3nMbA7VyrTpqwj
SGWgXmRqLISQRx/Nk7Fdwpo2wyQiagT3slwx1iJKyiTF5JFtV36ZJKNeJdJszi85jjDH5LuOHQpz
hvh69Wa2q6TW/+Skkqq+Z9oTX9p3Krasb7OCHBTmjLEQQh53NE/Gdglr2gzTFVH1eLUVYybMoRVm
uR+r0/p7n80j2F6bMbr9VVQCHxKmqX9HHqEwRx57Nqu+q/YxsOLONSDMJSvMqbEQQh59NE/Gdglr
2gyTiaiU3OGHadKyWlCDMmzk9uxpKrV6FZj+cM7t9fOkvItk3a1bStjJW/uLZDyPxyXMZtWX/oDQ
x5urTtlBcAOy64guLavbtH0P1ouMjYUQQnYqzLGySorxxKzfprs6DWrRtk/aeuUptWDbumZFeygb
GvN6HpkwFe0nF7V6jFrL67CqLFMJT9LM6o+dt1qhzqjXxo2FEELqaJ6M7RLWtDl9xsR+HHYmzD1m
SHaEELJtNE/Gdglr2pw+CHMHQZiEkIeJ5snYLmFNm9MHYe4gCJMQ8jDRPBnbJaxpA9MgTEII2Wk0
T8Z2CWvawDQIkxBCdhrNk7Fdwpo2MA3CJISQnUbzZGyXsKYNTIMwCSFkp9E8GdslrGkD0+xMmNnv
JZakvxq53/TH3fkrPs3vdAbxmuo/w3c4nv4RA0II0TwZ2yUoml/h+OxMmMlPpDZ/CGD/Iun/JO3U
36T15UiTEHKI5snYLkHzKmyHu+ZTbC9Mpf0Tc/0/JVeVVX8dp2k3+D8rD6s4cVi1DrRLVoSd8y35
Sz69/0aS1qnH1Fs9t6+VEELWCxP2x/0IM5FLtSpL/nyc/ldmLbS6Tvun7XqyStIpc+2G+skk15Fb
f9yH/+MZSeoMjq/fDyHk8UbzZGzhtLl3YXbLhz5W3L5WhcGSds1+b/VX93kYV9q/WT3mfdm/G5v2
SQh57NE8GVs4bR5AmHJN8ti0lU7eLt2v23cf0aZlQ+2UZL8nufy/mwydL5LUYYVJCJkRzZOxhdPm
foSZr+wacd20j2Org1m7ZD9v36k70q7KVD9OmGWaR7vdlWJaJ22bpHcOQshjjubJ2MJps70wG/F0
V2u1bIYlqCT7VR9JWSWlVFwD7aqk+/o4GUtHbnm7Mp3zKN06/JQsIWQqmidjC6fNRsKc+l6gXFSW
dQpyYTk5NX1eXSVl4+16+43A677G2tWpz1seT34KV8TQO+MqQZaEkDSaJ2MLp80GwpyT9HuHhBBy
vtE8GVs4bR5GmIM/MEMIIecVzZOxXQLZLnKWu+ZTPIgw+49jCSHkPKN5MrZLWNMGpglnubIpHmaF
SQghjySaJ2O7hDVtYBqESQghO43mydguYU0bmAZhEkLITqN5MrZLWNMGpkGYhBCy02iejO0S1rSB
aRAmIYTsNJonY7uENW1gGoRJCCE7jebJ2C5hTRuYBmESQshOo3kytktY0wamQZiEELLTaJ6M7RKW
tXlTvKz+POfz4l1W9u6Fjj8pXn/oHt+GGMeBl29dvYcDYRJCyE6jeTK2S1jW5iCqjqA+vCqeVcfv
U5jJuZrzP7t+n9V7OBAmIYTsNJonY7uEZW0aUV0/Ly6evipum+O3109KWb2yEqtXgHE8E11bL1as
3ZXj8KrR9PO2HFO68rXnf1+8ftoVq1bG6b5ey8WLN+XHyWtt+lkiZIRJCCE7jebJ2C5hWZsQVSqs
oWOJ8BKZVY9uKyHVZQdBZTLriDQnPVd6LM45fP7D+aJeKfsXB/lrfGkfbd3R8fRBmIQQstNonozt
Epa1OYiqFY9kVEnlUNZb7aUC65TVkqyO94SUlLXHguRcnWPuHKYsVsfN2G/LVeRB9Kn003O4cw6D
MAkhZKfRPBnbJSxrk0ijEdzLzoqsKUulVJHKL5NkKi+t6DLqNjlOXjpmpFiRnl/1apm2q8myfrWy
TcfTO4c75zAIkxBCdhrNk7FdwrI2XWlUj1edYCr5Dazwyv1YnWrbPoLttRnDyCttP3H+WpQ6FnWa
j0Oc7TGESQghZxfNk7FdwrI2mTQGBaOPk+9H5gKrVqelLJ+mAqpXgYf+JNZ4VJqTjaPqL207fv5K
1OW52+9PlkiiOhZS7Z2jtz8OwiSEkJ1G82Rsl7CszZg0vMTqR6v9Nt3VaVCLrn0k2ysfqFdyEF3D
2Pmbsk4buypN24299j4IkxBCdhrNk7Fdwpo2MA3CJISQnUbzZGyXsKYNTIMwCSFkp9E8GdslrGkD
0yBMQgjZaTRPxnYJa9rANAiTEEJ2Gs2TsV3CmjYwDcIkhJCdRvNkbJewpg1MgzAJIWSn0TwZ2yWs
aQPTIExCCNlpNE/Gdglr2sA0Dy5MdxwAAGrWzK+K5lc4Pg8mTEIIIdNx8+cYmtRhO9w1n+LOwgQA
AHgMIEwAAIAZIEwAAIAZIEwAAIAZIEwAAIAZIEwAAIAZIEwAAIAZIEwAAIAZIEwAAIAZIEwAAIAZ
IEwAAIAZIEwAAIAZIEwAAIAZIEwAAIAZIEzYHN1kAAB7Ya3v1BZhwqboJnP/jw4A4L7RnLTWdwgT
NieESQghDx3NSbFdygML803x8uJJ8fqDK4NzAWESQvYSzUmxXcqdhfns4qK4GODZ9fuyTirFXJAI
8zGAMAkhe4nmpNgu5YgrzDnyQ5iPEYRJCNlLNCfFdin3IMw4/r54/TRdgT4v3lmBHuq8fJv08+FV
tZrtHIOTAGESQvYSzUmxXco9CtPVSfdrodaPccv9SpCSalMXYZ4sw8K8La6SL5AqLm+Kj23ZZXFT
7xBCyFGiOSm2S9mPMHNBNgJFkKfPuDC7Uvx4c1lcXN02e4QQctxoTortUvYjzLfPuyuNBoR5+iwR
ZmnM4rJaZaZlzcc3V+19ccnSkxCyIpqTYruUnQkzXWHCubBEmLdXpRCrFWYuzDheRlK9uCqPEkLI
smhOiu1SHkCY6aoxLcu+h1lye/380B/fwzxZxoV5eJpQ0T6OzYWZijXfJ4SQedGcFNul3LMwJcEn
zeQ4/VOyF09fFbfRD8I8WZasMA9BmISQ40dzUmyXckRhAngQJiFkL9GcFNulIEzYHIRJCNlLNCfF
dikIEzYHYRJC9hLNSbFdCsKEzRkWJiGE3G80J8V2KQgTNgdhEkL2Es1JsV0KwoTNQZiEkL1Ec1Js
l4IwYXMQJiFkL9GcFNulIEzYHIRJCNlLNCfFdikIEzYHYRJC9hLNSbFdCsKEzUGYhJC9RHNSbJeC
MGFzECYhZC/RnBTbpSBM2BzdZO44AMBDsNZ3CBM2hxBC9hY3V02BMAEAAGaAMAEAAGaAMAEAAGaA
MAEAAGaAMAEAAGaAMAEAAGaAMAEAAGaAMAEAAGaAMGFzdJMBAKSMOWer6E90uvPNReNGmLApusl0
owIACM0LY84ZK1tLzEOubC4IEzYnblRCCFE0L8TWMVa2FoR5b7wpXl48KV5/cGUwBcIkhKTRvBBb
x1jZWvYpzA+vimcXF8VFwsu3pt5JgTDvAsIkhKTRvBBbx1jZWvYnzLfPjSBL2Tx9Vdym9U4OhHkX
ECYhJI3mhdg6xsrWsjNhvi9eP70onl2/N2UNndVnKqBGSNe1cEXVTyPgdn9V3fpYcJD5QD9VmWub
jLd5Hae/cr4fjiHMjzeXxeXNx2bveNmqX0LIcDQvxNYxVraWfQmzkkgqwZxaQK1kKsE9L94lZRcv
3tRlIdbO/pq6GZP9RFkuf9VFmGs5hjBLsxWXlzfFfLXdFlcXl8WkC7fqlxAyGM0LsXWMla1lh8Ic
EJXoCFKkAs2ENLq/pG7sl2JsmdFP77XkdWEJRxFmqbSbyy1EtVW/hJChaF6IrWOsbC07FOaIVCTM
zvcy61XctsLUx0MrxZF2Vu5pXVjCuDC1Yku+oLm6rQ9r5Vfux67Sf3zarPZurtr2h/J0JThWb7t+
+1H9up6oX5uEXe6nq9xb9ZeeI29DyGlH80JsHWNla9mXMBsBdr8PmPAQK8xR8Y20Y4V5VIaF2cii
tUC5f9WIwwizEkn3QC2TONYTTSadqFf1fVUebbJVv53Ur7UVaqduWlb3WXc51oaQ043mhdg6xsrW
sjNhllSCyr+3V8qmWllKOolQOzIbkVdvf0HdfNVbnXNOP/o4eR2ddiVVv/nrhCEGhVkJIOQzJ5JJ
KoxUXkoqm7TM1cv3t+g3SU92tQzDtVF+U652hwWctSHkRKN5IbaOsbK17E+YopFJPELqCLRTNiSr
qf0ldX9X3F4/OYzlxfP5/TTy77crQZiLGBRmtXJbtmK6vUqFkQsqFcoysW3Vb5vqtTb3U0IqPz0a
7lyPGW0IOcVoXoitY6xsLfsUJkDGoDDXPGLsPD51wloptq36jUx9cdBci6tS3N1HwQuvDyEnEM0L
sXWMla0FYcJJMCjMZuV2EFW5P/Y9zCqSUkgkE1RHMEvFdux+zWsr99MfCvp4c9WpexByfDzWhpDT
jeaF2DrGytaCMOEkGBamUguifeQYghkUZtmifXyatR2UV/qxku/XOW6/uTCVrN/qJ2NNvUrQA2NZ
9DujhOwzmhdi6/Bl9Q+Wtr87P7nfBWHCSTAuzBWRUCqb5MK6Y7bqlxDSieaF2Dp8GcKER8DRhVkJ
TY9Ijy22rfolhKTRvBBbx1jZWhAmnATHF2ZkK7EhTEK2jOaF2DrGytaCMOEk2E6YhJBTjOaF2DrG
ytaCMOEkQJiEkDSaF2LrGCtbC8KEkwBhEkLSaF6IrWOsbC0IE04ChEkISaN5IbaOsbK1IEw4CRAm
ISSN5oXYOsbK1oIw4STQTeaOA8DjZcw5iuaNY4MwYfcQQoiLmy+ExLYV7nxzQZgAAAAzQJgAAAAz
QJgAAAAzQJgAAAAzQJgAAAAzQJgAAAAzQJgAAAAzQJgAAAAzQJiwObrJAABSxpyzVfjDBbB7dJPl
f20DAB4vmhfGnDNWtpaYh1zZXBAmbE7cqIQQomheiK1jrGwtCBNOAoRJCEmjeSG2jrGytexUmO+L
108viounr4pbW34qvCleXjwpXn9wZbAEhEkISaN5IbaOsbK17FOYH14Vz54+KZ6dvGwQ5rFAmISQ
NJoXYusYK1vLLoV5e13K8vp9uz2UNQJ6Wwr1olyBXjwv3um4BFvtByGpXFjpfvPx9fO2XXWut9l+
59yHc7x8m/WZ9xOr5LZNM9ak/4oXb+p+mtdw6BdSthLm7dVVcdt83MntVfX5ubKF55bb4urisrj5
2OymeVTXgZxSNC/E1jFWtpYdClOiaaRWrTTTx7KNtDrHajEd5GakOCjMvrC6+43k8nN0ylw/aVly
/qosGw/CnMUyYY4IIIsXZtL+401xqc/vAJdzTnK05K9L+9mYLm+K6RG5fkauV3UNBr6wuFPM+Evu
55pOvObJjF37u/ZN5kTzQmwdY2Vr2Z8wtQILiTSi6q3mWuGUVCu2EFReJ68/tyzb70hQpONacA6k
uJqjC7MnwoMQPt5cFhd2SfXQE2F+/v54hseeZrqfPLdXW4jsoa/nXbL22pNjRfNCbB1jZTVvited
p4jT7E6Y716kk1hDK9BcTiUSZm8VOiCs2WXZfv4YtWGxMEXWF/Kcx3xhfixuLtPPk1kZVbKsJ7tY
Yd5exeSn9kOT+NAEr+PpOdNHmE2b2xB0M56esNN+u/3VfbnXZcajfquVztCYRvq5qR+/ip4c236P
GTP+Ks0Y0/NVj4ajrrs+StNffq2z+rXUsnM3j567daqC8XOlY+9c+3Ss5cdj17YTd7611+O8o3kh
to6xshrNz/m33sbZmTD1AtKVXH5sSEAbrzB750hZco6M0X4hZb4wFTOZpakmmxBlTKpNKpFlx9pM
9Bvp9NFMZh3Z1BPgYeJM+83Ken2l5++PRytBu8qZ7Cdpl1yfQzSuGa99UfrjPyS9DvX4UnkMXx9/
rQ/XpNy/yqRW9ZFdj6r+1Lm6Yz9c+7SsGVOcv9NHnrHzpWV1n9PX47yjeSG2jrGyGs3P5eemZK40
9yVMCaRdTQZjjz/jWLJSqyQUdbqPdPVDRPN+ICjfz76HWfX1fEY/+rg7ts4nRo9oY3XM49pRhoRZ
PQZrbvruV9zdyaybepKp22STi2TRTq55xvptJsY5Y+kJKanTm/DqsdZDyvvKz1nSGfvcMU3t15EQ
3KVxnwP/ecljxl/SnqO5Fjfpo85F16dMVd+dP6lb1TGvbfJc2djbDtJx5GMyY4yMnk+7dfn863He
0bwQW8dYWU09P8fnb440dyXMXEpBJbpKLLmcGipJNi/8xfNunaTs2fWrTGZDohvaP1zcw2Pg8Xa1
pNVGK8msj7QdwhxlSJg+I5NSlmpVUH0umvqrhKnjyVf5nXqmjc7RWQUldSqZpvdITT2kvC/TdxuV
zR3TvH6HhLk+/jxpavEmQlh0fcr0vjiJZHWzfqv+lp6rTVqW1xtpN3q+Osuux3lH80JsHWNlNfl8
PC3NXQnzOOQCg3NgO2HWk49kUMlFE9DgbDPQbzVppZPy2IRZZqx+ryxN3tfAeJRFY5rX770Ls1k9
XemLmjjxoutTprcCi4ycO86x9Fxt0rK83ozzNru9LL4e5x3NC7F1jJXV9IU59cdyzkKY78pVZft9
QK0oJ140nB7LhTkyuZeTTKy8amEmj7E0KXVWf2kGJrtqIkuOV5PY0ISpZOPr1K/HclgZqvurpK/0
dQ2MR5kc01g/rl+Na+BcqzMy/vRz0hnv1PVx404Eo/38e5jJ/VClvQeWniuSluX10n0ztsHz1WXL
rsd5R/NCbB1jZTVdYZ7cI9m1dH+ylh+iOUeWCVOTRnwPzXz1XckkvWdSeWgCmjMRdtP5nl0p4eEJ
s0klMFdfqSfEtjwRePd1DY9HGR7TVD+m39EvJNYme50Nlze3mUjKNNcrFUbbph3X0PXI6ledpHXz
ceTXIimbPJeS9533F/u5MBV3PlNv1vU472heiK1jrKzmIMw5shRnIUw4f5YKc27cHy6oZNKZxLZO
PqnuL+0ja0J2Es0LsXWMldXUwpwrS4Ew4SS4T2Heh8A659VqYc+rgmpF7q4TIQ8XzQuxdYyV1ZzB
Hy4AcGwlzMF0HnkdP4efzhU7ltHG14GQtdG8EFvHWNlaECacBPcuTELIrqN5IbaOsbK1IEw4CRAm
ISSN5oXYOsbK1oIw4SRAmISQNJoXYusYK1sLwoSTAGESQtJoXoitY6xsLQgTTgKESQhJo3khto6x
srUgTDgJdJO54wDweBlzjqJ549ggTNg9hBDi4uYLIbFthTvfXBAmAADADBAmAADADBAmAADADBAm
AADADBAmAADADBAmAADADBAmAADADBAmAADADBAmbI5uMgCAlDHnbBX+cAHsHt1k+V/bAIDHi+aF
MeeMla0l5iFXNheECZsTNyohhCiaF2LrGCtbyyMX5pvi5cWT4vUHV5azpC4cG4RJCEmjeSG2jrGy
texLmG+fFxcXFy0v35o6LanAcpnNldtaYS5pN5ct+jwfECYhJI3mhdg6xsrWsi9hVqwRx1rZLGm3
tdAQ5hgIkxCSRvNCbB1jZWvZuTCbj68PK89n1++zeu+L108Pq9KLi+fFu14faXm6ck3rOfK22bjS
j9++Kp5VdXT+ftvuajnr98Ur8xrKeh+iT5GOMz/nk+JZ2f5wbUq0Wn/6qrhN+hlfse+bOcK8vboq
bpuPO7m9qq7hlS18gOxtPIScYDQvxNYxVraWExBmKYQXb+qyauJPhZRJKxdKu58w2EdOLeK+oN3H
5RhDTq5t55yN4OM1ab8U5m1vLHW/reSqx9WZjJNz3l4/6ey/e5Gf/7EK87a4urgsbj42u9W+vsg4
cBBXXncoY30oM/r5eFNcXgwInhAyGc0LsXWMla3lBISZS2RIWkP1Yj+d4IbaJXQkJ4bOZ/rota0l
WQmrKnPnzPrpCDLKQ3rmnFNjOnFGhVnJJ/38HkT08eayuOjYLJNZtdpbKq6sj+b8l9Om7eT2ankb
QkgdzQuxdYyV1bwpXqdP5WbwCISpj+esFDOssFw700f2w0tBJbtev0HWj+qZVeuwMJNVZa/t6TMo
zEpWtbxihXl7FTL7WNxc5is9J7sQZlrWfHxTPz4VB7llfSgd8Zp+bkPqiZx17subcpSEkKXRvBBb
x1hZjebR1A3TnL8wZ4sv4y4rzEEplvT6DbJ+7LjHhRmifJ0+jj0TBoWZiKr3SLYjw0gmO7VvpZWL
rhRcrE4HxRqp69fVTT9WjE7ohJA50bwQW8dYWU09p+qL4bnz5RkJM2SSleWPQCsRuT5ysj4H27k+
su9hltxeP2/qjH0PM38NSR8dgbpzxnHdAJmQq2uQ9n16DAqzkk590/cerUqG3W8ulmkElnCokosu
ldlYmVL364WZ1z1Ej2V7QySETEbzQmwdY2U1MV/WzJHmvoRZSeHwAl6+zcWQ7nfLqh96qdpJFkNl
JS+eD/bRIx3PYLuhPnS8aSs6j0izskae3ddQ1mtEVx9LzzE8bj2WPci44ayFeYjkU1+rRlCDwkwE
ljzS7ZblopuSoI4hTELuK5oXYusYK6vJ5uGSKWnuS5hwR9Lvc54X84QZj2ab7zfOEeZs0Y2VlUke
DU/WTYIwCVkXzQuxdYyV1fSFOfWzHwjznBj8/ujpMyjMUlTxwzi1MOtHtJWE7A/VZAKrROfklotu
pKxapQ79UFDeTxq+h0nI2mheiK1jrKymK8zTeyQLd8I+jj0TBoXZyCr9KvGwYhv6Kdmh+mOiy8uG
+lDG+klihU4ImRPNC7F1jJXVHIQ5R5YCYcJJMCjMJO4PF/R/D3M/aR8dE0IWR/NCbB1jZTW1MOfK
UiBMOAnWCnN0hfeQqVbGbryEkDnRvBBbx1hZzVn84QKAPnOEOZjq+5Q7+uGavY2HkBOM5oXYOsbK
1oIw4SS4kzAJIWcXzQuxdYyVrQVhwkmAMAkhaTQvxNYxVrYWhAknAcIkhKTRvBBbx1jZWhAmnAQI
kxCSRvNCbB1jZWtBmHASIExCSBrNC7F1jJWtBWHCSaCbzB0HgMfLmHMUzRvHBmHC7iGEEBc3XwiJ
bSvc+eaCMAEAAGaAMAEAAGaAMAEAAGaAMAEAAGaAMAEAAGaAMAEAAGaAMAEAAGaAMAEAAGaAMAEA
AGaAMAEAAGaAMAEAAGaAMAEAAGaAMAEAAGaAMAEAAGaAMAEAAGaAMAEAAGZwZ2Gqg7WsPSfAY8G9
b+bC+wvguOh9dWdhuv9qPYXarj0nwGOB9xfAfjiaMJdGbWMLD8mb4uXFk+L1B1cGDw3vr4QPr4pn
FxfFRcmz6/e+DsCG7FSYbhLfZmK/vX5SvQGD+W/EY43nofvZ5rrCcdju/XW45yuevipubd37Yuo+
fF+8fnpRvHzryh47vIfvi3sTpt6UadQ2tn3cDXD8m6KW5fPiXXusnkjmSfNY43nom/2hzw9j3Nf7
q3ovvHiT1Llvpu5D7tNhuDb3xb0IM76KTaO2se3jboDs2Nvnbb8V7Ztd9Q7Hh78irev1yqt+Q6L5
OGK//mr3cH7Vb8quD+M6iHdJP1FH1OWpwN+96O4fJrr0HGNjifL0vMnYksdeh+NLxtH0A0fh3t5f
+rxXq8ym7G3cB809ae8LMXCvJe/Pw30ydF/Oex/0yqfGlL+GDqoTbWsOc8GcayDinE39/Pxp2azr
E/UP5+iNae61G5wf4S4cXZj65KRJP2lp1Da2ffIbMDtW3bhpeVlW3RDZxF7Vc2+WsbL03Pk4psqS
G7O6Ydf006UrorrusxeHx2cSV/2myvtMxtJ5rbn8+u3aN2nyxcP8ccAxua/3lz5/9ee3uXc6j2iH
74u2fudey/cH6o6+R3Ly8hljWvKY2Y2z037qfZOPLS2be33G5i/XT1qWnL8qy8YT7eBObCLMePMO
vZkVtY1tn+wGyI81N11vgu7cRKK+Ae1ErjeYfUPVN2bdJh9Huj9WFvtr+slIx6mPyxv/tvwqs992
rM9kv3eNkrLOpBNlzWuYPQ44Jtu9vw5tK9oJ1Xwux+6LXv2xfVc21E9OVr5oTEPUbQ7XYWicJfZ8
Q/XnlmX7o/PXgnMMzY9wZzYTZoqL2sa2T35zmGPVDXw4R3VzZMc6ZW0/Db2bMxi5EWeXiZU3ew+V
1+NsV3Hl66y+CtVraKU/1meyP/bGV5n5qvrwGuaMA47J/b2/Rsom74uBe623n5eN9ZOTlS8ak0N1
5q4YS3rnG6s/tyzb1zmyz62Yvs55WUnWV90H3JWjC1NJP1FDUdvY9tENkH2SK8FlN0VQ3RzlZB7b
vNxiziE6fSy5Sd3+yps9oxaU6qXjql/v4kdEvS8UkrLe9VPZ4RrNGwcck+3eX0P3nCkbvS/y+mP7
rmyon5ysfNGYDLb90DhLFtWfW5bt986RsuQcGaP9whI2EaYy9mZW1Da2Dk3O6SRcfQ8tvsIrb4DO
BN2ucOqvMrvt4rFhn6pP86Y7tE+/ao366U16KOvdtJ2bdEk/fVT/2dP0e4jN9SmP+fNnY+mVJeer
xtkta19/9kabNw44Jtu8v/L7Y6ps7L7I64/tZ2W9fsbeB67fuWMy5F+A994HeftsfJ36U+/vtK+x
/bH5a6ydPu6OLe2DJ0DHYzNhTkVtY+upb57DV9OHiTtukENZfiMlZRM3Sn1zH+p3bjRRvTGi7FXn
pj201djGxrSkn6RNUL25s8mk6i+/JukbKL8myX4ylosXz7tlzbnq8rSPQ9n4OOCYbPP+yu+PGWWD
98XEvdbZ18fRR//+Gn8fmHHNHpOn897vvA8G2o+9bwbf33lfc/abc4h2/hpvt2gugtXsWJinRn5D
A9yd83p/ndN7hPf7YwRhHg3eQHB8EOZ+eFeuKtuVr1aUPOZ8dBxFmO74HNaec58gTDg+5/X+OnVh
po85+TbEY+TOwrxrXJ8AUHPXuD4BYB13FiYAAMBjAGECAADMAGECAADMAGECAADMAGECAADMAGEC
AADMAGECAADMAGECAADMAGECAADMAGECAADMAGECAADMAGECAADM4M7CVAdrWXtOgMeCe9/MhfcX
wHHR++rOwtT/61uK2q49J8BjgfcXwH44mjCXRm1jC3CA/yuaEu8vVzbFXd5fOq87DvCY2Z8wP7wq
nrX/pLXPs+v3/TZ3YqsJ+lj93odA3DnmnvfY47uP13s6bClM9Z2Sl021PwfS151fA4Ac3SM7XmE+
lCyOwbH6fahrcB/ndTzUefdJvL9cWYqb7MfeX1E/TdqHPlZi/5yJ1/mYXjOsQ/fICQqzOf42VqPP
i3ft8cNq9OXbtP7h+KHsffH6aXo8+snorHrT8eTji33Xb1N2/bw9flgtL+kn6qR10zrp6y55ezhf
xYs3SdsgP39+rPl49tjN+QavoWkz0l/ntT0C4v3lygLVEfnxofdX1HXlcUx10o9T0vpzjudlOUN1
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

------MultipartBoundary--WJYGjXZBIsLH8W9XYSwBFOvHaqe9Rm2yqzypfCs1Nm----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://blog.deniable.org/dbi/Visual.Studio.Pintool.png

iVBORw0KGgoAAAANSUhEUgAAAw0AAAJjCAIAAADBCmopAAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAAEnQAABJ0Ad5mH3gAAJ3QSURBVHhe7b1tsFzHed+Jqnzb5NOukkptRTC9
VZvdgvMhqaAq+ZDaWJYd8tJWFFFwdr3i2nIMK7JNkbygbVnX1lKxFVo0DULQBU0tDb1BomRRAknR
GlICdSmKFgGKlEgRvLy4AIk3gsTLJS5BSgKlSMFon+6nu8/Tfbp7zsycmTln5v+rpy5Ov/c5M/f0
Dz1zZza88sr3EAgEAoFAIBDlgCchEAgEAoFAxAOehEAgEAgEAhEPeBICgUAgEAhEPOBJCAQCgUAg
EPGAJyEQCAQCgUDEA56EQCAQCAQCEY96PGn9wVuuehvxF/v22YP114I6MxXr66t7rr2KeNu1n3lm
Epdiff2hv7jqbWoGNIebl4LSijGKsyieKqO/LGKsCT8cCAQCgWhpFJ7kVta3ve26Pc+YtURk5ha2
IT3JrcdlBl7jRxoVrtUkF2Z3Pa/dc6iclFHMWcyz0KO3XXdt3WeR8aQH/0KN5eBBM5PvGfAkBAKB
QAwZEU8i3Jq0vOc6WmnUApNVnyE9yUWxQjdSj1wMc63GEG56N+9T08irBk87KnwDqEnPiHpS+XHn
ajT/mjxpkg8HAoFAINobcU8K/iuvcvRiI+sQbnFNeZLcIZDqI3sm3P/yy+ulylz+zLV21deLOnUe
n4bsgSmfCMErbqzbqqtppWslFunIrJ6Jj568Yro3UyCkoVw/eIzKuEeHw10H16edubqq3lmU5iCv
oevKNOz5VJFzECPKzJv3HZLXjVANxaVT1cSgKlk6fTl5N27qOiMQCAQCISPiSTffTP/q/8qrFei6
m2/m/Qa92FAd6zR2H8JfhApPMmbAq6+pbJTCDGR8RfSZ96Rrr3UjJqYR71llBou3PbugW9VhlSj6
yVyrYmGOzcou9mL09BXz13hKUh13rSL1xWnqEb2aQZSvOTtEOLRvwGYO9hqWlcVefJUff6qIq82Z
blCXr4pKk88O6lWWY4nj5HXj/hEIBAKBcBHzpH1LevFf2kf/XPuZfWKRc5VVfbk+lVfTYFkVK7dc
NWWHulq4ZqtMuy7Gl3kxjWjPJjOQgJuX8t3mo8q1ctdkT2xW5dHloq6S4opJceHK+fryWBeFqhGE
5zG2LVd2o9x8s+ohnIM9i7KyuDpBfjBtU8EOKklNPjNoeE1EsjhOPzO5fwQCgUAgXEQ9ySzMBC1O
z/jLvFulmJQnGTmwy6pc7aKrPkfek+RKFp1GtGd3LhJVx3/5Jgg+I65MBHWqXCt3TaoYBkWwsSGv
GHerEhq+OJn6wdpfVo0g5GSkW6gim+QHVPWi4TkEZ8FJ50nRxyjo34WbpESfSzj5zKDhNRFjBScS
vW7cPwKBQCAQLuKeZBcVsfboxcYe6wVPrE/FglTdk4QJuXDV8p6Umka059Rw5W6rR5Vr5a6J8SR/
AsmTSqzfXKrSGurNOFkdnkThrpLp1s62eGTto6/qaahOcBbysUg9RrJDHqIcXMcMUZp870HhSQgE
AoGoKRKepI95LbELnlpspHPEF7/qr7vZhUqGW7TcOq0y/XWRIjWNaM9y/i6Totxt9ahyrVILs+mh
NLpc1FVSDMEVOMy5U2/p+kHbKipgRzcfBJCaFUcxh/Rbqns/VUSHy3tuoSKXlE+DQTzJXRMxVnGM
190QCAQCUTninuQyKeTaUyyQxcKT8CR/eZMG4wbiIpW0DtGfJ5WnEe/Zy1T51KS0F9JXVLlWxTWJ
zqr0ql8gBPKK0flyNVknU788PWkt0XBNVDU9f5Nvz+Lmm3vPwYwiPan8GBWXxQxBwZPnTihkfUoG
k88MGpx44uFIXjfuH4FAIBAIF/15kluiiLdde537f3yxCPn/Wec1jPHUR/RDuFXK5ec9KTWNoIiw
3uBlEtT/GD0pnICaVeLdUdErJjMJ5xOp+uXppTRIhuvKu/j2LPjVQ0fhNPYyEjfvUcdWWeKPkbws
xSjlB0iIS3nyqUFVZVEk/5IxGDf1zEQgEAgEQkbhSQgEAoFAIBAIGfAkBAKBQCAQiHjAkxAIBAKB
QCDiAU9CIBAIBAKBiAc8CYFAIBAIBCIe8CQEAoFAIBCIeMCTEAgEAoFAIOIBT0IgEAgEAoGIBzwJ
gUAgEAgEIh7wJAQCgUAgEIh4wJMQCAQCgUAg4gFPQiAQCAQCgYgHPAmBQCAQCAQiHvAkBAKBQCAQ
iHjAkxCIWYlvP/lcKyKYNgKBQEww4EkIxKwEKcjrjQeehEAgGhXwJARiVgKehEAgEP0GPAmBmJWA
JyEQCES/0Z8nrd973c+88dp71l8L8hEzFeppcPmHn/SfBk14bqyv3/eeN77xPffg+RmPcXrSxc78
z1zxkWcvXjTpysCT1u+59o2l368pC3WOLVxKZuGhQZTDeNL6+jM7rviZjT6X33rQ1TPV7Fr41I45
faBalasNGevrf3vtz7wx6FYPfcX7339FAxbjg7de/kZzjTT9Lsz6HnHFrU/20YoHHdGlNqehyQ9h
Hvd7xuFJ5evc8w7VNE/i+ZjZC/p99OuKnp50UdlNfMKkPKZSNUbqSeXnLVP9wvIdr/ZfKA6e3sAe
0KjF+B56BovJ8G9lcGqqznvue/LWK6qfckM8qXzHyN+c4UmzGZ4n9bxrBGvh6O4199Jt5j335XMm
FYGy0G8O3aBHvTaP1JPc5FlGe640qtq4PKm4zuYGnZtek/eTgvVmItHXfpIypoFEhxnbfpK6M/R/
YUfrSep3QWncYE/FRi3GgdCsP/lh9Vsofg0H+6ULup1UwJMQVaK3J3GR/t+agp/ceqW89j2l/KDt
wBEsujwHeja7FVr+h5KmHcxfSpXaAqn1mV1WFv7vlP6Vo18w9YtnrpL+JeRJuutDlXXS/CrKOq5P
HoIziTe+58Nesr5LHXrSUzuv0El9IG6F9uEw1794FCLPDW4yfETVUF1qO0r50tm7XpHPp6Zv7uJ0
xD1aXuo3Xn7F5bWegoyyJ0XmrxchziHM5PmkbjVFeubFnN1jVyWG9CS52/TGN17/ZVsUzXeeRP9y
EUFl3CTD8J4U3BxcNc4hrrn74OietxR8/7lH3IVKD6L99Y8+4moxvvY9VOD/z1Bt2Fz+4XtuvcLU
1nCd8nOpruAZuqeZmhud2nvEf2DsL5d1iPiZqprBbS32i8yZwe8+32D5mC9CXfdz87iIXyJ9c7CP
TumqeudYus8gpjV6eBLnF7/twXqZaDV8xNZvOW5R6mo6NzJztr+ElF/vDIPfYU7S0PxLFfzyu2py
U7q4s4jfUnfsOuSGqrLq3Bu0rgius3PKap4Uf25wcviInrK7aycunToorrO95bkLbjpR+fp0gktt
8zlZbwSeFJ//kweLCm7yfFL8uPCE7bn09UoHxTCexDJEGZxcWZz7Ga1EyXz2JFVozWllcd5WyzCk
J8mntDuWT056bl9b+p9VjREfVDyIlHSLffwRpwMqtUlTKp4wQY4sKlcbMoJfQzYkNX/7W1OcC087
daaJ3zWesOvfPaWdG9nnvLmSUtGGj8hVdY9C7Kp65+geXP+RQkxfJN+fZJ4r/uLnkupAPV1Gda+h
cN5DodZv/p3hcc3oZlZcs5gbrfHqP3Nz+rmuZljjXYMiuHHQLwldLvUrpH55it8Wd4Mw1USr0v/A
TB2+NejfuuKacwSD1hV8T+dHnDH3hSqeZDODOpwcPqKn7O6q8Usnbm26sukh6Un+pY5e+bpCzVA+
H2Lz52OO4tbsn5SsGZxXzxjGk5QAedpkMp5N5LMnfdkvrcKwnsRPTpvkm0N5U3mEnmR/EfiXi4cI
n5mxB654xM1zI7zPBE9O90zo+VwaMoTr0Az1jUvN30yGhjPnaKYRP9Ng/i6Zuk+6CqoHtYOlO9Gl
rvPhg6+5ufdZPFv1r2r8HGN3KsQ0RY/9pOD+Eq6Xo/QkcbspXIfHvYdm5T+51TPYLu1U5wr6H8+O
OfXLpm5VxS9nLcG/FWZg+0ul881NhKuV71bFfc3eO+geYXqxUIXgxsExol9F939fk1TXUN+pK3iS
ehRizw1ODh/RU+b7GmVGL51baVx9c3fzl6XkPdrmc7LeUDMRY0XnT/l6qsWzSz0W/knJ51VwXj1j
GE/ijSE+Zjjny4l8s5+kNEqdjuwqz5CepG5Z8ZuDnoatOTpPkv/Bc3MLHkT5wEUecbtCu+dn+XdB
PldTz6W6ws1WHYj52CenPZGoQ9i2qd+11H2yGPSea/n3nX7q4eq9yXizVTlqYmbC5mpa1Kxi50hR
PgvENEWDPcnqkb7Hmd8NHjdYoYP69/JOErWiOmaeXs0hI6Us8pZBkfr9p4PUvYMjmjkeT6Lgu3xz
PUldOjXhxFWK37/cBTfV7D066MTlc7LeUDMRY8XnL/4mwJ1LcFLyeRWcV8+YgCfp5vrFOKUClMF1
MtTgSaULy+EUip5UI/Kk8gat2ZzwH0QpAVQnfMTNYly00vWLZ2bQW/S5VGO44dRA9rlHz0N1GcWv
jJ12/ExTv2vy+cxhfmetipmdJOqHmtsrI+sPE8GVVDlqYpEJF6Wlc6QonwVimqLX+5N8zwjXy1F6
EoW6r73nvif1T84p1unYekZ3zMtv/fC1V6gJ6zO69tZbi7Z1RUVPsr9RNilaybtkeWGOZ47Fk/hp
oG5SFTwpcFBXh5PDR/SU1f1ID5q4Sv492t5q3QU3+bZt6t7NyXrDzZyT0bHk3dadS3BSXh3/vHrG
MJ4kvUcl/dfXeuYTtqDIiTKkJ/V8HrJIfee8eit3/b9QwS+FvUOGz0z7wMUfcXpu2E64ghQUl+mS
I33ecvCI9LM4BT3Je8TE7LTjZypPylTWcw7zxW89DUf38/foUp1P93PvOgwfweOictTE7IRLV9XO
1j9He59x1RBTFj3fx12so2YR5Se3uR2YZVU2qTF4tb788uINRnZcNavi91O/MdOU6hdlOJ9uoO7/
ajVGdP3W+fTLIxZj/bvkqqk7nf2tK+4duk5xIk9++D3qlqr6LzKpjv3fVe2XOvQkfQEpKZ8PXMd7
3MWjUH5ucFfDR/k6q5u1vcKJSxe/5rIr09Dkq2N7CvoK13oKMtTk1UUznUfnL72NjvnZKydJwSuW
azU+T1LiozI4qbeIer+P+8vqrdumB1XP33mKMqwnxW4OT+24zl0lVV/9Qo3k3sWdhzlKy74kH0T3
wMUfcaEOuiYhbiyl9Tv6XHKltYSekvfXoHpQujmLk4o6hH+v43z5u8b58fuk3mxzRfTMr/1+Hvxy
qRx1eYsJB1c1eo5yzoipjOT7uAmzrihZUU9Q9ey51d9XoIOitP4nSnn1LcbVd0M9TfEOIT2Z4ldU
rfrF/aWuKK/fNp9+ebzh+DfNTlKchVje/DouUw3BmYR5IPQdk5I1Xmp5GQnvdiwf2Xv8xz3y6BfP
Ddf5kBFcBMItHrZCeOk45/LLzRsLStfcnU6x0oh8OoXI/yDrisCTKGLzL05Z/U9a34u5mntWT8qT
CFYinl7VzwVQJbbI7y3FkJ5EUb456FuBzbGVa793Bfcfk6nvQtu/E/ek+CNuFmM9SV1BniDrgoOL
oreRGoP7l9MwExNj5T3JHvMF937X/MmHv7NFV9ZgOFlLBL9cKkeMUr6q8hw5nxjdTQPRkDCehBhn
9Lu8IcYTcn2ayujLkyZFv5403VFeyBETDzwosxbwpAmE3GxHTDD0/4ndf2rV/4/L24TTFPCk1sXU
u3sbA540awFPGmvwWxBq3z1GDBbyVQ+i9nerNC3gSe0KXo+n293bGPCkWQt4EgIxKwFPQiAQiH4D
noRAzEq0xZMQCARi1BHcHjMBT0IgZiXo1mBkBAAAZhh4EgKBiAQ8CQAACHgSAoGIBDwJAAAIeBIC
gYgEPAkAAAh4EgKBiAQ8CQAACHgSAoGIBDwJAAAIuhmuV/74VngSAjGSoN/DBoa5SQAAwAxDN8Mz
Z9bOnHl5be2VnsLUFE+iSV+8eDHIREwq8HBUifxVotKfNgyakrlJpLnvib1/+ZWb6eDdd/72oZMH
ORMAAKYJuhkePnz06NGTp06dOXv2/PnzrwY3cBnwJEQk8HBUifxVolKjJ42BpmRuEgnodB4//Cip
Eh3f/vBtp04f50xdCAAAUwLdDB955NEnnnjy0KEjL7xw+ty59cyuUrs86bXz5/GVOuOIag9HPPgx
unDh++vrYdHoQj/FVbgDWySPa478VaJSoyeNgaZkbhIJDp08SJ4kg1UJAACmCboZfvazn7/vvs6B
A48fPnz09Olzcktp9+6PPfPMCh8fPXqyRZ5UrHZP3vbL5w4/yuvxpMxpnBIwQGSmV+WKVXg4VHQe
P0o/aSzq89SZ8x/526d/9/975B23fu2Dn3+CiiiTbEnWH02QG7360ktnn3vu2PLyoWefXT169MTL
L7uXnF978cUzI1Kl/FWiUqMnjYGmZG4SCd5952//q5v/pYzbH77NlAEAwLRAN8MPf/gjn/zknq98
5cGnn372hRdOr6294u7ehw8/f+bMy3x87tx6vZ6kViP7H/qgqEf0WphVhy98687n991KB0t/9I9P
P33/ueefePbz17x84fx3v7vyUcHzz78gGtYc2z7+6L/5o7t/fedDL798YTyqNNgo1Orhp0/SVCkO
HT27du4V+knHdPDQUyd6qlKvh0MFmdDf/z8/xscff/DZ//k3P7XhP3xUxr+78b5njp119UcTr5ES
kfj/3d/tl0H/RTh27KR+2rz26KOPjUiV8leJSo2eNAaakrlJpCExcpL0+OFHTa7mhz/8If2kU5ZJ
AABoHXQz/K//9UO3337Hffd1vvOdp0+ceFF6EgWZDC0iTz/9TI2epBaktbX1EydOHT/+wtmzJGIq
x/6fvnfklxxe10mSyJD457GHdj3yX/7Zd267/JW1U48//t1bNO973/v+7b/9t+94xztqVyX9KpI6
nVNnzv/rP/wiScCvfPArw6jSlx577g8+uZ9j9cRZ6oqDc77+3eOUSQeHTtJDN4gqURMagn3lueNn
z545Tz/pmA623vb1D37+ibwq5R8Oiq9+5xhJEnVIc/7d/+8RHoiCMqUw/aNf/+Rzp9aqPw36jNfO
n7/w+OPfkXpEVuSS5E/r66/SwYhUKX+VqNToSWOgKZmbRJpTp49/5tFPsSS9cmHN5L7++vr6eqfT
2blz502a3bt3P/HEE5TvtAmMmPu3XbZxvmMSAIBhoJshedJHP/rXf/u397MnkQ/JG/j586+urBx+
5JFvnj69VoMn0VJEbkRLlFufKCj53HPH2JaC+tHouTBzsCRRPLTwT1iSKHP9/Ktr59bJAI4ePUWe
VLsqsaacWVv/2lMnSD4++/AqLf8kAaxKZeGoogXkQE4m2GM4OOfuRw+z1vzT3/nsYKpU9qQXTp0j
Q6ID+kmZf/7F72RUqefD4eZ/xX+5nw/omtzxlWUuJTfa8hcPcj5dpZ7bV4PGa/Q85ufbU08ddHb+
wgsvfetb3+b873znu3ywuvpcxadi9chfJSo1etIYaErmJpGApYcMiTyJc5i9e/f+7u+8e2lp6fjx
4y9pnn322c999rO/8zu/c/jwYVNpEDrzGz0m5AEri3Mb5xZXTMojU5Ti0K4rLzPnw/Rur5r0qgVP
AqA26GaY9yQZw3rSyy+/8vTTy7wUlYNWqbU1Grv3+tRzYX7ytl9mQ6IoJyleXnvl+edOsicRH/3o
Rzl/6FBvHr/l7if/3lV38MIv4yN/+3Spvgq9+RRmyqjoSRROlfqKsie5YE/6N390d9BERs+HQ86f
4n//vc8GL7HRRSND4tInDr/Ur+f1DLrC589f4KfZt7/9FMk6SxIHPS2dIXG0zpO6D97wxitvP9rt
mnQd0JTMTSLLoZMH333nb/MxnSBZ0e///u9fiHHmzJn3v//9XLNvtCN5ckBO0qeS1ET9niSasDbl
+4AnATBW6GaY8aQ638dNi1NGkjh4Deu5xdJzYT53+NHTT99/7KFdDy38E5Kkh2/8Xw/u+Q3KoXB1
Xnjh7JHDJ44ePfW+972vLk+iBf6zD6/SYv8nn3ns+OnzlEPWQu5COe/6q29Q8qXv/M2Re7fJeO6+
Pzy78lXXQzSqexIFVQ6a9wzpSdGo15P++fWfpw63ffxRV4Em8M3lU1z68Qefdfl1BT2jXnrpLD/H
Tp58UTjQa6REJElN86Ru9+jtV76R9xcYsiBTFmOCnhTwrW9969+/5S2nTp0yciRYWlq6/vrrTb3+
UJaUNgO5z+TcQGXOL5K3MK51Kp8o+hG5Sn0KREuNVBG/pimKzk0SkR7lOFyZrckSyaK8lXIdgj2p
o3qS+ZEOFXpEg+yBSV95AGYCuhlmPKnG93G/dvz4C3IpOnDg8bNnX15bWz927KTMP3LkaM8lqufC
fP78a+eef4Lfk7T0R//46U9eTT/5bd1f/erX9Bu4P/rQQ4+sn3/17Nnzt9xyS32e9No7bv3azy/c
y8lAks69sv7i2otBnHn2wZOP7OT6qUh5Eh1TnD79crs8ieJf/+EXT51RHsnBZsxFA8y/Qrx29OgJ
foKdO0fjFk+w8+cvBJJE0RBPcm6kU0WyTKM86Rc08/Pzd91118MPP/zAAw984hOfuOqqqyhzQE9S
spFarL0yrSq80GtBsQVinyeXbxXBHYv+OKWORaOQoCg1N0lsc0jbjKp6aKUoUN7CFf0m8TpsOXY4
lx+trA5szUO7toVZ8hiAWYRuhvnX3WgJq+V93K8F70mieOqpg7RKUUiF+uY3D1BOfkup58JM8ezn
r+H3JJEhnX76fpIk0qZXzp1cWXmexOjd73433bW/+MUvkip9+tOfrsuTKLZ9/NF/fv3n+fiOryzT
qn/L3U/S8dnzp53feHH0OwN7kovqnkRKVA7Kf+q5M5tv+ILrJIghPekjf/s09eDiP/z5V6UkUdAc
DqyY/aS/6hyURbUEPZ1efPEMP8FeeOGloJSeb08/vcy7ShwkVc3yJBalGx60SdIis9vEdZwnRYp0
U84hbnjQuBTVM1k2M2hLUzI3iX5wnhRlME9KGIai5CwuQ3qPrJfIp2zRj6nk17WUxizwikr1og1j
nlQojMT5SrQJ4+oEcpMchepEyqhE5AR9ATBr0M1wkPdxf/7zd9H/FyV/8ifv1+/FLlqKUH/dxqvU
s8+uyiAFK6sSLWlDetL586+9fOE8v3GbPUnlnzv58suvnjur3sT99a9/k9+ZtHv3bir67nfNi4vR
6OtkH3765N+76o5f3/nQ3kcPU1LN5OVXXz7+Xak1XvTpSUvfPsbbSDIo01XouR9DM/zSY8898swL
amIvv0oHB4+ePbf2ivvrvHIM6Uk9g67Sf1pUb4Si0O9P6u0ofT4DlQzxs4vsXL8/KahAI5YjqBPG
Nx89sOczd8r4/Bf2vnDqdFCNI3+VqJT1hcl4EtuMNBs6tp4UKzp61O0z6TztU7ZQZR69/QaRpXL0
MU3J3CT6YcyeVDYZm+OXFIoSz9dD+Mx3ol6T0B3GK0rPTdLLk1S5mRGhW5eaROqEblOky5Vdju3U
r6KRfQEwY9DNcMD3ccuFKr9EUZw4cYpXKbaiaDhVsn/7FnbiosrCTOrzd3/3mEuun3+VgiWJwnkS
IaulovrJ0pL/8Qef/V/e9Rla8im5du6VQomi0acn9YyenkTSQ9X4z9ko6IDf4fTBzz+RUqXRedK6
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

------MultipartBoundary--WJYGjXZBIsLH8W9XYSwBFOvHaqe9Rm2yqzypfCs1Nm----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://blog.deniable.org/dbi/Visual.Studio.Tools.run.png

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
19pDIoiTCOH1aMMUh3qeIXweYdraLj/dn/JP8d0naDtOGRl3d3Ddqa/7zFvvLvyH+gM9WX4KXP+d
jU+AM/4oGuOOFcLRsfWrp+sfm3+tihOOzJGPQ0bGqQ6uO/V1n7nrXcYtD+HwQnd6//jktnnuIczI
yDjrwXWnvu4zd73LuNUhjOuVEGZkZDzPwXWnvu4zd73LSAhjLSHMyMh4noPrTn3dZ+56l5EQxhon
1O6PiDiWud2Yu95lJISxlpGRkXETw65HrbnrXUZCGBERJ49BdI4lIYyIiJNGbI7NtrtPQhgREWct
IYyIiLOWEEZExFlLCCMi4qwlhBERcdYSwoiIOGsJ4R3DCY2IOCdX7RZzJIR3SJ3QiIhzwHXvqt1K
CO+YOqG2LCLiLrpqtxLCOyYhjIhzc9VuJYR3TEIYEefmqt1KCO+YhDAizs1Vu5UQ3jHXEcJnD19Y
vPTwqS67imPNeys8vre4uLi3ePLZ24tXLy4Wrz6WdWbIuTn2vnJ+Xli8/rEtWzne9ofb3r8ft9Gx
jt1Vu5UQznJ7XpTX8onw49cWL7342uKZLVMzj8+x5j0Je/aV574OYbNet+xiGcqN0VCezLm5Qbqv
1/VamTHP6PY5d5zj4f3/s3hyn/vn7Ntw21d4PvJ6GrrRH3gmj93Q7nGcctVuXX8I5SRc9qff0zH1
ohxbdoUX8hVcSwg/e7p4/cVj7Pux5j0Fe873+gLQHIPuk2L7HlnONRqlnBvf1+t6v82ZZ2z7cr1b
Xw/n7Ntw28/z+TxP884dnxwPieFVu3W9ITz4TX1bTL2YTuuFNh1C9nXwQ8r9t1f392/W4Xnb/RVG
/zwfrs4xNsuHx2BqvePNu4v1V+th9dx4Ey5vD1+P3Wt2uI32MXP0864fa2/g5dw7IVw9bvJ53Oi5
Werf02vNa2Z1f82P4fba2/33j+uxdZy4v+Zaqm00948fg5HjP7qPU8ua/R95/pPnYPD6Wq332mDO
5rkubZ7XcNvNfkw9l3bO9fGrZe36g/u3zkUzz9L2e2BsO9v37zyf5nyPHrvhPnbPd/g+GtvGypW6
tXSNIZz/pl49meET7w9E+wYdvAg38x667uq+snOSRi4Ku49tTtTWerZseP9h29o6yf0xa0/8mPEQ
9heL9Yt3eft+/4a1bXA8d95Qg8d3x7t5fuvvB+u1L+hjzbuleS1urTtctppz9bynHjPHcF9n6rax
5zHdOjd0bnb2b/n4bvlqnvU+ddureYbba2/329/6wXjsdbnnfOgxaLc7tY8z9n/0+feP0e0PHq/3
Nbaelz22vh/b37Hj16+7Nc/Qas7tc9HY2rfLnKeRbew9d/2vk4fbmnotLF2+WyvXF8KdF01r6mT2
B6yeeDdXe/sy6zb2zlPLmgMvJ2pjbNnw/gO21e5/d3tw3PYYDWE3z9T5abHPw+PYPs/Vc1rtV/tc
2/Xa28eYd6A9hv0xXh/Dfvnry59Mx183zWMG+Im2fmjx4My0s8252NZzODfd/skx2HrvYmx77e12
2VK3jea+9f1T56PZ13buqX2cu/9jz3/9GN9+9/rgdbW+4A/mXK9br5+x19Dg+6n9HTt+W+va8qn7
Zd8udZ6mtrH7fDbbbI753tfCyYVwuLONS7952tuHrFu3hwd5xjw7z6Vdd2hs2fD+Q7Y1fgGeYzSE
O8d/P34q2+xH+xzGXvATz/XI8651z3V4zleGx3QVs8HxmPGYaRP7M6Y79wc+pvd8zs1Sc1y6Zdwn
n+p2t9fe3t3e6OtyxvmYPAZT+3jI/jf7MWv7/Xv61fXy9hiM/ZA98v2+5zL5vh7Oue9+7hvZt7Ht
NMdn+ziNbXvq3LX7sDS5jZVLd6v3/D4RTp3MnQM2dfvQdee86JrbOye9XXdobNkh25o+yYeY/kQ4
9YYR7Ft9YtLnYOdv4rkee96yc/4agwvVej/2PWavif0ZtXoPbL3p53ou56ZRx2jnWI1tr70t2xt7
Xc45H1PHYGofD9r/gfZxE9vnQr+53g2W6bbrcSPfT+3v3vf1cM4990/t26XO09i2lyaO3WpbdT76
dSef4ymFcN+beupk7hywqdsHrDt1Yqcet3PS23WHxpbN3NaMk3yI0RD252fz4lvenvobYYf9rH1r
nsPWfs98rt3tuu8655Xn1rwWnz28t7Xu5nVX3089Zo7hXAfonm/7uOVcdRG9yXOznGfr/cy+dPvF
OoNjtbW94fGtT95j29+sv/u6nHM+Bvva79PmOE3t475l/T6OPv/+9s72B89t67GDZd353F5v769G
u++nj7e+rzvNfk3dP7lvlzlPY9uuZSPHDrJt38bK5bu1co0hXOp2fuxNzZOd8eLbe/uAdWe/6Nrb
fD94HluPa7Xz2P1T29pzkrvnYBdCNx5CrJ7X+pNnvagntrH5FUbz2NHnM/VcN6533vZNWssH83av
QVlv6zVrj6n59tv87bBe1zP1x3+93aX1uTjVc7O1z80c/THF7r+Y3N3eznbW56e5X87HZl/l+E/t
4+iy4T5OPP/e9rGy57a7bLOfS/fvNduz75emnku7nzvvg3b98fvH960eY9tp7l+fp7Ftr+w7drs/
RNk2Vq7UraXrDSG2TthKvVDnvfj23T5k3bkvOrk9eDPvviCGeFy/3hpvxOF8e7bVzjE8yf0xWx/D
PaZDeAkch+4F3+7zFR1r3nNy9HMjy07NTe/rbTpWp+Yaj91Vu3X9IYwbde0h7C6ybdivw7HmPSfH
Pje27NTc9L7epmN1aq7v2F21WwnhHXP9ISzXfbEtx5r3nOQYxnm7arcSwjvmeCGMiDhNV+1WQnjH
JIQRcW6u2q2E8I5JCCPi3Fy1WwnhHcMJtfsjIu6qq3YrIbxjMjIyMs5x2PVwroQwIiLOWkIYERFn
LSGMiIizlhBGRMRZSwgjIuKsJYQREXHWEsKIiDhrCWFERJy1hDAiIs5aQhgREWctIYyIiLOWEEZE
xFlLCCMi4qwlhBERcdYSwogzlHG8wQXVjnnJON7Yd+zHJIQRZyjv8+OoC6otKzn2xzHn2I9JCCPO
UN7nx5EQ3pyEMCIOkvf5cSSENychjIiD5H1+HAnhzUkII+IgeZ8fR0J4cxLCiDhI3ufHkRDenIQw
Ig6S9/lxJIQ3JyGMiIPkfX4cCaF5e/HqxQuL1z+2ZdcnIYyIg5zq+/zZwxcWFxcXay89fDpY3l5Q
ud2uc7NOLoQfv7Z4aXA88epjWe+oEsKIOEGn+D5fRfDe4sn6vjZ02xfUJ/dPK4I4qRA+vifhWx7D
F19bPBuud3QJYUScoNN7n6+it/NppbuYVxw3F9Qumvff3l73BJxOCJ8uXn9x6geF1fH2T4r9cX64
Cil2P5kPHrs+D9v378yXEEbEKTm593n3K7zhp8EyvIj23z9ervvcP9XMczIh7I7nAfHZOv590Cpw
W8tWgd3Eb3n7PueiCe/OfAlhRJyYk3uf88lP47a6KK8+XfQXaCSE00Z/sBgaHM9O8wPHOlyD22OB
3dneKoyb85YQRsSJObn3+eiFe3gRre/5enp/H8RphXAqPu0xtOM8XLe/vfWr6oH+75GthDAiTtbp
vc9XF+bN35V6I38jXN1//IvroU4mhJ/t+RvhTtCGsWrDNbg99gPLWCA77XzHkRBGxEFO8X1+mX81
emq/Ij2dEC71n9K2f7hYHkOOWfuJcesHizZcw9sz/0a49OzhvZH5jiMhjIiDnOr7/DL/j/CUYnhS
IUQXvM3xRIVx61jfvzc4tlMhrNuDOUf+1ejmvLSPP46EMCIOkvf5cZxcCM9IQhgRB8n7/DgSwpuT
EEbEQfI+P46E8OYkhBFxkLzPjyMhvDkJYUQcJO/z40gIb05CGBEHyfv8OBLCm5MQRsRB8j4/joTw
5iSEEXGQvM+PIyG8OQlhRByEwZs/rt+cENrj4uoSwoiYjTd9HI8d82Lrx/WxY75PQhgREWctIYyI
iLOWEEZExFlLCCMi4qwlhBERcdYSwoiIOGsJYUREnLWEMCIizlpCGBERZy0hjIiIs5YQRkTEWUsI
IyLirCWEERFx1hLCiIg4awlhRESctZ0QckdERMQ5eeWVVxb/B1nomyPjyOh2AAAAAElFTkSuQmCC

------MultipartBoundary--WJYGjXZBIsLH8W9XYSwBFOvHaqe9Rm2yqzypfCs1Nm----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://blog.deniable.org/dbi/Visual.Studio.Tools.dynamorio.setup.png

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
HnL/P7T6IicPk3xAAAAAAElFTkSuQmCC

------MultipartBoundary--WJYGjXZBIsLH8W9XYSwBFOvHaqe9Rm2yqzypfCs1Nm----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://blog.deniable.org/dbi/memory.allocation.windows.png

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
/wO22Ng5gB0K+gAAAABJRU5ErkJggg==

------MultipartBoundary--WJYGjXZBIsLH8W9XYSwBFOvHaqe9Rm2yqzypfCs1Nm------
